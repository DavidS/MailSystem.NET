//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.832.
// 
#pragma warning disable 1591

namespace WebProxyTest.WS_SMTP {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WS_SMTPSoap", Namespace="http://tempuri.org/")]
    public partial class WS_SMTP : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SetFromOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFromWithNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddToAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddToAddressWithNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCCAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCCAddressWithNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddBCCAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddBCCAddressWithNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPortOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddHostOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddHostWithPortOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSubjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetstrBodyHTMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBodyTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSessionedMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMail01OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMail02OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMail03OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMail04OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMail05OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMail06OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMail07OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMail08OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMail09OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMail10OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMail11OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMail12OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMail13OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMail14OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMailOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WS_SMTP() {
            this.Url = global::WebProxyTest.Properties.Settings.Default.WebProxyTest_WS_SMTP_WS_SMTP;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SetFromCompletedEventHandler SetFromCompleted;
        
        /// <remarks/>
        public event SetFromWithNameCompletedEventHandler SetFromWithNameCompleted;
        
        /// <remarks/>
        public event AddToAddressCompletedEventHandler AddToAddressCompleted;
        
        /// <remarks/>
        public event AddToAddressWithNameCompletedEventHandler AddToAddressWithNameCompleted;
        
        /// <remarks/>
        public event AddCCAddressCompletedEventHandler AddCCAddressCompleted;
        
        /// <remarks/>
        public event AddCCAddressWithNameCompletedEventHandler AddCCAddressWithNameCompleted;
        
        /// <remarks/>
        public event AddBCCAddressCompletedEventHandler AddBCCAddressCompleted;
        
        /// <remarks/>
        public event AddBCCAddressWithNameCompletedEventHandler AddBCCAddressWithNameCompleted;
        
        /// <remarks/>
        public event SetPortCompletedEventHandler SetPortCompleted;
        
        /// <remarks/>
        public event AddHostCompletedEventHandler AddHostCompleted;
        
        /// <remarks/>
        public event AddHostWithPortCompletedEventHandler AddHostWithPortCompleted;
        
        /// <remarks/>
        public event SetUserCompletedEventHandler SetUserCompleted;
        
        /// <remarks/>
        public event SetSubjectCompletedEventHandler SetSubjectCompleted;
        
        /// <remarks/>
        public event SetstrBodyHTMLCompletedEventHandler SetstrBodyHTMLCompleted;
        
        /// <remarks/>
        public event SetBodyTextCompletedEventHandler SetBodyTextCompleted;
        
        /// <remarks/>
        public event SendSessionedMailCompletedEventHandler SendSessionedMailCompleted;
        
        /// <remarks/>
        public event SendMail01CompletedEventHandler SendMail01Completed;
        
        /// <remarks/>
        public event SendMail02CompletedEventHandler SendMail02Completed;
        
        /// <remarks/>
        public event SendMail03CompletedEventHandler SendMail03Completed;
        
        /// <remarks/>
        public event SendMail04CompletedEventHandler SendMail04Completed;
        
        /// <remarks/>
        public event SendMail05CompletedEventHandler SendMail05Completed;
        
        /// <remarks/>
        public event SendMail06CompletedEventHandler SendMail06Completed;
        
        /// <remarks/>
        public event SendMail07CompletedEventHandler SendMail07Completed;
        
        /// <remarks/>
        public event SendMail08CompletedEventHandler SendMail08Completed;
        
        /// <remarks/>
        public event SendMail09CompletedEventHandler SendMail09Completed;
        
        /// <remarks/>
        public event SendMail10CompletedEventHandler SendMail10Completed;
        
        /// <remarks/>
        public event SendMail11CompletedEventHandler SendMail11Completed;
        
        /// <remarks/>
        public event SendMail12CompletedEventHandler SendMail12Completed;
        
        /// <remarks/>
        public event SendMail13CompletedEventHandler SendMail13Completed;
        
        /// <remarks/>
        public event SendMail14CompletedEventHandler SendMail14Completed;
        
        /// <remarks/>
        public event SendMailCompletedEventHandler SendMailCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetFrom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetFrom(string strFrom) {
            object[] results = this.Invoke("SetFrom", new object[] {
                        strFrom});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetFromAsync(string strFrom) {
            this.SetFromAsync(strFrom, null);
        }
        
        /// <remarks/>
        public void SetFromAsync(string strFrom, object userState) {
            if ((this.SetFromOperationCompleted == null)) {
                this.SetFromOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFromOperationCompleted);
            }
            this.InvokeAsync("SetFrom", new object[] {
                        strFrom}, this.SetFromOperationCompleted, userState);
        }
        
        private void OnSetFromOperationCompleted(object arg) {
            if ((this.SetFromCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFromCompleted(this, new SetFromCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetFromWithName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetFromWithName(string strFrom, string strFromName) {
            object[] results = this.Invoke("SetFromWithName", new object[] {
                        strFrom,
                        strFromName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetFromWithNameAsync(string strFrom, string strFromName) {
            this.SetFromWithNameAsync(strFrom, strFromName, null);
        }
        
        /// <remarks/>
        public void SetFromWithNameAsync(string strFrom, string strFromName, object userState) {
            if ((this.SetFromWithNameOperationCompleted == null)) {
                this.SetFromWithNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFromWithNameOperationCompleted);
            }
            this.InvokeAsync("SetFromWithName", new object[] {
                        strFrom,
                        strFromName}, this.SetFromWithNameOperationCompleted, userState);
        }
        
        private void OnSetFromWithNameOperationCompleted(object arg) {
            if ((this.SetFromWithNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFromWithNameCompleted(this, new SetFromWithNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddToAddress", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddToAddress(string strTo) {
            object[] results = this.Invoke("AddToAddress", new object[] {
                        strTo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddToAddressAsync(string strTo) {
            this.AddToAddressAsync(strTo, null);
        }
        
        /// <remarks/>
        public void AddToAddressAsync(string strTo, object userState) {
            if ((this.AddToAddressOperationCompleted == null)) {
                this.AddToAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddToAddressOperationCompleted);
            }
            this.InvokeAsync("AddToAddress", new object[] {
                        strTo}, this.AddToAddressOperationCompleted, userState);
        }
        
        private void OnAddToAddressOperationCompleted(object arg) {
            if ((this.AddToAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddToAddressCompleted(this, new AddToAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddToAddressWithName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddToAddressWithName(string strTo, string strToName) {
            object[] results = this.Invoke("AddToAddressWithName", new object[] {
                        strTo,
                        strToName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddToAddressWithNameAsync(string strTo, string strToName) {
            this.AddToAddressWithNameAsync(strTo, strToName, null);
        }
        
        /// <remarks/>
        public void AddToAddressWithNameAsync(string strTo, string strToName, object userState) {
            if ((this.AddToAddressWithNameOperationCompleted == null)) {
                this.AddToAddressWithNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddToAddressWithNameOperationCompleted);
            }
            this.InvokeAsync("AddToAddressWithName", new object[] {
                        strTo,
                        strToName}, this.AddToAddressWithNameOperationCompleted, userState);
        }
        
        private void OnAddToAddressWithNameOperationCompleted(object arg) {
            if ((this.AddToAddressWithNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddToAddressWithNameCompleted(this, new AddToAddressWithNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddCCAddress", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddCCAddress(string strCC) {
            object[] results = this.Invoke("AddCCAddress", new object[] {
                        strCC});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddCCAddressAsync(string strCC) {
            this.AddCCAddressAsync(strCC, null);
        }
        
        /// <remarks/>
        public void AddCCAddressAsync(string strCC, object userState) {
            if ((this.AddCCAddressOperationCompleted == null)) {
                this.AddCCAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCCAddressOperationCompleted);
            }
            this.InvokeAsync("AddCCAddress", new object[] {
                        strCC}, this.AddCCAddressOperationCompleted, userState);
        }
        
        private void OnAddCCAddressOperationCompleted(object arg) {
            if ((this.AddCCAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCCAddressCompleted(this, new AddCCAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddCCAddressWithName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddCCAddressWithName(string strCC, string strCCName) {
            object[] results = this.Invoke("AddCCAddressWithName", new object[] {
                        strCC,
                        strCCName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddCCAddressWithNameAsync(string strCC, string strCCName) {
            this.AddCCAddressWithNameAsync(strCC, strCCName, null);
        }
        
        /// <remarks/>
        public void AddCCAddressWithNameAsync(string strCC, string strCCName, object userState) {
            if ((this.AddCCAddressWithNameOperationCompleted == null)) {
                this.AddCCAddressWithNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCCAddressWithNameOperationCompleted);
            }
            this.InvokeAsync("AddCCAddressWithName", new object[] {
                        strCC,
                        strCCName}, this.AddCCAddressWithNameOperationCompleted, userState);
        }
        
        private void OnAddCCAddressWithNameOperationCompleted(object arg) {
            if ((this.AddCCAddressWithNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCCAddressWithNameCompleted(this, new AddCCAddressWithNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddBCCAddress", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddBCCAddress(string strBCC) {
            object[] results = this.Invoke("AddBCCAddress", new object[] {
                        strBCC});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddBCCAddressAsync(string strBCC) {
            this.AddBCCAddressAsync(strBCC, null);
        }
        
        /// <remarks/>
        public void AddBCCAddressAsync(string strBCC, object userState) {
            if ((this.AddBCCAddressOperationCompleted == null)) {
                this.AddBCCAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddBCCAddressOperationCompleted);
            }
            this.InvokeAsync("AddBCCAddress", new object[] {
                        strBCC}, this.AddBCCAddressOperationCompleted, userState);
        }
        
        private void OnAddBCCAddressOperationCompleted(object arg) {
            if ((this.AddBCCAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddBCCAddressCompleted(this, new AddBCCAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddBCCAddressWithName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddBCCAddressWithName(string strBCC, string strBCCName) {
            object[] results = this.Invoke("AddBCCAddressWithName", new object[] {
                        strBCC,
                        strBCCName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddBCCAddressWithNameAsync(string strBCC, string strBCCName) {
            this.AddBCCAddressWithNameAsync(strBCC, strBCCName, null);
        }
        
        /// <remarks/>
        public void AddBCCAddressWithNameAsync(string strBCC, string strBCCName, object userState) {
            if ((this.AddBCCAddressWithNameOperationCompleted == null)) {
                this.AddBCCAddressWithNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddBCCAddressWithNameOperationCompleted);
            }
            this.InvokeAsync("AddBCCAddressWithName", new object[] {
                        strBCC,
                        strBCCName}, this.AddBCCAddressWithNameOperationCompleted, userState);
        }
        
        private void OnAddBCCAddressWithNameOperationCompleted(object arg) {
            if ((this.AddBCCAddressWithNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddBCCAddressWithNameCompleted(this, new AddBCCAddressWithNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetPort", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetPort(int iPort) {
            object[] results = this.Invoke("SetPort", new object[] {
                        iPort});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetPortAsync(int iPort) {
            this.SetPortAsync(iPort, null);
        }
        
        /// <remarks/>
        public void SetPortAsync(int iPort, object userState) {
            if ((this.SetPortOperationCompleted == null)) {
                this.SetPortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPortOperationCompleted);
            }
            this.InvokeAsync("SetPort", new object[] {
                        iPort}, this.SetPortOperationCompleted, userState);
        }
        
        private void OnSetPortOperationCompleted(object arg) {
            if ((this.SetPortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPortCompleted(this, new SetPortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddHost", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddHost(string host) {
            object[] results = this.Invoke("AddHost", new object[] {
                        host});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddHostAsync(string host) {
            this.AddHostAsync(host, null);
        }
        
        /// <remarks/>
        public void AddHostAsync(string host, object userState) {
            if ((this.AddHostOperationCompleted == null)) {
                this.AddHostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddHostOperationCompleted);
            }
            this.InvokeAsync("AddHost", new object[] {
                        host}, this.AddHostOperationCompleted, userState);
        }
        
        private void OnAddHostOperationCompleted(object arg) {
            if ((this.AddHostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddHostCompleted(this, new AddHostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddHostWithPort", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddHostWithPort(string host, int port) {
            object[] results = this.Invoke("AddHostWithPort", new object[] {
                        host,
                        port});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddHostWithPortAsync(string host, int port) {
            this.AddHostWithPortAsync(host, port, null);
        }
        
        /// <remarks/>
        public void AddHostWithPortAsync(string host, int port, object userState) {
            if ((this.AddHostWithPortOperationCompleted == null)) {
                this.AddHostWithPortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddHostWithPortOperationCompleted);
            }
            this.InvokeAsync("AddHostWithPort", new object[] {
                        host,
                        port}, this.AddHostWithPortOperationCompleted, userState);
        }
        
        private void OnAddHostWithPortOperationCompleted(object arg) {
            if ((this.AddHostWithPortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddHostWithPortCompleted(this, new AddHostWithPortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetUser(string strUser, string strPassword) {
            object[] results = this.Invoke("SetUser", new object[] {
                        strUser,
                        strPassword});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetUserAsync(string strUser, string strPassword) {
            this.SetUserAsync(strUser, strPassword, null);
        }
        
        /// <remarks/>
        public void SetUserAsync(string strUser, string strPassword, object userState) {
            if ((this.SetUserOperationCompleted == null)) {
                this.SetUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserOperationCompleted);
            }
            this.InvokeAsync("SetUser", new object[] {
                        strUser,
                        strPassword}, this.SetUserOperationCompleted, userState);
        }
        
        private void OnSetUserOperationCompleted(object arg) {
            if ((this.SetUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserCompleted(this, new SetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSubject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetSubject(string strSubject) {
            object[] results = this.Invoke("SetSubject", new object[] {
                        strSubject});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSubjectAsync(string strSubject) {
            this.SetSubjectAsync(strSubject, null);
        }
        
        /// <remarks/>
        public void SetSubjectAsync(string strSubject, object userState) {
            if ((this.SetSubjectOperationCompleted == null)) {
                this.SetSubjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSubjectOperationCompleted);
            }
            this.InvokeAsync("SetSubject", new object[] {
                        strSubject}, this.SetSubjectOperationCompleted, userState);
        }
        
        private void OnSetSubjectOperationCompleted(object arg) {
            if ((this.SetSubjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSubjectCompleted(this, new SetSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetstrBodyHTML", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetstrBodyHTML(string strBodyHTML) {
            object[] results = this.Invoke("SetstrBodyHTML", new object[] {
                        strBodyHTML});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetstrBodyHTMLAsync(string strBodyHTML) {
            this.SetstrBodyHTMLAsync(strBodyHTML, null);
        }
        
        /// <remarks/>
        public void SetstrBodyHTMLAsync(string strBodyHTML, object userState) {
            if ((this.SetstrBodyHTMLOperationCompleted == null)) {
                this.SetstrBodyHTMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetstrBodyHTMLOperationCompleted);
            }
            this.InvokeAsync("SetstrBodyHTML", new object[] {
                        strBodyHTML}, this.SetstrBodyHTMLOperationCompleted, userState);
        }
        
        private void OnSetstrBodyHTMLOperationCompleted(object arg) {
            if ((this.SetstrBodyHTMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetstrBodyHTMLCompleted(this, new SetstrBodyHTMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetBodyText", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetBodyText(string strBodyText) {
            object[] results = this.Invoke("SetBodyText", new object[] {
                        strBodyText});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBodyTextAsync(string strBodyText) {
            this.SetBodyTextAsync(strBodyText, null);
        }
        
        /// <remarks/>
        public void SetBodyTextAsync(string strBodyText, object userState) {
            if ((this.SetBodyTextOperationCompleted == null)) {
                this.SetBodyTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBodyTextOperationCompleted);
            }
            this.InvokeAsync("SetBodyText", new object[] {
                        strBodyText}, this.SetBodyTextOperationCompleted, userState);
        }
        
        private void OnSetBodyTextOperationCompleted(object arg) {
            if ((this.SetBodyTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBodyTextCompleted(this, new SetBodyTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendSessionedMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendSessionedMail(bool UseSSL, bool UseMD5, SslProtocols protocol) {
            object[] results = this.Invoke("SendSessionedMail", new object[] {
                        UseSSL,
                        UseMD5,
                        protocol});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendSessionedMailAsync(bool UseSSL, bool UseMD5, SslProtocols protocol) {
            this.SendSessionedMailAsync(UseSSL, UseMD5, protocol, null);
        }
        
        /// <remarks/>
        public void SendSessionedMailAsync(bool UseSSL, bool UseMD5, SslProtocols protocol, object userState) {
            if ((this.SendSessionedMailOperationCompleted == null)) {
                this.SendSessionedMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSessionedMailOperationCompleted);
            }
            this.InvokeAsync("SendSessionedMail", new object[] {
                        UseSSL,
                        UseMD5,
                        protocol}, this.SendSessionedMailOperationCompleted, userState);
        }
        
        private void OnSendSessionedMailOperationCompleted(object arg) {
            if ((this.SendSessionedMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSessionedMailCompleted(this, new SendSessionedMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail01", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail01(string strFromEmail, string strFromName, string strTos, string strCCTos, string strBCCTos, string strSubject, string strBodyText) {
            object[] results = this.Invoke("SendMail01", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMail01Async(string strFromEmail, string strFromName, string strTos, string strCCTos, string strBCCTos, string strSubject, string strBodyText) {
            this.SendMail01Async(strFromEmail, strFromName, strTos, strCCTos, strBCCTos, strSubject, strBodyText, null);
        }
        
        /// <remarks/>
        public void SendMail01Async(string strFromEmail, string strFromName, string strTos, string strCCTos, string strBCCTos, string strSubject, string strBodyText, object userState) {
            if ((this.SendMail01OperationCompleted == null)) {
                this.SendMail01OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMail01OperationCompleted);
            }
            this.InvokeAsync("SendMail01", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText}, this.SendMail01OperationCompleted, userState);
        }
        
        private void OnSendMail01OperationCompleted(object arg) {
            if ((this.SendMail01Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMail01Completed(this, new SendMail01CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail02", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail02(string strFromEmail, string strFromName, string strTos, string strCCTos, string strBCCTos, string strSubject, string strBodyText, string strHost) {
            object[] results = this.Invoke("SendMail02", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMail02Async(string strFromEmail, string strFromName, string strTos, string strCCTos, string strBCCTos, string strSubject, string strBodyText, string strHost) {
            this.SendMail02Async(strFromEmail, strFromName, strTos, strCCTos, strBCCTos, strSubject, strBodyText, strHost, null);
        }
        
        /// <remarks/>
        public void SendMail02Async(string strFromEmail, string strFromName, string strTos, string strCCTos, string strBCCTos, string strSubject, string strBodyText, string strHost, object userState) {
            if ((this.SendMail02OperationCompleted == null)) {
                this.SendMail02OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMail02OperationCompleted);
            }
            this.InvokeAsync("SendMail02", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost}, this.SendMail02OperationCompleted, userState);
        }
        
        private void OnSendMail02OperationCompleted(object arg) {
            if ((this.SendMail02Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMail02Completed(this, new SendMail02CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail03", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail03(string strFromEmail, string strFromName, string strTos, string[] strCCTos, string strBCCTos, string strSubject, string strBodyText, string strHost) {
            object[] results = this.Invoke("SendMail03", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMail03Async(string strFromEmail, string strFromName, string strTos, string[] strCCTos, string strBCCTos, string strSubject, string strBodyText, string strHost) {
            this.SendMail03Async(strFromEmail, strFromName, strTos, strCCTos, strBCCTos, strSubject, strBodyText, strHost, null);
        }
        
        /// <remarks/>
        public void SendMail03Async(string strFromEmail, string strFromName, string strTos, string[] strCCTos, string strBCCTos, string strSubject, string strBodyText, string strHost, object userState) {
            if ((this.SendMail03OperationCompleted == null)) {
                this.SendMail03OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMail03OperationCompleted);
            }
            this.InvokeAsync("SendMail03", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost}, this.SendMail03OperationCompleted, userState);
        }
        
        private void OnSendMail03OperationCompleted(object arg) {
            if ((this.SendMail03Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMail03Completed(this, new SendMail03CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail04", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail04(string strFromEmail, string strFromName, string strTos, string strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strHost) {
            object[] results = this.Invoke("SendMail04", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMail04Async(string strFromEmail, string strFromName, string strTos, string strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strHost) {
            this.SendMail04Async(strFromEmail, strFromName, strTos, strCCTos, strBCCTos, strSubject, strBodyText, strHost, null);
        }
        
        /// <remarks/>
        public void SendMail04Async(string strFromEmail, string strFromName, string strTos, string strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strHost, object userState) {
            if ((this.SendMail04OperationCompleted == null)) {
                this.SendMail04OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMail04OperationCompleted);
            }
            this.InvokeAsync("SendMail04", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost}, this.SendMail04OperationCompleted, userState);
        }
        
        private void OnSendMail04OperationCompleted(object arg) {
            if ((this.SendMail04Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMail04Completed(this, new SendMail04CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail05", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail05(string strFromEmail, string strFromName, string strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strHost) {
            object[] results = this.Invoke("SendMail05", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMail05Async(string strFromEmail, string strFromName, string strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strHost) {
            this.SendMail05Async(strFromEmail, strFromName, strTos, strCCTos, strBCCTos, strSubject, strBodyText, strHost, null);
        }
        
        /// <remarks/>
        public void SendMail05Async(string strFromEmail, string strFromName, string strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strHost, object userState) {
            if ((this.SendMail05OperationCompleted == null)) {
                this.SendMail05OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMail05OperationCompleted);
            }
            this.InvokeAsync("SendMail05", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost}, this.SendMail05OperationCompleted, userState);
        }
        
        private void OnSendMail05OperationCompleted(object arg) {
            if ((this.SendMail05Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMail05Completed(this, new SendMail05CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail06", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail06(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strHost) {
            object[] results = this.Invoke("SendMail06", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMail06Async(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strHost) {
            this.SendMail06Async(strFromEmail, strFromName, strTos, strCCTos, strBCCTos, strSubject, strBodyText, strHost, null);
        }
        
        /// <remarks/>
        public void SendMail06Async(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strHost, object userState) {
            if ((this.SendMail06OperationCompleted == null)) {
                this.SendMail06OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMail06OperationCompleted);
            }
            this.InvokeAsync("SendMail06", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost}, this.SendMail06OperationCompleted, userState);
        }
        
        private void OnSendMail06OperationCompleted(object arg) {
            if ((this.SendMail06Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMail06Completed(this, new SendMail06CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail07", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail07(string strFromEmail, string strFromName, string[] strTos, string strCCTos, string strBCCTos, string strSubject, string strBodyText, string strHost) {
            object[] results = this.Invoke("SendMail07", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMail07Async(string strFromEmail, string strFromName, string[] strTos, string strCCTos, string strBCCTos, string strSubject, string strBodyText, string strHost) {
            this.SendMail07Async(strFromEmail, strFromName, strTos, strCCTos, strBCCTos, strSubject, strBodyText, strHost, null);
        }
        
        /// <remarks/>
        public void SendMail07Async(string strFromEmail, string strFromName, string[] strTos, string strCCTos, string strBCCTos, string strSubject, string strBodyText, string strHost, object userState) {
            if ((this.SendMail07OperationCompleted == null)) {
                this.SendMail07OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMail07OperationCompleted);
            }
            this.InvokeAsync("SendMail07", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost}, this.SendMail07OperationCompleted, userState);
        }
        
        private void OnSendMail07OperationCompleted(object arg) {
            if ((this.SendMail07Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMail07Completed(this, new SendMail07CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail08", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail08(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string strBCCTos, string strSubject, string strBodyText, string strHost) {
            object[] results = this.Invoke("SendMail08", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMail08Async(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string strBCCTos, string strSubject, string strBodyText, string strHost) {
            this.SendMail08Async(strFromEmail, strFromName, strTos, strCCTos, strBCCTos, strSubject, strBodyText, strHost, null);
        }
        
        /// <remarks/>
        public void SendMail08Async(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string strBCCTos, string strSubject, string strBodyText, string strHost, object userState) {
            if ((this.SendMail08OperationCompleted == null)) {
                this.SendMail08OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMail08OperationCompleted);
            }
            this.InvokeAsync("SendMail08", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost}, this.SendMail08OperationCompleted, userState);
        }
        
        private void OnSendMail08OperationCompleted(object arg) {
            if ((this.SendMail08Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMail08Completed(this, new SendMail08CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail09", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail09(string strFromEmail, string strFromName, string[] strTos, string strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strHost) {
            object[] results = this.Invoke("SendMail09", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMail09Async(string strFromEmail, string strFromName, string[] strTos, string strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strHost) {
            this.SendMail09Async(strFromEmail, strFromName, strTos, strCCTos, strBCCTos, strSubject, strBodyText, strHost, null);
        }
        
        /// <remarks/>
        public void SendMail09Async(string strFromEmail, string strFromName, string[] strTos, string strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strHost, object userState) {
            if ((this.SendMail09OperationCompleted == null)) {
                this.SendMail09OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMail09OperationCompleted);
            }
            this.InvokeAsync("SendMail09", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strHost}, this.SendMail09OperationCompleted, userState);
        }
        
        private void OnSendMail09OperationCompleted(object arg) {
            if ((this.SendMail09Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMail09Completed(this, new SendMail09CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail10", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail10(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strBodyHTML, string strHost) {
            object[] results = this.Invoke("SendMail10", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strBodyHTML,
                        strHost});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMail10Async(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strBodyHTML, string strHost) {
            this.SendMail10Async(strFromEmail, strFromName, strTos, strCCTos, strBCCTos, strSubject, strBodyText, strBodyHTML, strHost, null);
        }
        
        /// <remarks/>
        public void SendMail10Async(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strBodyHTML, string strHost, object userState) {
            if ((this.SendMail10OperationCompleted == null)) {
                this.SendMail10OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMail10OperationCompleted);
            }
            this.InvokeAsync("SendMail10", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strBodyHTML,
                        strHost}, this.SendMail10OperationCompleted, userState);
        }
        
        private void OnSendMail10OperationCompleted(object arg) {
            if ((this.SendMail10Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMail10Completed(this, new SendMail10CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail11", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail11(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strBodyHTML, string strHost, int iPort) {
            object[] results = this.Invoke("SendMail11", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strBodyHTML,
                        strHost,
                        iPort});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMail11Async(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strBodyHTML, string strHost, int iPort) {
            this.SendMail11Async(strFromEmail, strFromName, strTos, strCCTos, strBCCTos, strSubject, strBodyText, strBodyHTML, strHost, iPort, null);
        }
        
        /// <remarks/>
        public void SendMail11Async(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strBodyHTML, string strHost, int iPort, object userState) {
            if ((this.SendMail11OperationCompleted == null)) {
                this.SendMail11OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMail11OperationCompleted);
            }
            this.InvokeAsync("SendMail11", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strBodyHTML,
                        strHost,
                        iPort}, this.SendMail11OperationCompleted, userState);
        }
        
        private void OnSendMail11OperationCompleted(object arg) {
            if ((this.SendMail11Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMail11Completed(this, new SendMail11CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail12", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail12(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strBodyHTML, string strHost, int iPort, string strUserName, string strUserPassword) {
            object[] results = this.Invoke("SendMail12", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strBodyHTML,
                        strHost,
                        iPort,
                        strUserName,
                        strUserPassword});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMail12Async(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strBodyHTML, string strHost, int iPort, string strUserName, string strUserPassword) {
            this.SendMail12Async(strFromEmail, strFromName, strTos, strCCTos, strBCCTos, strSubject, strBodyText, strBodyHTML, strHost, iPort, strUserName, strUserPassword, null);
        }
        
        /// <remarks/>
        public void SendMail12Async(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strBodyHTML, string strHost, int iPort, string strUserName, string strUserPassword, object userState) {
            if ((this.SendMail12OperationCompleted == null)) {
                this.SendMail12OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMail12OperationCompleted);
            }
            this.InvokeAsync("SendMail12", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strBodyHTML,
                        strHost,
                        iPort,
                        strUserName,
                        strUserPassword}, this.SendMail12OperationCompleted, userState);
        }
        
        private void OnSendMail12OperationCompleted(object arg) {
            if ((this.SendMail12Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMail12Completed(this, new SendMail12CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail13", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail13(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strBodyHTML, string strHost, int iPort, string strUserName, string strUserPassword, bool bUseSSL) {
            object[] results = this.Invoke("SendMail13", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strBodyHTML,
                        strHost,
                        iPort,
                        strUserName,
                        strUserPassword,
                        bUseSSL});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMail13Async(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strBodyHTML, string strHost, int iPort, string strUserName, string strUserPassword, bool bUseSSL) {
            this.SendMail13Async(strFromEmail, strFromName, strTos, strCCTos, strBCCTos, strSubject, strBodyText, strBodyHTML, strHost, iPort, strUserName, strUserPassword, bUseSSL, null);
        }
        
        /// <remarks/>
        public void SendMail13Async(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strBodyHTML, string strHost, int iPort, string strUserName, string strUserPassword, bool bUseSSL, object userState) {
            if ((this.SendMail13OperationCompleted == null)) {
                this.SendMail13OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMail13OperationCompleted);
            }
            this.InvokeAsync("SendMail13", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strBodyHTML,
                        strHost,
                        iPort,
                        strUserName,
                        strUserPassword,
                        bUseSSL}, this.SendMail13OperationCompleted, userState);
        }
        
        private void OnSendMail13OperationCompleted(object arg) {
            if ((this.SendMail13Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMail13Completed(this, new SendMail13CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail14", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail14(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strBodyHTML, string strHost, int iPort, string strUserName, string strUserPassword, bool bUseSSL, bool bUseMD5) {
            object[] results = this.Invoke("SendMail14", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strBodyHTML,
                        strHost,
                        iPort,
                        strUserName,
                        strUserPassword,
                        bUseSSL,
                        bUseMD5});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMail14Async(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strBodyHTML, string strHost, int iPort, string strUserName, string strUserPassword, bool bUseSSL, bool bUseMD5) {
            this.SendMail14Async(strFromEmail, strFromName, strTos, strCCTos, strBCCTos, strSubject, strBodyText, strBodyHTML, strHost, iPort, strUserName, strUserPassword, bUseSSL, bUseMD5, null);
        }
        
        /// <remarks/>
        public void SendMail14Async(string strFromEmail, string strFromName, string[] strTos, string[] strCCTos, string[] strBCCTos, string strSubject, string strBodyText, string strBodyHTML, string strHost, int iPort, string strUserName, string strUserPassword, bool bUseSSL, bool bUseMD5, object userState) {
            if ((this.SendMail14OperationCompleted == null)) {
                this.SendMail14OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMail14OperationCompleted);
            }
            this.InvokeAsync("SendMail14", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strBodyHTML,
                        strHost,
                        iPort,
                        strUserName,
                        strUserPassword,
                        bUseSSL,
                        bUseMD5}, this.SendMail14OperationCompleted, userState);
        }
        
        private void OnSendMail14OperationCompleted(object arg) {
            if ((this.SendMail14Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMail14Completed(this, new SendMail14CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail(
                    string strFromEmail, 
                    string strFromName, 
                    string[] strTos, 
                    string[] strCCTos, 
                    string[] strBCCTos, 
                    string strSubject, 
                    string strBodyText, 
                    string strBodyHTML, 
                    string strHost, 
                    int iPort, 
                    string strUserName, 
                    string strUserPassword, 
                    bool bUseSSL, 
                    bool bUseMD5, 
                    byte[][] baAttachment, 
                    string[] strFileName) {
            object[] results = this.Invoke("SendMail", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strBodyHTML,
                        strHost,
                        iPort,
                        strUserName,
                        strUserPassword,
                        bUseSSL,
                        bUseMD5,
                        baAttachment,
                        strFileName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailAsync(
                    string strFromEmail, 
                    string strFromName, 
                    string[] strTos, 
                    string[] strCCTos, 
                    string[] strBCCTos, 
                    string strSubject, 
                    string strBodyText, 
                    string strBodyHTML, 
                    string strHost, 
                    int iPort, 
                    string strUserName, 
                    string strUserPassword, 
                    bool bUseSSL, 
                    bool bUseMD5, 
                    byte[][] baAttachment, 
                    string[] strFileName) {
            this.SendMailAsync(strFromEmail, strFromName, strTos, strCCTos, strBCCTos, strSubject, strBodyText, strBodyHTML, strHost, iPort, strUserName, strUserPassword, bUseSSL, bUseMD5, baAttachment, strFileName, null);
        }
        
        /// <remarks/>
        public void SendMailAsync(
                    string strFromEmail, 
                    string strFromName, 
                    string[] strTos, 
                    string[] strCCTos, 
                    string[] strBCCTos, 
                    string strSubject, 
                    string strBodyText, 
                    string strBodyHTML, 
                    string strHost, 
                    int iPort, 
                    string strUserName, 
                    string strUserPassword, 
                    bool bUseSSL, 
                    bool bUseMD5, 
                    byte[][] baAttachment, 
                    string[] strFileName, 
                    object userState) {
            if ((this.SendMailOperationCompleted == null)) {
                this.SendMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailOperationCompleted);
            }
            this.InvokeAsync("SendMail", new object[] {
                        strFromEmail,
                        strFromName,
                        strTos,
                        strCCTos,
                        strBCCTos,
                        strSubject,
                        strBodyText,
                        strBodyHTML,
                        strHost,
                        iPort,
                        strUserName,
                        strUserPassword,
                        bUseSSL,
                        bUseMD5,
                        baAttachment,
                        strFileName}, this.SendMailOperationCompleted, userState);
        }
        
        private void OnSendMailOperationCompleted(object arg) {
            if ((this.SendMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailCompleted(this, new SendMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.832")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum SslProtocols {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        Ssl2 = 2,
        
        /// <remarks/>
        Ssl3 = 4,
        
        /// <remarks/>
        Tls = 8,
        
        /// <remarks/>
        Default = 16,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SetFromCompletedEventHandler(object sender, SetFromCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetFromCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetFromCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SetFromWithNameCompletedEventHandler(object sender, SetFromWithNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetFromWithNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetFromWithNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddToAddressCompletedEventHandler(object sender, AddToAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddToAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddToAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddToAddressWithNameCompletedEventHandler(object sender, AddToAddressWithNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddToAddressWithNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddToAddressWithNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddCCAddressCompletedEventHandler(object sender, AddCCAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCCAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCCAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddCCAddressWithNameCompletedEventHandler(object sender, AddCCAddressWithNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCCAddressWithNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCCAddressWithNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddBCCAddressCompletedEventHandler(object sender, AddBCCAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddBCCAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddBCCAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddBCCAddressWithNameCompletedEventHandler(object sender, AddBCCAddressWithNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddBCCAddressWithNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddBCCAddressWithNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SetPortCompletedEventHandler(object sender, SetPortCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetPortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetPortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddHostCompletedEventHandler(object sender, AddHostCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddHostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddHostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void AddHostWithPortCompletedEventHandler(object sender, AddHostWithPortCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddHostWithPortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddHostWithPortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SetUserCompletedEventHandler(object sender, SetUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SetSubjectCompletedEventHandler(object sender, SetSubjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSubjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSubjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SetstrBodyHTMLCompletedEventHandler(object sender, SetstrBodyHTMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetstrBodyHTMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetstrBodyHTMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SetBodyTextCompletedEventHandler(object sender, SetBodyTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBodyTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBodyTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendSessionedMailCompletedEventHandler(object sender, SendSessionedMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSessionedMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSessionedMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMail01CompletedEventHandler(object sender, SendMail01CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMail01CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMail01CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMail02CompletedEventHandler(object sender, SendMail02CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMail02CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMail02CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMail03CompletedEventHandler(object sender, SendMail03CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMail03CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMail03CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMail04CompletedEventHandler(object sender, SendMail04CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMail04CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMail04CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMail05CompletedEventHandler(object sender, SendMail05CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMail05CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMail05CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMail06CompletedEventHandler(object sender, SendMail06CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMail06CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMail06CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMail07CompletedEventHandler(object sender, SendMail07CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMail07CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMail07CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMail08CompletedEventHandler(object sender, SendMail08CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMail08CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMail08CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMail09CompletedEventHandler(object sender, SendMail09CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMail09CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMail09CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMail10CompletedEventHandler(object sender, SendMail10CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMail10CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMail10CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMail11CompletedEventHandler(object sender, SendMail11CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMail11CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMail11CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMail12CompletedEventHandler(object sender, SendMail12CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMail12CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMail12CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMail13CompletedEventHandler(object sender, SendMail13CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMail13CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMail13CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMail14CompletedEventHandler(object sender, SendMail14CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMail14CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMail14CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void SendMailCompletedEventHandler(object sender, SendMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591