<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ActiveUp.Net.Mail.Compact</name>
    </assembly>
    <members>
        <member name="T:ActiveUp.Net.Mail.Address">
            <summary>
            Represent an Internet Email address with the owner's fullname.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Address.#ctor">
            <summary>
            The default constructor. Set all properties to string.Empty.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Address.#ctor(System.String)">
            <summary>
            Creates the Address using the specified Internet email (RFC 2822 addr-spec).
            </summary>
            <param name="email">The email address to use.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Address.#ctor(System.String,System.String)">
            <summary>
            Creates the Address using the specified Internet email (RFC 2822 addr-spec) and fullname.
            </summary>
            <param name="email">The email address to use.</param>
            <param name="name">The owner's name.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Address.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.Address.Email">
            <summary>
            The Internet email address (RFC 2822 addr-spec).
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Address.Name">
            <summary>
            The Address owner's fullname.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Address.Merged">
            <summary>
            Gets a string compliant with RFC2822 address specification that represents the Address with the owner's fullname.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Address.Link">
            <summary>
             Gets an HTML formatted link to the address (mailto: form).
             </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.AddressCollection">
            <summary>
            A collection of Internet Email addresses.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.AddressCollection.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.AddressCollection.op_Addition(ActiveUp.Net.Mail.AddressCollection,ActiveUp.Net.Mail.AddressCollection)">
            <summary>
            Allows the developer to add a collection of Address objects in another one.
            </summary>
            <param name="first">The first collection.</param>
            <param name="second">The second collection.</param>
            <returns>The concatened collection.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.AddressCollection.Add(ActiveUp.Net.Mail.Address)">
            <summary>
            Add an Address object.
            </summary>
            <param name="address">The Address object</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.AddressCollection.Add(System.String)">
            <summary>
            Add an Address object using the specified Internet email (RFC 2822 addr-spec).
            </summary>
            <param name="email">The email</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.AddressCollection.Add(System.String,System.String)">
            <summary>
            Add an Address using the specified Internet email (RFC 2822 addr-spec) and fullname.
            </summary>
            <param name="email">The email</param>
            <param name="name">The name</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.AddressCollection.Remove(System.Int32)">
            <summary>
            Remove the Address at the specified index position.
            </summary>
            <param name="index">The index position.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.AddressCollection.Merged">
            <summary>
            Returns a string reprensentation of the Addresses.
            </summary>
            <returns>The addresses separated with commas, in format compliant with RFC2822's address specification.</returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.AddressCollection.Links">
            <summary>
            Returns a string reprensentation of the Addresses as HTML formatted links, separated by semicolons.
            </summary>
            <returns>The addresses as HTML formatted links, separated by semicolons.</returns>
        </member>
        <member name="T:ActiveUp.Net.Mail.Attachment">
            <summary>
            Reprensents a file attachment (a MimePart with an attachment Content-Disposition).
            Attachments are displayed only upon request of the receiving user, while EmbeddedObjects are displayed upon display of the message's content.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MimePart">
            <summary>
            The base class used by the Attachment and EmbeddedObject classes.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.MimePart.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a MimePart object with the content of the file located at the given path.
            </summary>
            <param name="path">File containing the content of the MimePart.</param>
            <param name="generateContentId">If true, a Content-ID Header field will be added to allow referencing of this part in the message.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.MimePart.#ctor(System.String,System.String)">
            <summary>
            Creates a MimePart object with the content of the file located at the given path.
            </summary>
            <param name="path">File containing the content of the MimePart.</param>
            <param name="contentId">The Content-ID Header field will be used for the part.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.MimePart.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a MimePart object with the content of the file located at the given path.
            </summary>
            <param name="path">File containing the content of the MimePart.</param>
            <param name="contentId">The Content-ID Header field will be used for the part.</param>
            <param name="charset">If the file contains text, the charset of the text can be provided to ensure better handling.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.MimePart.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a MimePart object with the content of the file located at the given path.
            </summary>
            <param name="path">File containing the content of the MimePart.</param>
            <param name="generateContentId">If true, a Content-ID Header field will be added to allow referencing of this part in the message.</param>
            <param name="charset">If the file contains text, the charset of the text can be provided to ensure better handling.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.MimePart.SetContentId">
            <summary>
            Generates a new Content-ID for the part.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.MimePart.SetContentId(System.String)">
            <summary>
            Set a new Content-ID for the part.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.MimePart.StoreToFile(System.String)">
            <summary>
            Stores the part's BinaryContent to the specified path.
            </summary>
            <param name="destinationPath">The path the part has to be saved at.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.MimePart.ToMimeString">
            <summary>
            The MIME string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.MimePart.AddHeaderField(System.String,System.String)">
            <summary>
            Adds the header field.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.HeaderFieldNames">
            <summary>
            All Header fields names.
            Key is the Header name in lower case and value is the Header name as it was it the original message.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.HeaderFields">
            <summary>
            All Header fields.
            Key is the Header name in lower case and value is the Header value.
            </summary>
            <example>
            //This exposes the mail client used to send the message.
            message.HeaderFields["x-mailer"]
            </example>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.ContentName">
            <summary>
            The ContentName.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.ContentId">
            <summary>
            The ContentId.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.ContentDescription">
            <summary>
            The Content-Description.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.TextContent">
            <summary>
            The text content of a MIME Part.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.TextContentTransferEncoded">
            <summary>
            The text content of a MIME Part.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.Container">
            <summary>
            The multipart typed part containing this part.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.OriginalContent">
            <summary>
            The original content of a parsed MIME Part.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.ContentType">
            <summary>
            The Content-Type of the MimePart.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.Charset">
            <summary>
            The Charset of the MimePart.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.ContentDisposition">
            <summary>
            The Content-Disposition of the MimePart.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.ContentTransferEncoding">
            <summary>
            The Content-Transfer-Encoding of the MimePart.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.BinaryContent">
            <summary>
            The binary data of the part.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.ContentLocation">
            <summary>
            The Content-Location.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.Size">
            <summary>
            Approximate size of the file in octets.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePart.Filename">
            <summary>
            Gets the filename.
            </summary>
            <value>The filename.</value>
        </member>
        <member name="M:ActiveUp.Net.Mail.Attachment.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.AttachmentCollection">
            <summary>
            Represents a collection of Attachment objects.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MimePartCollection">
            <summary>
            Represents a collection of MimePart objects.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.MimePartCollection.Add(ActiveUp.Net.Mail.MimePart)">
            <summary>
            Adds the MimePart object to the collection.
            </summary>
            <param name="part">The MimePart to be added.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.MimePartCollection.op_Addition(ActiveUp.Net.Mail.MimePartCollection,ActiveUp.Net.Mail.MimePartCollection)">
            <summary>
            Allows the developer to add a collection of MimePart objects in another one.
            </summary>
            <param name="first">The first collection.</param>
            <param name="second">The second collection.</param>
            <returns>The concatened collection.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.MimePartCollection.Contains(System.String)">
            <summary>
            Check if the collection contain the specified filename.
            </summary>
            <param name="filename">The filename</param>
            <returns>True if the collection contains the file; False otherwise.</returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePartCollection.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimePartCollection.Item(System.String)">
            <summary>
            Indexer. Returns the first object containing the specified filename.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.AttachmentCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.AttachmentCollection.Add(ActiveUp.Net.Mail.MimePart)">
            <summary>
            Add a MimePart to the attachment collection.
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:ActiveUp.Net.Mail.AttachmentCollection.Add(System.String,System.Boolean)">
            <summary>
            Generate and add a MimePart to the attachment collection, using the specified file.
            </summary>
            <param name="path">The file containing the MimePart's content.</param>
            <param name="generateContentId">If true, a Content-ID Header field will be generated for the part.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.AttachmentCollection.Add(System.String,System.Boolean,System.String)">
            <summary>
            Generate and add a MimePart to the attachment collection, using the specified file.
            </summary>
            <param name="path">The file containing the MimePart's content.</param>
            <param name="generateContentId">If true, a Content-ID Header field will be generated for the part.</param>
            <param name="charset">The charset of the text contained in the file.</param>
            <remarks>This method is to be used with text files to ensure data integrity using the correct charset.</remarks>
        </member>
        <member name="M:ActiveUp.Net.Mail.AttachmentCollection.Add(System.Byte[],System.String)">
            <summary>
            Adds the specified attachment.
            </summary>
            <param name="attachment">The attachment.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.AttachmentCollection.StoreToFolder(System.String)">
            <summary>
            Stores all the attachments to a folder.
            </summary>
            <param name="path">The destination folder.</param>
        </member>
        <member name="T:ActiveUp.Net.Mail.BodyFormat">
            <summary>
            Available message body formats.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.BodyFormat.Text">
            <summary>
            A plain text message body.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.BodyFormat.Html">
            <summary>
            A HTML based message body.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.BodyTemplate">
            <summary>
            A message body template.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.BodyTemplate.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.BodyTemplate.#ctor(System.String)">
            <summary>
            Creates the body template based on the specified content. The default format is Text.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.BodyTemplate.#ctor(System.String,ActiveUp.Net.Mail.BodyFormat)">
            <summary>
            Creates the body template based on the specified content and format.
            </summary>
            <param name="content">The content.</param>
            <param name="format">The format to use.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.BodyTemplate.DataSource">
            <summary>
            Get or set the main data source of the body template.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.BodyTemplate.Format">
            <summary>
            Gets or sets the message body format.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.BodyTemplate.Content">
            <summary>
            Gets or sets the message body content.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.BodyTemplateCollection">
            <summary>
            A collection of templated bodies.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.BodyTemplateCollection.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.BodyTemplateCollection.Add(ActiveUp.Net.Mail.BodyTemplate)">
            <summary>
            Add a templated body in the collection.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.BodyTemplateCollection.Add(System.String)">
            <summary>
            Add a templated body in the collection based on the specified content.
            </summary>
            <param name="content">The content to use.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.BodyTemplateCollection.Add(System.String,ActiveUp.Net.Mail.BodyFormat)">
            <summary>
            Add a templated body in the collection based on the specified content and body format.
            </summary>
            <param name="content">The content to use.</param>
            <param name="format">The message body format.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.BodyTemplateCollection.Remove(System.Int32)">
            <summary>
            Remove the body template at the specified index position.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:ActiveUp.Net.Mail.BodyTemplateCollection.Item(System.Int32)">
            <summary>
            Returns the body template at the specified index position.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.BounceResult">
            <summary>
            Represent a mail bounce status. Contains all the information needed to determine if the email is a mail server error bounce.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.BounceResult.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.BounceResult.#ctor(System.Int32,System.String)">
            <summary>
            Create the object with specified default value.
            </summary>
            <param name="level">The level</param>
            <param name="email">The email</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.BounceResult.Level">
            <summary>
            The level of revelance. <b>0</b> mean probably not a bounce. <b>1</b> mean this email is suspicious. 
            <b>2</b> mean this is a potential bounce email. <b>3</b> mean we are quite sure that is a bounce email.
            </summary>
            <remarks>If the Level is <b>3</b>, the erroneous email (if available) is contained in the <see cref="P:ActiveUp.Net.Mail.BounceResult.Email"/> property.</remarks>
        </member>
        <member name="P:ActiveUp.Net.Mail.BounceResult.Email">
            <summary>
            Contains the erroneous email if the revelance level is 3.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Codec">
            <summary>
            Contains several static methods providing encoding/decoding in various formats.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Codec.ToQuotedPrintable(System.String,System.String)">
            <summary>
            Encodes the text in quoted-printable format conforming to the RFC 2045 and RFC 2046.
            </summary>
            <param name="fromCharset">The charset of input.</param>
            <param name="input">Data to be encoded.</param>
            <remarks>The lines are wrapped to a length of max 78 characters to ensure data integrity across some gateways.</remarks>
            <returns>The input encoded as 7bit quoted-printable data, in the form of max 78 characters lines.</returns>
            <example>
            The example below illustrates the encoding of a string in quoted-printable.
            <code>
            C#
            
            string input = "ActiveMail rocks ! Here are some non-ASCII characters =ç.";
            string output = Codec.ToQuotedPrintable(input,"iso-8859-1");
            </code>
            output returns A= ctiveMail rocks ! Here are some weird characters =3D=E7.
            
            Non ASCII characters have been encoded (=3D represents = and =E7 represents ç).
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Codec.RFC2047Encode(System.String,System.String)">
            <summary>
            Encodes the given string in a format (specified in RFC 2047) that can be used in RFC 2822 headers to represent non-ASCII textual data.
            </summary>
            <param name="input">The string to be encoded (the Header field's value).</param>
            <param name="charset">The charset of the Header field's value.</param>
            <returns>The encoded string with only 7bit characters.</returns>
            <remarks>ActiveMail only encodes in this format using Base64, but the RFC2047Decode method also decodes string encoded in this format with quoted-printable.</remarks>
            <example>
            The example below illustrates the encoding of a string.
            <code>
            C#
            
            string input = "ActiveMail rocks ! Here are some non-ASCII characters =ç.";
            string output = Codec.RFC2047Encode(input,"iso-8859-1");
            </code>
            
            output returns =?iso-8859-1?B?QWN0aXZlTWFpbCByb2NrcyAhIEhlcmUgYXJlIHNvbWUgd2VpcmQgY2hhcmFjdGVycyA95y4=?=
            
            This value can be used as for example the subject of a message.
            If you suspect the text to contain non ASCII characters, do message.Subject = Codec.RFC2047Encode(yourRawValue);.
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Codec.RFC2047Decode(System.String)">
            <summary>
            Decodes the given string from the format specified in RFC 2047 (=?charset?value?=).
            </summary>
            <param name="input">The string to be decoded.</param>
            <returns>The decoded string.</returns>
            <example>
            The example below illustrates the decoding of a string.
            <code>
            C#
            
            string input = "I once wrote that =?iso-8859-1?B?QWN0aXZlTWFpbCByb2NrcyAhIEhlcmUgYXJlIHNvbWUgd2VpcmQgY2hhcmFjdGVycyA95y4=?=";
            string output = Codec.RFC2047Decode(input);
            </code>
            
            output returns I once wrote that ActiveMail rocks ! Here are some weird characters =ç.
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Codec.FromQuotedPrintable(System.String,System.String)">
            <summary>
            Decodes text from quoted-printable format defined in RFC 2045 and RFC 2046.
            </summary>
            <param name="toCharset">The original charset of input.</param>
            <param name="input">Data to be decoded.</param>
            <returns>The decoded data.</returns>
            <example>
            The example below illustrates the decoding of a string from quoted-printable.
            <code>
            C#
            
            string input = "A=\r\nctiveMail rocks ! Here are some weird characters =3D=E7.";
            string output = Codec.FromQuotedPrintable(input,"iso-8859-1");
            </code>
            
            output returns ActiveMail rocks ! Here are some weird characters =ç.
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Codec.Wrap(System.String,System.Int32)">
            <summary>
            Wraps the given string to a set of lines of a maximum given length.
            </summary>
            <param name="input">Data to be wrapped.</param>
            <param name="totalchars">The maximum length for each line.</param>
            <returns>The data as a set of lines of a maximum length.</returns>
            <remarks>This can be used to wrap lines to a maximum length of 78 characters to ensure data integrity across some gateways.</remarks>
        </member>
        <member name="T:ActiveUp.Net.Mail.Condition">
            <summary>
            Represents the formatting options of a message template field.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Condition.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Condition.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates the condition based on it's region id, field equal to value set with case-sensitive on.
            </summary>
            <param name="regionid">The ID of the region.</param>
            <param name="field">The name of the field.</param>
            <param name="aValue">The value to match.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Condition.#ctor(System.String,System.String,System.String,ActiveUp.Net.Mail.OperatorType,System.Boolean)">
            <summary>
            Creates the condition based on it's region id, field, operator to evaluate to the value and whether it is case sensitive.
            </summary>
            <param name="regionid">The ID of the region.</param>
            <param name="field">The name of the field.</param>
            <param name="aValue">The value to match.</param>
            <param name="aOperator">The operator for the comparison.</param>
            <param name="casesensitive">Whether the value is matched with case sensitivity.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Condition.Validate(System.Object)">
            <summary>
            Validate the condition against the values passed.
            </summary>
            <param name="aValue">The value to match.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Condition.IsNumeric(System.String)">
            <summary>
            Determines whether the specified s is numeric.
            </summary>
            <param name="s">The s.</param>
            <returns>
            	<c>true</c> if the specified s is numeric; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.Condition.CaseSensitive">
            <summary>
            Whether the value is matched with case sensitivity.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Condition.Match">
            <summary>
            Whether the condition was a match.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Condition.Value">
            <summary>
            The value to match.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Condition.Operator">
            <summary>
            The operator for the comparison.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Condition.RegionID">
            <summary>
            The ID of the region.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Condition.Field">
            <summary>
            The name of the field.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.ConditionalCollection">
            <summary>
            A collection of field format options.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.ConditionalCollection.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.ConditionalCollection.Add(ActiveUp.Net.Mail.Condition)">
            <summary>
            Add an Condition object in the collection.
            </summary>
            <param name="condition">The Condition.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.ConditionalCollection.Add(System.String,System.String,System.String)">
            <summary>
            Add an Condition object in the collection based the region id, field, and value.
            </summary>
            <param name="regionid">The name of the field.</param>
            <param name="field">The name of the field.</param>
            <param name="aValue">The value to match.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.ConditionalCollection.Add(System.String,System.String,System.String,ActiveUp.Net.Mail.OperatorType,System.Boolean)">
            <summary>
            Add an Condition object based on it's region id, field, operator to evaluate to the value and whether it is case sensitive.
            </summary>
            <param name="regionid">The ID of the region.</param>
            <param name="field">The name of the field.</param>
            <param name="aValue">The value to match.</param>
            <param name="aOperator">The operator for the comparison.</param>
            <param name="casesensitive">Whether the value is matched with case sensitivity.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.ConditionalCollection.Remove(System.Int32)">
            <summary>
            Remove the Condition object from the collection at the specified index position.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ActiveUp.Net.Mail.ConditionalCollection.Contains(System.String)">
            <summary>
            Determines whether the specified field is in the list.
            </summary>
            <param name="field">The name of the field.</param>
            <returns>true if the collection contain the specified field; false otherwise.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.ConditionalCollection.ContainsRegion(System.String)">
            <summary>
            Determines whether the specified region is in the list.
            </summary>
            <param name="regionID">The id of the region.</param>
            <returns>true if the collection contain the specified field; false otherwise.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.ConditionalCollection.RemoveRegion(System.String)">
            <summary>
            Returns whether the specified region is a match.
            </summary>
            <param name="regionID">The id of the region.</param>
            <returns>true if the collection contain the specified field; false otherwise.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.ConditionalCollection.ClearMatch">
            <summary>
            Validate the condition against the values passed.
            </summary>
            <param name="field">The field to match.</param>
            <param name="aValue">The value to match.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.ConditionalCollection.Validate(System.String,System.Object)">
            <summary>
            Validate the condition against the values passed.
            </summary>
            <param name="field">The field to match.</param>
            <param name="aValue">The value to match.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.ConditionalCollection.GetColumns(System.Object)">
            <summary>
            Get the columns for the specified data source.
            </summary>
            <param name="dataSource">The data source.</param>
            <returns>The columns.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.ConditionalCollection.GetEnumerator(System.Object)">
            <summary>
            Get the enumerator from the specified data source.
            </summary>
            <param name="dataSource">The data source.</param>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.ConditionalCollection.Item(System.Int32)">
            <summary>
            Returns the Condition object at the specified index position in the collection.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.ConditionalCollection.Item(System.String)">
            <summary>
            Returns the Condition of the specified field.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.ContentDisposition.Inline">
            <summary>
            A bodypart should have an Inline ContentDisposition if it is intended to be displayed automatically upon display of the message.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.ContentDisposition.Attachment">
            <summary>
            Bodyparts can have Attachment ContentDisposition to indicate that they are separate from the main body of the mail message, and that their display should not be automatic, but contingent upon some further action of the user.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.ContentDisposition.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.ContentDisposition.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:ActiveUp.Net.Mail.ContentDisposition.Disposition">
            <summary>
            Gets or sets the disposition.
            </summary>
            <value>The disposition.</value>
        </member>
        <member name="T:ActiveUp.Net.Mail.ContentTransferEncoding">
            <summary>
            Available transfer encodings.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.ContentTransferEncoding.None">
            <summary>
            Do not encode.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.ContentTransferEncoding.Unknown">
            <summary>
            Unknown encoding.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.ContentTransferEncoding.Base64">
            <summary>
            Base64 encoding defined in RFC2045.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.ContentTransferEncoding.QuotedPrintable">
            <summary>
            Quoted-Printable encoding defined in RFC2045.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.ContentTransferEncoding.SevenBits">
            <summary>
            7Bit encoding.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.ContentTransferEncoding.EightBits">
            <summary>
            8Bit encoding.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.ContentTransferEncoding.Binary">
            <summary>
            Binary encoding.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Crypto">
            <summary>
            Contains several static methods providing cryptographic digesting and transformations.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Crypto.MD5Digest(System.String)">
            <summary>
            Digests the given string using the MD5 algorithm.
            </summary>
            <param name="data">The data to be digested.</param>
            <remarks>This method is used for APOP authentication.</remarks>
            <returns>A 16 bytes digest representing the data.</returns>
            <example>
            The example below illustrates the use of this method.
            
            <code>
            C#
            
            string data = "ActiveMail rocks ! Let's see how this string is digested...";
            string digest = Crypto.MD5Digest(data);
            </code>
            
            digest returns 3ff3501885f8602c4d8bf7edcd2ceca1
            
            Digesting is used to check data equivalence.
            Different data result in different digests.
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Crypto.HMACMD5Digest(System.String,System.String)">
            <summary>
            Applies the HMAC-MD5 keyed algorithm to the given string using the given key.
            </summary>
            <param name="key">The key to be used.</param>
            <param name="data">The data to be digested.</param>
            <remarks>This method is used for CRAM-MD5 authentication.</remarks>
            <returns>The transformed data as a 16 bytes digest.</returns>
            <example>
            The example below illustrates the use of this method.
            
            <code>
            C#
            
            string key = "key";
            string data = "ActiveMail rocks ! Let's see how this string is digested...";
            string digest = Crypto.HMACMD5Digest(key,data);
            </code>
            
            digest returns 5db4f178a3ff817a9bc1092a2bcdda24
            
            Digesting is used to check data equivalence.
            Different data result in different digests.
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.CtchClient.QueryServer(System.String,System.Int32,System.String)">
            <summary>
            Queries the server.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <param name="messageFilename">The message filename.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.CtchClient.QueryServer(System.String,System.Int32,ActiveUp.Net.Mail.Message)">
            <summary>
            Queries the server.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.CtchClient.QueryServer(System.String,System.Int32,ActiveUp.Net.Mail.Message,System.String)">
            <summary>
            Queries the server.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <param name="message">The message.</param>
            <param name="filename">The filename.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.CtchResponse.ReadHeaderName(System.String)">
            <summary>
            Reads the name of the header.
            </summary>
            <param name="header">The header.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.CtchResponse.ReadHeaderValue(System.String)">
            <summary>
            Reads the header value.
            </summary>
            <param name="header">The header.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.CtchResponse.ParseFromString(System.String)">
            <summary>
            Parses from string.
            </summary>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.CtchResponse.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.CtchResponse.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:ActiveUp.Net.Mail.CtchResponse.SpamClassification">
            <summary>
            Gets or sets the spam classification.
            </summary>
            <value>The spam classification.</value>
        </member>
        <member name="P:ActiveUp.Net.Mail.CtchResponse.VodClassification">
            <summary>
            Gets or sets the vod classification.
            </summary>
            <value>The vod classification.</value>
        </member>
        <member name="P:ActiveUp.Net.Mail.CtchResponse.CtchFlag">
            <summary>
            Gets or sets the CTCH flag.
            </summary>
            <value>The CTCH flag.</value>
        </member>
        <member name="P:ActiveUp.Net.Mail.CtchResponse.RefID">
            <summary>
            Gets or sets the ref ID.
            </summary>
            <value>The ref ID.</value>
        </member>
        <member name="P:ActiveUp.Net.Mail.CtchResponse.Headers">
            <summary>
            Gets or sets the headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="P:ActiveUp.Net.Mail.CtchResponse.FullResponse">
            <summary>
            Gets or sets the full response.
            </summary>
            <value>The full response.</value>
        </member>
        <member name="M:ActiveUp.Net.Security.Signature.GetContentLength(System.Byte[],System.Int32@)">
            <summary>
            This method extracts the DER encoded length of a content tag in the 
            byte array.
            This method assumes that the specified lengthStartIndex is located
            at the first length byte.
            When this method returns, the lengthStartIndex will have been modified to point
            to the first byte of the actual content that follows the length byte(s).
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Security.Signature.CopyContent(System.Byte[],System.Int32@,System.Byte[]@)">
            <summary>
            This method copies the content bytes of the current content node specified
            by the startIndex value.
            This method assumes that startIndex is located at the first byte of the length
            byte(s).
            This method assumes that the content is an DER encoded Integer value.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.EmbeddedObjectCollection">
            <summary>
            Represents a collection of EmbeddedObject objects.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.EmbeddedObjectCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.EmbeddedObjectCollection.Add(ActiveUp.Net.Mail.MimePart)">
            <summary>
            Add a MimePart to the embedded objects collection.
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:ActiveUp.Net.Mail.EmbeddedObjectCollection.Add(System.String,System.Boolean)">
            <summary>
            Generate and add a MimePart to the embedded objects collection, using the specified file.
            </summary>
            <param name="path">The file containing the MimePart's content.</param>
            <param name="generateContentId">If true, a Content-ID Header field will be generated for the part.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.EmbeddedObjectCollection.Add(System.String,System.String)">
            <summary>
            Generate and add a MimePart to the embedded objects collection, using the specified file.
            </summary>
            <param name="path">The file containing the MimePart's content.</param>
            <param name="contentId">The Content-ID Header field will be used for the part.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.EmbeddedObjectCollection.Add(System.String,System.String,System.String)">
            <summary>
            Generate and add a MimePart to the embedded objects collection, using the specified file.
            </summary>
            <param name="path">The file containing the MimePart's content.</param>
            <param name="contentId">The Content-ID Header field will be used for the part.</param>
            <param name="charset">The charset of the text contained in the file.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.EmbeddedObjectCollection.Add(System.String,System.Boolean,System.String)">
            <summary>
            Generate and add a MimePart to the embedded objects collection, using the specified file.
            </summary>
            <param name="path">The file containing the MimePart's content.</param>
            <param name="generateContentId">If true, a Content-ID Header field will be generated for the part.</param>
            <param name="charset">The charset of the text contained in the file.</param>
            <remarks>This method is to be used with text files to ensure data integrity using the correct charset.</remarks>
        </member>
        <member name="T:ActiveUp.Net.Mail.AuthenticatingEventHandler">
            <summary>
            EventHandler to be used with the Authenticating event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.AuthenticatedEventHandler">
            <summary>
            EventHandler to be used with the Authenticated event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.NoopingEventHandler">
            <summary>
            EventHandler to be used with the Nooping event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.NoopedEventHandler">
            <summary>
            EventHandler to be used with the Nooped event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.TcpWritingEventHandler">
            <summary>
            EventHandler to be used with the TcpWriting event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.TcpWrittenEventHandler">
            <summary>
            EventHandler to be used with the TcpWritten event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.TcpReadingEventHandler">
            <summary>
            EventHandler to be used with the TcpReading event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.TcpReadEventHandler">
            <summary>
            EventHandler to be used with the TcpRead event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MessageRetrievingEventHandler">
            <summary>
            EventHandler to be used with the MessageRetrieving event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MessageRetrievedEventHandler">
            <summary>
            EventHandler to be used with the MessageRetrieved event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.HeaderRetrievingEventHandler">
            <summary>
            EventHandler to be used with the HeaderRetrieving event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.HeaderRetrievedEventHandler">
            <summary>
            EventHandler to be used with the HeaderRetrieved event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.DisconnectingEventHandler">
            <summary>
            EventHandler to be used with the Disconnecting event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.DisconnectedEventHandler">
            <summary>
            EventHandler to be used with the Disconnected event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.ConnectingEventHandler">
            <summary>
            EventHandler to be used with the Connecting event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.ConnectedEventHandler">
            <summary>
            EventHandler to be used with the Connected event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MessageSendingEventHandler">
            <summary>
            EventHandler to be used with the MessageSending event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MessageSentEventHandler">
            <summary>
            EventHandler to be used with the MessageSent event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.NewMessageReceivedEventHandler">
            <summary>
            EventHandler to be used with the NewMessage event.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.DisconnectedEventArgs">
            <summary>
            EventArgs used by the Disconnected event.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.DisconnectedEventArgs.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="serverresponse">The remote server's response.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.DisconnectedEventArgs.ServerResponse">
            <summary>
            The remote server's response.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.ConnectedEventArgs">
            <summary>
            EventArgs used by the Connected event.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.ConnectedEventArgs.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="serverresponse">The remote server's response.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.ConnectedEventArgs.ServerResponse">
            <summary>
            The remote server's response.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MessageRetrievedEventArgs">
            <summary>
            EventArgs used by the MessageRetrieved event.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.MessageRetrievedEventArgs.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="data">The retrieved message as a byte array.</param>
            <param name="index">The index of the message that has been retrieved.</param>
            <param name="totalCount">The total amount of messages on the remote server (POP3 only).</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.MessageRetrievedEventArgs.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="data">The retrieved message as a byte array.</param>
            <param name="index">The index of the message that has been retrieved.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.MessageRetrievedEventArgs.Message">
            <summary>
            The retrieved message as a Message object.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MessageRetrievedEventArgs.MessageIndex">
            <summary>
            The retrieved message's index on the remote server.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MessageRetrievedEventArgs.TotalCount">
            <summary>
            The total amount of messages on the remote server (POP3 only).
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MessageRetrievingEventArgs">
            <summary>
            EventArgs used by the MessageRetrieving event.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.MessageRetrievingEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="index">The message to be retrieved's index.</param>
            <param name="totalCount">The total amount of messages on the remote server.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.MessageRetrievingEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="index">The message to be retrieved's index.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.MessageRetrievingEventArgs.MessageIndex">
            <summary>
            The index of the message to be retrieved on the remote server.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MessageRetrievingEventArgs.TotalCount">
            <summary>
            The total amount of messages on the remote server (POP3 only).
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.HeaderRetrievedEventArgs">
            <summary>
            EventArgs used by the HeaderRetrieved event.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.HeaderRetrievedEventArgs.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Event
            </summary>
            <param name="data">The retrieved Header as a byte array.</param>
            <param name="index">The index of the Header retrieved.</param>
            <param name="totalCount">The total amount of messages on the remote server (POP3 only).</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.HeaderRetrievedEventArgs.#ctor(System.Byte[],System.Int32)">
            <summary>
            Event
            </summary>
            <param name="data">The retrieved Header as a byte array.</param>
            <param name="index">The index of the retrieved header.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.HeaderRetrievedEventArgs.Header">
            <summary>
            The Header retrieved from the remote server.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.HeaderRetrievedEventArgs.MessageIndex">
            <summary>
            The index of the message Header retrieved on the remote server.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.HeaderRetrievedEventArgs.TotalCount">
            <summary>
            The total amount of messages on the remote server (POP3 only).
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.HeaderRetrievingEventArgs">
            <summary>
            EventArgs used by the HeaderRetrieving event.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.HeaderRetrievingEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.HeaderRetrievingEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.HeaderRetrievingEventArgs.MessageIndex">
            <summary>
            The index of the message Header to be retrieved on the remote server.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.HeaderRetrievingEventArgs.TotalCount">
            <summary>
            The total amount of messages on the remote server (POP3 only).
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.TcpWrittenEventArgs">
            <summary>
            EventArgs used by the TcpWritten event.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.TcpWrittenEventArgs.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="data">Data sent to the server.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.TcpWrittenEventArgs.Command">
            <summary>
            Data sent to the server.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.TcpWritingEventArgs">
            <summary>
            EventArgs used by the TcpWriting event.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.TcpWritingEventArgs.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="data">Data sent to the server.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.TcpWritingEventArgs.Command">
            <summary>
            Data sent to the server.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.TcpReadEventArgs">
            <summary>
            EventArgs used by the TcpRead event.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.TcpReadEventArgs.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="data">Data received from the server.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.TcpReadEventArgs.Response">
            <summary>
            The server's response.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.AuthenticatedEventArgs">
            <summary>
            Represents an authentication process.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.AuthenticatedEventArgs.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="username">Username used to authenticate the user.</param>
            <param name="password">Password used to authenticate the user.</param>
            <param name="host">Address of the remote server.</param>
            <param name="serverResponse">The server response to the PASS command.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.AuthenticatedEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="username">Username used to authenticate the user.</param>
            <param name="password">Password used to authenticate the user.</param>
            <param name="serverResponse">The server response to the PASS command.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.AuthenticatedEventArgs.Username">
            <summary>
            The username used to authenticate the user.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.AuthenticatedEventArgs.Password">
            <summary>
            The password used to authenticate the user.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.AuthenticatedEventArgs.Host">
            <summary>
            The address of the remote server.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.AuthenticatedEventArgs.ServerResponse">
            <summary>
            The server's response
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.AuthenticatingEventArgs">
            <summary>
            Represents a future authentication process.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.AuthenticatingEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="username">Username used to authenticate the user.</param>
            <param name="password">Password used to authenticate the user.</param>
            <param name="host">Address of the remote server.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.AuthenticatingEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="username">Username used to authenticate the user.</param>
            <param name="password">Password used to authenticate the user.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.AuthenticatingEventArgs.Username">
            <summary>
            The username used to authenticate the user.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.AuthenticatingEventArgs.Password">
            <summary>
            The password used to authenticate the user.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.AuthenticatingEventArgs.Host">
            <summary>
            The address of the remote server.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MessageSendingEventArgs">
            <summary>
            EventArgs used by the MessageSending event.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.MessageSendingEventArgs.#ctor(ActiveUp.Net.Mail.Message)">
            <summary>
            Event fired when a message is going to be sent.
            </summary>
            <param name="index">The message to be sent.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.MessageSendingEventArgs.Message">
            <summary>
            The message to be sent.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MessageSentEventArgs">
            <summary>
            EventArgs used by the MessageSent event.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.MessageSentEventArgs.#ctor(ActiveUp.Net.Mail.Message)">
            <summary>
            Event fired when a message has been sent.
            </summary>
            <param name="message">The message that has been sent.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.MessageSentEventArgs.Message">
            <summary>
            The message that has been sent.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.NewMessageReceivedEventArgs">
            <summary>
            EventArgs used by the NewMessage event.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewMessageReceivedEventArgs.#ctor(System.Int32)">
            <summary>
            Event fired when a new message received.
            </summary>
            <param name="messageCount">The number of new messages received.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.NewMessageReceivedEventArgs.MessageCount">
            <summary>
            The number of new messages received.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Fetch">
            <summary>
            Allows to fetch (retrieve) partial or complete messages, as well as specific message informations.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.Body(System.Int32)">
            <summary>
            Returns a non-extensible form of the BodyStructure() method.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <returns>The server's response containing a parenthesized list.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectMailbox("inbox");
            string body = inbox.Fetch.Body(1);
            inbox.Close();
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectMailbox("inbox")
            Dim body As String = inbox.Fetch.Body(1);
            inbox.Close()
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectMailbox("inbox");
            var body:string = inbox.Fetch.Body(1);
            inbox.Close();
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.BodySection(System.Int32,System.Int32)">
            <summary>
            Fetches a specific section of the message's body.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="section">The section (part number) to be fetched.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectMailbox("inbox");
            string body = inbox.Fetch.BodySection(1,3);
            inbox.Close();
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectMailbox("inbox")
            Dim body As String = inbox.Fetch.Body(1,3);
            inbox.Close()
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectMailbox("inbox");
            var body:string = inbox.Fetch.Body(1,3);
            inbox.Close();
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.BodyStructure(System.Int32)">
            <summary>
            Fetches the message's body structure.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <returns>The server's response containing a parenthesized list</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectMailbox("inbox");
            string body = inbox.Fetch.BodyStructure(1);
            inbox.Close();
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectMailbox("inbox")
            Dim body As String = inbox.Fetch.BodyStructure(1);
            inbox.Close()
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectMailbox("inbox");
            var body:string = inbox.Fetch.BodyStructure(1);
            inbox.Close();
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.InternalDate(System.Int32)">
            <summary>
            Fetches the message's internal date.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <returns>The message's internal date.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectMailbox("inbox");
            string internalDate = inbox.Fetch.InternalDate(1);
            inbox.Close();
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectMailbox("inbox")
            Dim internalDate As String = inbox.Fetch.InternalDate(1);
            inbox.Close()
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectMailbox("inbox");
            var internalDate:string = inbox.Fetch.InternalDate(1);
            inbox.Close();
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.Flags(System.Int32)">
            <summary>
            Fetches the message's flags.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message info to be fetched.</param>
            <returns>A collection of flags.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectMailbox("inbox");
            FlagCollection flags = inbox.Fetch.Flags(1);
            inbox.Close();
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectMailbox("inbox")
            Dim flags As FlagCollection = inbox.Fetch.Flags(1);
            inbox.Close()
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectMailbox("inbox");
            var flags:FlagCollection = inbox.Fetch.Flags(1);
            inbox.Close();
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.Header(System.Int32)">
            <summary>
            Fetches the message's Rfc822 compliant Header (parsable by the Parsing namespace classes).
            </summary>
            <param name="messageOrdinal">The ordinal position of the Header to be fetched.</param>
            <returns>The message's Header as a byte array.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.HeaderObject(System.Int32)">
            <summary>
            Fetches the message's Rfc822 compliant header.
            </summary>
            <param name="messageOrdinal">The ordinal position of the Header to be fetched.</param>
            <returns>The message's Header as a Header object.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectMailbox("inbox");
            Header Header = inbox.Fetch.Header(1);
            inbox.Close();
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectMailbox("inbox")
            Dim Header As Header = inbox.Fetch.Header(1);
            inbox.Close()
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectMailbox("inbox");
            var header:Header = inbox.Fetch.Header(1);
            inbox.Close();
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.HeaderStream(System.Int32)">
            <summary>
            Fetches the message's Rfc822 compliant Header (parsable by the Parsing namespace classes).
            </summary>
            <param name="messageOrdinal">The ordinal position of the Header to be fetched.</param>
            <returns>The message's Header as a MemoryStream.</returns>
            <example><see cref="M:ActiveUp.Net.Mail.Fetch.HeaderObject(System.Int32)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.HeaderString(System.Int32)">
            <summary>
            Fetches the message's Rfc822 compliant Header (parsable by the Parsing namespace classes).
            </summary>
            <param name="messageOrdinal">The ordinal position of the Header to be fetched.</param>
            <returns>The message's Header as a string.</returns>
            <example><see cref="M:ActiveUp.Net.Mail.Fetch.HeaderObject(System.Int32)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.HeaderLinesPeek(System.Int32,System.String[])">
            <summary>
            Fetches the requested Header lines without setting the \Seen flag.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="headerHeaders">An array of string representing the requested headers.</param>
            <returns>A NameValueCollection where Names are the Header delimiters and Values are the Header bodies.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectMailbox("inbox");
            //Request the message's subject and from header.
            NameValueCollection lines = inbox.Fetch.HeaderLinesPeek(1,new string[] {"subject","from"});
            //Extract the subject.
            string messageSubject = lines["subject"];
            inbox.Close();
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectMailbox("inbox")
            'Request the message's subject and from header.
            Dim lines As NameValueCollection = inbox.Fetch.HeaderLinesPeek(1,new string[] {"subject","from"})
            'Extract the subject.
            Dim messageSubject As String = lines("subject")
            inbox.Close()
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectMailbox("inbox");
            //Request the message's subject and from header.
            var lines:NameValueCollection = inbox.Fetch.HeaderLinesPeek(1,new string[] {"subject","from"});
            //Extract the subject.
            var messageSubject:string = lines["subject"];
            inbox.Close();
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.HeaderLinesNotPeek(System.Int32,System.String[])">
            <summary>
            Same as HeaderLines except that it will return all headers EXCEPT the specified ones, without setting the \Seen flag.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="headerHeaders">An array of string representing the NOT-requested headers.</param>
            <returns>A NameValueCollection where Names are the Header delimiters and Values are the Header bodies.</returns>
            <example><see cref="M:ActiveUp.Net.Mail.Fetch.HeaderLines(System.Int32,System.String[])"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.HeaderLines(System.Int32,System.String[])">
            <summary>
            Fetches the requested Header lines.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="headerHeaders">An array of string representing the requested headers.</param>
            <returns>A NameValueCollection where Names are the Header delimiters and Values are the Header bodies.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectMailbox("inbox");
            //Request the message's subject and from header.
            NameValueCollection lines = inbox.Fetch.HeaderLines(1,new string[] {"subject","from"});
            //Extract the subject.
            string messageSubject = lines["subject"];
            inbox.Close();
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectMailbox("inbox")
            'Request the message's subject and from header.
            Dim lines As NameValueCollection = inbox.Fetch.HeaderLines(1,new string[] {"subject","from"})
            'Extract the subject.
            Dim messageSubject As String = lines("subject")
            inbox.Close()
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectMailbox("inbox");
            //Request the message's subject and from header.
            var lines:NameValueCollection = inbox.Fetch.HeaderLines(1,new string[] {"subject","from"});
            //Extract the subject.
            var messageSubject:string = lines["subject"];
            inbox.Close();
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.HeaderLinesNot(System.Int32,System.String[])">
            <summary>
            Same as HeaderLines except that it will return all headers EXCEPT the specified ones.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="headerHeaders">An array of string representing the NOT-requested headers.</param>
            <returns>A NameValueCollection where Names are the Header delimiters and Values are the Header bodies.</returns>
            <example><see cref="M:ActiveUp.Net.Mail.Fetch.HeaderLines(System.Int32,System.String[])"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.Message(System.Int32)">
            <summary>
            Fetches the message's Rfc822 compliant form.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <returns>The message's data as a byte array.</returns>
            <example><see cref="M:ActiveUp.Net.Mail.Fetch.MessageObject(System.Int32)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.MessageObject(System.Int32)">
            <summary>
            Fetches the message's Rfc822 compliant form.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <returns>The message's data as a Message object.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectMailbox("inbox");
            Message message = inbox.Fetch.Message(1);
            inbox.Close();
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectMailbox("inbox")
            Dim message As Message = inbox.Fetch.Message(1);
            inbox.Close()
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectMailbox("inbox");
            var message:Message = inbox.Fetch.Message(1);
            inbox.Close();
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.MessageStream(System.Int32)">
            <summary>
            Fetches the message's Rfc822 compliant form.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <returns>The message's data as a MemoryStream.</returns>
            <example><see cref="M:ActiveUp.Net.Mail.Fetch.MessageObject(System.Int32)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.MessageString(System.Int32)">
            <summary>
            Fetches the message's Rfc822 compliant form.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <returns>The message's data as a string.</returns>
            <example><see cref="M:ActiveUp.Net.Mail.Fetch.MessageObject(System.Int32)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.MessagePeek(System.Int32)">
            <summary>
            Same as Message() except that it doesn't set the Seen flag.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <returns>The message's data as a byte array.</returns>
            <example><see cref="M:ActiveUp.Net.Mail.Fetch.MessageObject(System.Int32)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.MessageObjectPeek(System.Int32)">
            <summary>
            Same as MessageObject() except that it doesn't set the Seen flag.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <returns>The message's data as a Message object.</returns>
            <example><see cref="M:ActiveUp.Net.Mail.Fetch.MessageObject(System.Int32)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.MessageSreamPeek(System.Int32)">
            <summary>
            Same as MessageStream() except that it doesn't set the Seen flag.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <returns>The message's data as a MemoryStream.</returns>
            <example><see cref="M:ActiveUp.Net.Mail.Fetch.MessageStream(System.Int32)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.MessageStringPeek(System.Int32)">
            <summary>
            Same as MessageString() except that it doesn't set the Seen flag.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <returns>The message's data as a string.</returns>
            <example><see cref="M:ActiveUp.Net.Mail.Fetch.MessageString(System.Int32)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.Size(System.Int32)">
            <summary>
            Fetches the specified message's size (in bytes).
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <returns>The message's size in bytes.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectMailbox("inbox");
            int size = inbox.Fetch.Size(1);
            inbox.Close();
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectMailbox("inbox")
            Dim size As Integer = inbox.Fetch.Size(1);
            inbox.Close()
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectMailbox("inbox");
            var size:int = inbox.Fetch.Size(1);
            inbox.Close();
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.Text(System.Int32)">
            <summary>
            Fetches the specified message's text (body).
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <returns>The message's text.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectMailbox("inbox");
            string messageBody = inbox.Fetch.Text(1);
            inbox.Close();
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectMailbox("inbox")
            Dim messageBody As Header = inbox.Fetch.Text(1);
            inbox.Close()
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectMailbox("inbox");
            var messageBody:string = inbox.Fetch.Text(1);
            inbox.Close();
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.TextPeek(System.Int32)">
            <summary>
            Same as Text() except that it doesn't set the Seen flag.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <returns>The message's text.</returns>
            <example><see cref="M:ActiveUp.Net.Mail.Fetch.Text(System.Int32)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.Uid(System.Int32)">
            <summary>
            Fetches the specified message's Unique Identifier number.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <returns>The message's unique identifier number.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectMailbox("inbox");
            int uid = inbox.Fetch.Uid(1);
            inbox.Close();
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectMailbox("inbox")
            Dim uid As Integer = inbox.Fetch.Uid(1);
            inbox.Close()
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectMailbox("inbox");
            var uid:int = inbox.Fetch.Uid(1);
            inbox.Close();
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.PartialBodySection(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetches [count] bytes starting at [index].
            Partial version of BodySection().
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="section">The message's body section to be retrieved.</param>
            <param name="index">The byte index to start retrieving from.</param>
            <param name="count">The amount of bytes to be retrieved, starting at index.</param>
            <returns>The requested byte array.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.PartialHeader(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetches [count] bytes starting at [index].
            Partial version of Header().
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="index">The byte index to start retrieving from.</param>
            <param name="count">The amount of bytes to be retrieved, starting at index.</param>
            <returns>The requested byte array.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.PartialMessage(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetches [count] bytes starting at [index].
            Partial version of Message().
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="index">The byte index to start retrieving from.</param>
            <param name="count">The amount of bytes to be retrieved, starting at index.</param>
            <returns>The requested byte array.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.PartialMessagePeek(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetches [count] bytes starting at [index].
            Partial version of MessagePeek().
            Same as PartialMessage() except that it doesn't set the Seen flag.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="index">The byte index to start retrieving from.</param>
            <param name="count">The amount of bytes to be retrieved, starting at index.</param>
            <returns>The requested byte array.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.PartialText(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetches [count] bytes starting at [index].
            Partial version of Text().
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="index">The byte index to start retrieving from.</param>
            <param name="count">The amount of bytes to be retrieved, starting at index.</param>
            <returns>The requested byte array.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.PartialTextPeek(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetches [count] bytes starting at [index].
            Partial version of TextPeek().
            Same as PartialText() except that it doesn't set the Seen flag.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="index">The byte index to start retrieving from.</param>
            <param name="count">The amount of bytes to be retrieved, starting at index.</param>
            <returns>The requested byte array.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.PartialBodySectionString(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetches [count] bytes starting at [index].
            Partial version of BodySectionString().
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="index">The byte index to start retrieving from.</param>
            <param name="count">The amount of bytes to be retrieved, starting at index.</param>
            <returns>The requested byte array converted to a string.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.PartialHeaderString(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetches [count] bytes starting at [index].
            Partial version of HeaderString().
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="index">The byte index to start retrieving from.</param>
            <param name="count">The amount of bytes to be retrieved, starting at index.</param>
            <returns>The requested byte array converted to a string.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.PartialMessageString(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetches [count] bytes starting at [index].
            Partial version of MessageString().
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="index">The byte index to start retrieving from.</param>
            <param name="count">The amount of bytes to be retrieved, starting at index.</param>
            <returns>The requested byte array converted to a string.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.PartialMessageStringPeek(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetches [count] bytes starting at [index].
            Partial version of MessagePeekString().
            Same as PartialMessageString() except that it doesn't set the Seen flag.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="index">The byte index to start retrieving from.</param>
            <param name="count">The amount of bytes to be retrieved, starting at index.</param>
            <returns>The requested byte array converted to a string.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.PartialTextString(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetches [count] bytes starting at [index].
            Partial version of TextString().
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="index">The byte index to start retrieving from.</param>
            <param name="count">The amount of bytes to be retrieved, starting at index.</param>
            <returns>The requested byte array converted to a string.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Fetch.PartialTextStringPeek(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetches [count] bytes starting at [index].
            Partial version of TextPeekString().
            Same as PartialTextString() except that it doesn't set the Seen flag.
            </summary>
            <param name="messageOrdinal">The ordinal position of the message to be fetched.</param>
            <param name="index">The byte index to start retrieving from.</param>
            <param name="count">The amount of bytes to be retrieved, starting at index.</param>
            <returns>The requested byte array converted to a string.</returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.Fetch.ParentMailbox">
            <summary>
            The Fetch's parent mailbox.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.FieldFormat">
            <summary>
            Represents the formatting options of a message template field.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.FieldFormat.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.FieldFormat.#ctor(System.String,System.String)">
            <summary>
            Creates the field format based on it's name and format string.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="format">The format string of the field format.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.FieldFormat.#ctor(System.String,System.String,ActiveUp.Net.Mail.PaddingDirection,System.Int32,System.Char)">
            <summary>
            Creates the field format based on the field name, format string, padding direction, total width and padding char.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="format">The format string.</param>
            <param name="paddingDir">The padding direction.</param>
            <param name="totalWidth">The total width.</param>
            <param name="paddingChar">The padding char.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.FieldFormat.PaddingChar">
            <summary>
            The padding char.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.FieldFormat.TotalWidth">
            <summary>
            The total width.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.FieldFormat.PaddingDir">
            <summary>
            The padding direction.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.FieldFormat.Name">
            <summary>
            The field name.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.FieldFormat.Format">
            <summary>
            The format string.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.FieldFormatCollection">
            <summary>
            A collection of field format options.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.FieldFormatCollection.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.FieldFormatCollection.Add(ActiveUp.Net.Mail.FieldFormat)">
            <summary>
            Add an FieldFormat object in the collection.
            </summary>
            <param name="fieldFormat">The FieldFormat.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.FieldFormatCollection.Add(System.String,System.String)">
            <summary>
            Add an FieldFormat object in the collection based the fiel name and format string.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="format">The format string of the field.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.FieldFormatCollection.Add(System.String,System.String,ActiveUp.Net.Mail.PaddingDirection,System.Int32,System.Char)">
            <summary>
            Add an FieldFormat object based the field name, format string, padding direction, total width and padding char.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="format">The format string of the field.</param>
            <param name="paddingDir">The padding direction.</param>
            <param name="totalWidth">The total width.</param>
            <param name="paddingChar">The padding char.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.FieldFormatCollection.Remove(System.Int32)">
            <summary>
            Remove the FieldFormat object from the collection at the specified index position.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ActiveUp.Net.Mail.FieldFormatCollection.Contains(System.String)">
            <summary>
            Determines whether the specified field is in the list.
            </summary>
            <param name="name">The name of the field.</param>
            <returns>true if the collection contain the specified field; false otherwise.</returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.FieldFormatCollection.Item(System.Int32)">
            <summary>
            Returns the FieldFormat object at the specified index position in the collection.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.FieldFormatCollection.Item(System.String)">
            <summary>
            Returns the FieldFormat of the specified name.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Flag">
            <summary>
            Represents a flag.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Flag.ToString">
            <summary>
            The name of the flag.
            </summary>
            <returns>The name of the flag.</returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.Flag.Name">
            <summary>
            The flags's name.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.FlagCollection">
            <summary>
            Represents a collection of Flags.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.FlagCollection.Add(ActiveUp.Net.Mail.Flag)">
            <summary>
            Adds the provided flag to the collection.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:ActiveUp.Net.Mail.FlagCollection.Add(System.String)">
            <summary>
            Adds a new flag to the collection with the specified name.
            </summary>
            <param name="flagName"></param>
        </member>
        <member name="P:ActiveUp.Net.Mail.FlagCollection.Item(System.Int32)">
            <summary>
            Retrieves the flag at index [index] in the collection.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.FlagCollection.Item(System.String)">
            <summary>
            Retrieves the flag with the specified name in the collection.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.FlagCollection.Merged">
            <summary>
            A string representing the collection (in IMAP4rev1 compatible format).
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Header">
            <summary>
            Represents the Header of a RFC 2822 message.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Header.GetBounceStatus(System.String)">
            <summary>
            Detects if a message is a delivery failure notification.
            This method uses the default signatures containing in an internal ressource file.
            </summary>
            <remarks>
            Signature files are XML files formatted as follows : 
            
            &lt;?xml version='1.0'?&gt;
            &lt;signatures&gt;
            	&lt;signature from=&quot;postmaster&quot; subject=&quot;Undeliverable Mail&quot; body=&quot;Unknown user&quot; search=&quot;&quot; />
            	...
            &lt;/signatures&gt;
            </remarks>
            <returns>A BounceStatus object containing the level of revelance and if 100% identified, the erroneous email address.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Header.ToHeaderString">
            <summary>
            The MIME representation of the header.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Header.ToHeaderString(System.Boolean)">
            <summary>
            The MIME representation of the header.
            </summary>
            <param name="removeBlindCopies">if set to <c>true</c> remove blind copies (BCC).</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Header.StoreToFile(System.String)">
            <summary>
            Stores the message Header to the specified path.
            </summary>
            <param name="path">Path to store the message Header at.</param>
            <returns>The path the message Header has been stored at.</returns>
            <example>
            This retrieves the first message's Header from the remote POP server and stores it on the disk.<br />
            You can read it back using the ParserHeader() method in the Parser class.
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("pop.myisp.com","username","password");
            Parser.ParseHeader(pop.RetrieveHeader(1)).StoreToFile("C:\\My Mails\\my_header.hdr");
            pop.Disconnect();
            this.Response.Write("Header stored.");
            
            VB.NET
            
            Dim pop As New ActiveUp.MailPop3Pop3Client()
            pop.Connect("pop.myisp.com","username","password")
            Parser.ParseHeader(pop.RetrieveHeader(1)).StoreToFile("C:\\My Mails\\my_header.hdr");
            pop.Disconnect()
            Me.Response.Write("Header stored")
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("pop.myisp.com","username","password");
            Parser.ParseHeader(pop.RetrieveHeader(1)).StoreToFile("C:\\My Mails\\my_header.hdr");
            pop.Disconnect();
            this.Response.Write("Header stored.");
            </code>
            </example> 
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.OriginalData">
            <summary>
            Gets the message data as received from the server or as parsed from the file.
            Only available to messages received and/or parsed.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.HeaderFieldNames">
            <summary>
            All Header fields names.
            Key is the Header name in lower case and value is the Header name as it was it the original message.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.HeaderFields">
            <summary>
            All Header fields.
            Key is the Header name in lower case and value is the Header value.
            </summary>
            <example>
            //This exposes the mail client used to send the message.
            message.HeaderFields["x-mailer"]
            </example>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Cc">
            <summary>
            "Cc" Recipients of the message.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Bcc">
            <summary>
            "Bcc" Recipients of the message.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Recipients">
            <summary>
            All recipients of the message.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Sender">
            <summary>
            Sender of the message.
            </summary>
            <remark>
            The sender address can be specified if the person that actually post the message is different from the message originator. For exemple a secretary should send a message on the behalf of the CEO. In that particular car, the CEO's email address is set on the From property, and the secretary on the Sender property.
            </remark>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.From">
            <summary>
            From of the message.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.ReplyTo">
            <summary>
            Reply-To of the message.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Subject">
            <summary>
            Subject of the message.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.InReplyTo">
            <summary>
            MessageId of the message to which this is a reply.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.References">
            <summary>
            MessageId of the messages in the same thread (conversation) as this message.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Comments">
            <summary>
            Any additional info about the message's body.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Keywords">
            <summary>
            Keywords related to this message that could be used by a search engine while searching for this message in a list.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.MessageId">
            <summary>
            ID of the message generated by the server.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Charset">
            <summary>
            The message's charset.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.ReceivedDate">
            <summary>
            Gets the received date by the mail server.
            </summary>
            <value>The received date.</value>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Date">
            <summary>
            Received date of the message in Universal Time.
            System.DateTime.MinValue if no received date could be parsed into a DateTime object.
            <seealso cref="P:ActiveUp.Net.Mail.Header.DateString"/>
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.ReturnReceipt">
            <summary>
            Gets or sets the return receipt email. This will enable the delivery notification.
            </summary>
            <value>The return receipt.</value>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.ConfirmRead">
            <summary>
            	<para>Gets or sets the email address where a read confirmation should be sent.
                Please note that use recipient may ignore this receipt. In that case, you won't
                receive anything.</para>
            	<para>Please note that if you are receiving the message, the property will return
                null if the sender doesn't request a read receipt, otherwise, an Address object
                will be available.</para>
            </summary>
            <example>
            	<code lang="CS" title="C# sample">
            ActiveUp.Net.Mail.Message msg = new ActiveUp.Net.Mail.Message();
            msg.From.Name = "User1";
            msg.From.Email = "user1@example.com";
            msg.To.Add("user2@example.com");
            msg.Subject = "Confirm Read";
            msg.BodyHtml.Text = "The HTML body";
             
            // This is the pragmatic solution
            msg.ConfirmRead = msg.From;
             
            // But you can specify it yourself
            msg.ConfirmRead = new Address("user4", "user4@example.com");
                </code>
            	<code lang="VB" title="VB.NET sample">
            Dim msg As ActiveUp.Net.Mail.Message = New ActiveUp.Net.Mail.Message()
            msg.From.Name = "User1"
            msg.From.Email = "user1@example.com"
            msg.To.Add("user2@example.com")
            msg.Subject = "Confirm Read"
            msg.BodyHtml.Text = "The HTML body"
             
            ' This Is the pragmatic solution
            msg.ConfirmRead = msg.From
             
            ' But you can specify it yourself
            msg.ConfirmRead = New Address("user4", "user4@example.com")
                </code>
            </example>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Flag">
            <summary>
            Gets or sets the message flag (follow up).
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.DateString">
            <summary>
            Received date of the message as a string.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.ContentTransferEncoding">
            <summary>
            Content transfer encoding of the message.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.ContentType">
            <summary>
            Content type of the message.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.IndexOnServer">
            <summary>
            The index of the message on the server.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Id">
            <summary>
            Initializes an ID property that could be used for DB storage of messages.
            0 by default.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Path">
            <summary>
            This line shows the path the message took to reach the current system.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.FollowUpTo">
            <summary>
            This line shows where follow-up messages are to be posted. 
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Expires">
            <summary>
            Expiration date of the message.
            System.DateTime.MinValue if no expiration date could be parsed into a DateTime.
            <seealso cref="P:ActiveUp.Net.Mail.Header.DateString"/>
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.ExpiresString">
            <summary>
            Received date of the message as a string.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Control">
            <summary>
            This field lists the Message-ID's of any messages prompting the submission of this message. 
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Distribution">
            <summary>
            This line is used to alter the distribution scope of the message.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Organization">
            <summary>
            The text of this line is a short phrase describing the organization	to which the sender belongs, or to which the machine belongs.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Summary">
            <summary>
            This line should contain a brief summary of the message.  It is	usually used as part of a follow-up to another message.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Approved">
            <summary>
            This line is required for any message posted to a moderated	newsgroup.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.BodyLineCount">
            <summary>
            This contains a count of the number of lines in the body of the message (if available).
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Header.Xref">
            <summary>
            Contains an XrefList object containing information about the message, at which host, newsgroups and indexes it resides.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.HeaderCollection">
            <summary>
            Represents a collection of Header objects.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.HeaderCollection.Add(ActiveUp.Net.Mail.Header)">
            <summary>
            
            </summary>
            <param name="header">The Header to be added in the collection.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.HeaderCollection.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Imap4Client">
            <summary>
            This class allows communication with an IMAP4 or IMAP4rev1 compatible server.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.Connect(System.String)">
            <summary>
            Connects to the server.
            </summary>
            <param name="host">Server address.</param>
            <returns>The server's response greeting.</returns>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            ...
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            ...
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            ...
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.BeginConnect(System.String,System.AsyncCallback)">
            <summary>
            Begins the connect.
            </summary>
            <param name="host">The host.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.Connect(System.String,System.Int32)">
            <summary>
            Connects to the server.
            </summary>
            <param name="host">Server address.</param>
            <param name="port">Server port.</param>
            <returns>The server's response greeting.</returns>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com",8505);
            ...
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com",8505)
            ...
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com",8505);
            ...
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.BeginConnect(System.String,System.Int32,System.AsyncCallback)">
            <summary>
            Begins the connect.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            Connects the specified addr.
            </summary>
            <param name="addr">The addr.</param>
            <param name="port">The port.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback)">
            <summary>
            Begins the connect.
            </summary>
            <param name="addr">The addr.</param>
            <param name="port">The port.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.Connect(System.Net.IPAddress[],System.Int32)">
            <summary>
            Connects the specified addresses.
            </summary>
            <param name="addresses">The addresses.</param>
            <param name="port">The port.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.BeginConnect(System.String,System.String,System.String,System.AsyncCallback)">
            <summary>
            Begins the connect.
            </summary>
            <param name="host">The host.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.Connect(System.String,System.Int32,System.String,System.String)">
            <summary>
            Connects the specified host.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.BeginConnect(System.String,System.Int32,System.String,System.String,System.AsyncCallback)">
            <summary>
            Begins the connect.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.EndConnect(System.IAsyncResult)">
            <summary>
            Ends the connect.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.Disconnect">
            <summary>
            Logs out and closes the connection with the server.
            </summary>
            <returns>The server's googbye greeting.</returns>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            //Do some work...
            imap.Disconnect();
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            'Do some work...
            imap.Disconnect()
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            //Do some work...
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.Login(System.String,System.String)">
            <summary>
            Logs in to the specified account.
            </summary>
            <param name="username">Username of the account.</param>
            <param name="password">Password of the account.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            //Do some work...
            imap.Disconnect();
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            'Do some work...
            imap.Disconnect()
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            //Do some work...
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.LoginFast(System.String,System.String)">
            <summary>
            Same as Login but doesn't load the AllMailboxes and Mailboxes properties of the Imap4Client object, ensuring faster operation.
            </summary>
            <param name="username">Username of the account.</param>
            <param name="password">Password of the account.</param>
            <returns>The server's response.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.Authenticate(System.String,System.String,ActiveUp.Net.Mail.SaslMechanism)">
            <summary>
            Authenticates using the given SASL mechanism.
            </summary>
            <param name="username">Username to authenticate as.</param>
            <param name="password">Password.</param>
            <param name="mechanism">SASL mechanism to be used.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Authenticate("user","pass",SASLMechanism.CramMd5);
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Authenticate("user","pass",SASLMechanism.CramMd5)
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Authenticate("user","pass",SASLMechanism.CramMd5);
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.StartIdle">
            <summary>
            Start the idle on the mail server.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.StopIdle">
            <summary>
            Stop the idle on the imap4 server.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.Command(System.String)">
            <summary>
            Sends the command to the server.
            The command tag is automatically added.
            </summary>
            <param name="command">The command (with arguments if necesary) to be sent.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("user","pass");
            imap.Command("select inbox");
            //Selected mailbox is inbox.
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("user","pass")
            imap.Command("select inbox")
            'Selected mailbox is inbox.
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("user","pass");
            imap.Command("select inbox");
            //Selected mailbox is inbox.
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.GetStream">
            <summary>
            Gets the communacation stream of this object.
            </summary>
            <returns>A Stream object, either of type NetworkStream or SslStream if the channel is secured.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.Noop">
            <summary>
            Performs a NOOP command which is used to maintain the connection alive.
            </summary>
            <returns>The server response.</returns>
            <remarks>Some servers include mailbox update informations in the response.</remarks>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            try
            {
            	imap.Noop();
            	imap.Disconnect();
            }
            catch
            {
            	throw new Exception("Connection lost.");
            }
             
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            Try
            	imap.Noop()
            	imap.Disconnect()
            Catch
            	Throw New Exception("Connection lost.");
            End Try
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            try
            {
            	imap.Noop();
            	imap.Disconnect();
            }
            catch
            {
            	throw new Exception("Connection lost.");
            }
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.Check">
            <summary>
            Equivalent to Noop().
            </summary>
            <returns>The server's response.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.Close">
            <summary>
            Closes the mailbox and removes messages marked with the Deleted flag.
            </summary>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectInbox("inbox");
            //Get the amount of messages in the inbox.
            int messageCount = inbox.MessageCount;
            inbox.Close();
            imap.Disconnect();
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectInbox("inbox")
            //Get the amount of messages in the inbox.
            Dim messageCount As Integer = inbox.MessageCount
            inbox.Close()
            imap.Disconnect()
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectInbox("inbox");
            //Get the amount of messages in the inbox.
            var messageCount:int = inbox.MessageCount;
            inbox.Close();
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.Expunge">
            <summary>
            Removes all messages marked with the Deleted flag.
            </summary>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectInbox("inbox");
            //Mark message 1 for deletion.
            inbox.DeleteMessage(1);
            //Effectively remove all message marked with Deleted flag.
            imap.Expunge();
            //Message 1 is permanently removed.
            imap.Disconnect();
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectInbox("inbox")
            'Mark message 1 for deletion.
            inbox.DeleteMessage(1)
            'Effectively remove all message marked with Deleted flag.
            imap.Expunge()
            'Message 1 is permanently removed.
            imap.Disconnect()
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectInbox("inbox");
            //Mark message 1 for deletion.
            inbox.DeleteMessage(1);
            //Effectively remove all message marked with Deleted flag.
            imap.Expunge();
            //Message 1 is permanently removed.
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.GetMailboxes(System.String,System.String)">
            <summary>
            Retrieves a list of mailboxes.
            </summary>
            <param name="reference">The base path.</param>
            <param name="mailboxName">Mailbox name.</param>
            <returns>A MailboxCollection object containing the requested mailboxes.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("user","pass");
            //Return all children mailboxes of "inbox".
            MailboxCollection mailboxes = imap.GetMailboxes("inbox","*");
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("user","pass")
            'Return all children mailboxes of "inbox".
            Dim mailboxes As MailboxCollection = imap.GetMailboxes("inbox","*")
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("user","pass");
            //Return all children mailboxes of "inbox".
            var mailboxes:MailboxCollection  = imap.GetMailboxes("inbox","*");
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.LoadMailboxes">
            <summary>
            Fills in or refreshes the Imap4Client.AllMailboxes and Imap4Client.Mailboxes properties.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.CreateMailbox(System.String)">
            <summary>
            Creates a mailbox with the specified name.
            </summary>
            <param name="mailboxName">The name of the new mailbox.</param>
            <returns>The newly created mailbox.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("user","pass");
            imap.CreateMailbox("inbox.Staff");
            //Child mailbox of inbox named Staff has been created.
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("user","pass")
            imap.CreateMailbox("inbox.Staff");
            'Child mailbox of inbox named Staff has been created.
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("user","pass");
            imap.CreateMailbox("inbox.Staff");
            //Child mailbox of inbox named Staff has been created.
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.RenameMailbox(System.String,System.String)">
            <summary>
            Renames a mailbox.
            </summary>
            <param name="oldMailboxName">The mailbox to be renamed.</param>
            <param name="newMailboxName">The new name of the mailbox.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("user","pass");
            imap.RenameMailbox("inbox.Staff","Staff");
            //The Staff mailbox is now a top-level mailbox.
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("user","pass")
            imap.RenameMailbox("inbox.Staff","Staff");
            'The Staff mailbox is now a top-level mailbox.
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("user","pass");
            imap.RenameMailbox("inbox.Staff","Staff");
            //The Staff mailbox is now a top-level mailbox.
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.DeleteMailbox(System.String)">
            <summary>
            Deletes a mailbox.
            </summary>
            <param name="mailboxName">The mailbox to be deleted.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("user","pass");
            imap.DeleteMailbox("inbox.Staff");
            //The inbox.Staff mailbox is now deleted.
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("user","pass")
            imap.DeleteMailbox("inbox.Staff");
            //The inbox.Staff mailbox is now deleted.
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("user","pass");
            imap.DeleteMailbox("inbox.Staff");
            //The inbox.Staff mailbox is now deleted.
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.SubscribeMailbox(System.String)">
            <summary>
            Subscribes to a mailbox.
            </summary>
            <param name="mailboxName">The mailbox to be subscribed to.</param>
            <returns>The server's response.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.UnsubscribeMailbox(System.String)">
            <summary>
            Unsubscribes from a mailbox.
            </summary>
            <param name="mailboxName">The mailbox to be unsubscribed from.</param>
            <returns>The server's response.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.SelectMailbox(System.String)">
            <summary>
            Selects a mailbox on the server.
            </summary>
            <param name="mailboxName">The mailbox to be selected.</param>
            <returns>The selected mailbox.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("user","pass");
            Mailbox mbox = imap.SelectMailbox("inbox.Staff");
            //The inbox.Staff mailbox is now selected.
            mbox.Empty(true);
            //Mailbox inbox.Staff is now empty.
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("user","pass")
            Dim mbox As Mailbox = imap.SelectMailbox("inbox.Staff")
            'The inbox.Staff mailbox is now selected.
            mbox.Empty(true)
            'Mailbox inbox.Staff is now empty.
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("user","pass");
            var mbox:Mailbox = imap.SelectMailbox("inbox.Staff");
            //The inbox.Staff mailbox is now selected.
            mbox.Empty(true);
            //Mailbox inbox.Staff is now empty.
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Client.ExamineMailbox(System.String)">
            <summary>
            Same as SelectMailbox() except that the mailbox is opened with read-only permission.
            </summary>
            <param name="mailboxName">The mailbox to be examined.</param>
            <returns>The examined mailbox.</returns>
            <example>
            <code>
            C#
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("user","pass");
            Mailbox mbox = imap.ExamineMailbox("inbox.Staff");
            //The inbox.Staff mailbox is now selected (read-only).
            int recentMessageCount = mbox.Recent;
            //There are recentMessageCount messages that haven't been read in inbox.Staff.
            imap.Disconnect();
            
            VB.NET
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("user","pass")
            Dim mbox As Mailbox = imap.ExamineMailbox("inbox.Staff")
            'The inbox.Staff mailbox is now selected (read-only).
            Dim recentMessageCount As Integer = mbox.Recent
            'There are recentMessageCount messages that haven't been read in inbox.Staff.
            imap.Disconnect()
            
            JScript.NET
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("user","pass");
            var mbox:Mailbox = imap.ExamineMailbox("inbox.Staff");
            //The inbox.Staff mailbox is now selected (read-only).
            int recentMessageCount = mbox.Recent;
            //There are recentMessageCount messages that haven't been read in inbox.Staff.
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="P:ActiveUp.Net.Mail.Imap4Client.Mailboxes">
            <summary>
            Mailboxes on the account.
            </summary>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            int mailboxCount = imap.Mailboxes.Count;
            //User jdoe1234 has mailboxCount mailboxes.
            imap.Disconnect();
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim mailboxCount As Integer = imap.Mailboxes.Count
            //User jdoe1234 has mailboxCount mailboxes.
            imap.Disconnect()
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var mailboxCount:int = imap.Mailboxes.Count;
            //User jdoe1234 has mailboxCount mailboxes.
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="P:ActiveUp.Net.Mail.Imap4Client.AllMailboxes">
            <summary>
            Same as the Mailboxes property, except that all mailboxes on the account are presented at the same level of hierarchy.
            In example, a child mailbox of the "INBOX" mailbox could be accessed directly with this collection.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Imap4Client.ServerCapabilities">
            <summary>
            Server capabilities.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.Authenticating">
            <summary>
            Event fired when authentication starts.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.Authenticated">
            <summary>
            Event fired when authentication completed.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.Nooping">
            <summary>
            Event fired when NOOP command is issued.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.Nooped">
            <summary>
            Event fired when NOOP command completed.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.TcpWriting">
            <summary>
            Event fired when a command is being written to the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.TcpWritten">
            <summary>
            Event fired when a command has been written to the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.TcpReading">
            <summary>
            Event fired when a response is being read from the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.TcpRead">
            <summary>
            Event fired when a response has been read from the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.MessageRetrieving">
            <summary>
            Event fired when a message is being requested using the RetrieveMessage() method.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.MessageRetrieved">
            <summary>
            Event fired when a message is being retrieved using the RetrieveMessage() method.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.HeaderRetrieving">
            <summary>
            Event fired when a message Header is being requested using the RetrieveHeader() method.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.HeaderRetrieved">
            <summary>
            Event fired when a message Header has been retrieved using the RetrieveHeader() method.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.Connecting">
            <summary>
            Event fired when attempting to connect to the remote server using the specified host.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.Connected">
            <summary>
            Event fired when the object is connected to the remote server or when connection failed.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.Disconnecting">
            <summary>
            Event fired when attempting to disconnect from the remote server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.Disconnected">
            <summary>
            Event fired when the object disconnected from the remote server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.MessageSending">
            <summary>
            Event fired when a message is being sent.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.MessageSent">
            <summary>
            Event fired when a message has been sent.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Imap4Client.NewMessageReceived">
            <summary>
            Event fired when a new message received.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Imap4Client.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ActiveUp.Net.Mail.Imap4Exception">
            <summary>
            Represents an IMAP4 specific error.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Imap4Exception.#ctor(System.String)">
            <summary>
            Constructor, sets message to the specified value.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:ActiveUp.Net.Mail.Imap4Exception.Message">
            <summary>
            The exception's message.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.ListTemplate">
            <summary>
            Summary description for ListTemplate.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.ListTemplate.GetEnumerator(System.Object)">
            <summary>
            Get the enumerator from the specified data source.
            </summary>
            <param name="dataSource">The data source.</param>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.ListTemplate.DataSource">
            <summary>
            Get or set the main data source of the body template.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.ListTemplate.Count">
            <summary>
            Number of records in the datasource.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.ListTemplateCollection">
            <summary>
            A collection of templated bodies.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.ListTemplateCollection.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.ListTemplateCollection.Add(ActiveUp.Net.Mail.ListTemplate)">
            <summary>
            Add a templated list in the collection.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.ListTemplateCollection.Add(System.String,System.String)">
            <summary>
            Add a templated list in the collection based on the specified content.
            </summary>
            <param name="name">The name to use.</param>
            <param name="content">The content to use.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.ListTemplateCollection.Remove(System.Int32)">
            <summary>
            Remove the body template at the specified index position.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:ActiveUp.Net.Mail.ListTemplateCollection.Item(System.Int32)">
            <summary>
            Returns the body template at the specified index position.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Logger">
            <summary>
            Provides all logging facilities for any applications.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Logger.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Logger.AddEntry(System.String,System.Int32)">
            <summary>
            Add a log entry using the logging level.
            </summary>
            <param name="line">The entry to add.</param>
            <param name="level">The log entry level.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Logger.AddEntry(System.String)">
            <summary>
            Add a log entry in all logging objects availables.
            </summary>
            <param name="line">The entry to add.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Logger.AddEntryToFile(System.String)">
            <summary>
            Append the logging text file.
            </summary>
            <param name="line">The entry to add.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Logger.LastEntries(System.Int32)">
            <summary>
            Gets an ArrayList containing the specified number of last entries.
            </summary>
            <param name="lines">The max lines to retrieve.</param>
            <returns>An ArrayList containing the maximum log entries.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Logger.LastEntries">
            <summary>
            Gets a string containing a maximum of 30 log entries.
            </summary>
            <returns>A maximum of 30 entries separeted by a carriage return.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Logger.LastEntry">
            <summary>
            Gets the last entry of the log.
            </summary>
            <returns>A string containing the last entry.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Logger.OnEntryAdded(System.EventArgs)">
            <summary>
            OnEntryAdded event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.Logger.LogEntries">
            <summary>
            Gets or sets the log entries that are stored in the memory.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Logger.LogLevel">
            <summary>
            Gets or sets the logging level.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Logger.LogInMemory">
            <summary>
            Specify whether if you want to log in memory.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Logger.LogFile">
            <summary>
            Gets or sets the full path to the text file to append when logging.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Logger.Count">
            <summary>
            Gets the number of log entries.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Logger.UseTraceContext">
            <summary>
            Specify whether if the logger needs to append the Trace Context.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Logger.Disabled">
            <summary>
            Specify whether if the logging functions are disabled.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Logger.EntryAdded">
            <summary>
            The EntryAdded event handler.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Mailbox">
            <summary>
            Represents a mailbox.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.CreateChild(System.String)">
            <summary>
            Creates a child mailbox.
            </summary>
            <param name="mailboxName">The name of the child mailbox to be created.</param>
            <returns>The newly created mailbox.</returns>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectInbox("inbox");
            Mailbox staff = inbox.CreateChild("Staff");
            int zero = staff.MessageCount
            //Returns 0.
            inbox.Close();
            imap.Disconnect();
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectInbox("inbox")
            Dim staff As Mailbox = inbox.CreateChild("Staff")
            Dim zero As Integer = staff.MessageCount
            'Returns 0.
            inbox.Close()
            imap.Disconnect()
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectInbox("inbox");
            var staff:Mailbox = inbox.CreateChild("Staff");
            var zero:int = staff.MessageCount
            //Returns 0.
            inbox.Close();
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Subscribe">
            <summary>
            Subscribes to the mailbox.
            </summary>
            <returns>The server's response.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Unsubscribe">
            <summary>
            Unsubscribes from the mailbox.
            </summary>
            <returns>The server's response.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Delete">
            <summary>
            Deletes the mailbox.
            </summary>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectInbox("inbox");
            inbox.Delete();
            imap.Disconnect();
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectInbox("inbox")
            inbox.Delete()
            imap.Disconnect()
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectInbox("inbox");
            inbox.Delete();
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Rename(System.String)">
            <summary>
            Renames the mailbox.
            </summary>
            <param name="newMailboxName">The new name of the mailbox.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectInbox("invox");
            inbox.Rename("inbox");
            imap.Disconnect();
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectInbox("invox")
            inbox.Rename("inbox")
            imap.Disconnect()
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectInbox("invox");
            inbox.Rename("inbox");
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Search(System.String)">
            <summary>
            Searches the mailbox for messages corresponding to the query.
            </summary>
            <param name="query">Query to use.</param>
            <returns>An array of integers containing ordinal positions of messages matching the query.</returns>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectInbox("inbox");
            int[] ids = inbox.Search("SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM "Smith");
            imap.Disconnect();
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectInbox("inbox")
            Dim ids() As Integer = inbox.Search("SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM "Smith")
            imap.Disconnect()
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectInbox("inbox");
            var ids:int[] = inbox.Search("SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM "Smith");
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.SearchParse(System.String)">
            <summary>
            Search for messages accoridng to the given query.
            </summary>
            <param name="query">Query to use.</param>
            <returns>A collection of messages matching the query.</returns>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectInbox("inbox");
            MessageCollection messages = inbox.SearchParse("SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM "Smith");
            imap.Disconnect();
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectInbox("inbox")
            Dim messages As MessageCollection = inbox.SearchParse("SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM "Smith")
            imap.Disconnect()
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectInbox("inbox");
            var messages:MessageCollection = inbox.SearchParse("SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM "Smith");
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Search(System.String,System.String)">
            <summary>
            Searches the mailbox for messages corresponding to the query.
            </summary>
            <param name="query">The search query.</param>
            <param name="charset">The charset the query has to be performed for.</param>
            <returns>An array of integers containing ordinal positions of messages matching the query.</returns>
            <example><see cref="M:ActiveUp.Net.Mail.Mailbox.Search(System.String)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.SearchParse(System.String,System.String)">
            <summary>
            Search for messages accoridng to the given query.
            </summary>
            <param name="query">Query to use.</param>
            <param name="charset">The charset to apply the query for.</param>
            <returns>A collection of messages matching the query.</returns>
            <example><see cref="M:ActiveUp.Net.Mail.Mailbox.SearchParse(System.String)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.AddFlags(System.Int32,ActiveUp.Net.Mail.FlagCollection)">
            <summary>
            Adds the specified flags to the message.
            </summary>
            <param name="messageOrdinal">The message's ordinal position.</param>
            <param name="flags">Flags to be added to the message.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectInbox("inbox");
            FlagCollection flags = new FlagCollection();
            flags.Add("Draft");
            inbox.AddFlags(1,flags);
            //Message 1 is marked as draft.
            imap.Disconnect();
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectInbox("inbox")
            Dim flags As New FlagCollection
            flags.Add("Draft")
            inbox.AddFlags(1,flags)
            'Message 1 is marked as draft.
            imap.Disconnect()
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectInbox("inbox");
            var flags:FlagCollection = new FlagCollection();
            flags.Add("Draft");
            inbox.AddFlags(1,flags);
            //Message is marked as draft.
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.RemoveFlags(System.Int32,ActiveUp.Net.Mail.FlagCollection)">
            <summary>
            Removes the specified flags from the message.
            </summary>
            <param name="messageOrdinal">The message's ordinal position.</param>
            <param name="flags">Flags to be removed from the message.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectInbox("inbox");
            FlagCollection flags = new FlagCollection();
            flags.Add("Read");
            inbox.RemoveFlags(1,flags);
            //Message 1 is marked as unread.
            imap.Disconnect();
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectInbox("inbox")
            Dim flags As New FlagCollection
            flags.Add("Read")
            inbox.RemoveFlags(1,flags)
            'Message 1 is marked as unread.
            imap.Disconnect()
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectInbox("inbox");
            var flags:FlagCollection = new FlagCollection();
            flags.Add("Read");
            inbox.RemoveFlags(1,flags);
            //Message 1 is marked as unread.
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.SetFlags(System.Int32,ActiveUp.Net.Mail.FlagCollection)">
            <summary>
            Sets the specified flags for the message.
            </summary>
            <param name="messageOrdinal">The message's ordinal position.</param>
            <param name="flags">Flags to be stored for the message.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectInbox("inbox");
            FlagCollection flags = new FlagCollection();
            flags.Add("Read");
            flags.Add("Answered");
            inbox.AddFlags(1,flags);
            //Message is marked as read and answered. All prior flags are unset.
            imap.Disconnect();
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectInbox("inbox")
            Dim flags As New FlagCollection
            flags.Add("Read")
            flags.Add("Answered")
            inbox.AddFlags(1,flags)
            'Message is marked as read and answered. All prior flags are unset.
            imap.Disconnect()
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectInbox("inbox");
            var flags:FlagCollection = new FlagCollection();
            flags.Add("Read");
            flags.Add("Answered");
            inbox.AddFlags(1,flags);
            //Message is marked as read and answered. All prior flags are unset.
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.AddFlagsSilent(System.Int32,ActiveUp.Net.Mail.FlagCollection)">
            <summary>
            Same as AddFlags() except no response is requested.
            </summary>
            <param name="messageOrdinal">The message's ordinal position.</param>
            <param name="flags">Flags to be added to the message.</param>
            <example><see cref="M:ActiveUp.Net.Mail.Mailbox.AddFlags(System.Int32,ActiveUp.Net.Mail.FlagCollection)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.RemoveFlagsSilent(System.Int32,ActiveUp.Net.Mail.FlagCollection)">
            <summary>
            Same as RemoveFlags() except no response is requested.
            </summary>
            <param name="messageOrdinal">The message's ordinal position.</param>
            <param name="flags">Flags to be removed from the message.</param>
            <example><see cref="M:ActiveUp.Net.Mail.Mailbox.RemoveFlags(System.Int32,ActiveUp.Net.Mail.FlagCollection)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.SetFlagsSilent(System.Int32,ActiveUp.Net.Mail.FlagCollection)">
            <summary>
            Same as SetFlags() except no response is requested.
            </summary>
            <param name="messageOrdinal">The message's ordinal position.</param>
            <param name="flags">Flags to be set for the message.</param>
            <example><see cref="M:ActiveUp.Net.Mail.Mailbox.SetFlags(System.Int32,ActiveUp.Net.Mail.FlagCollection)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.CopyMessage(System.Int32,System.String)">
            <summary>
            Copies the specified message to the specified mailbox.
            </summary>
            <param name="messageOrdinal">The ordinal of the message to be copied.</param>
            <param name="destinationMailboxName">The name of the destination mailbox.</param>
            <returns>The destination mailbox.</returns>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectInbox("inbox");
            inbox.CopyMessage(1,"Read Messages");
            //Copies message 1 to Read Messages mailbox.
            imap.Disconnect();
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectInbox("inbox")
            inbox.CopyMessage(1,"Read Messages")
            'Copies message 1 to Read Messages mailbox.
            imap.Disconnect()
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectInbox("inbox");
            inbox.CopyMessage(1,"Read Messages");
            //Copies message 1 to Read Messages mailbox.
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Append(System.String)">
            <summary>
            Appends the provided message to the mailbox.
            </summary>
            <param name="messageLiteral">The message in a Rfc822 compliant format.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Append(System.String,ActiveUp.Net.Mail.FlagCollection)">
            <summary>
            Appends the provided message to the mailbox.
            </summary>
            <param name="messageLiteral">The message in a Rfc822 compliant format.</param>
            <param name="flags">Flags to be set for the message.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Append(System.String,ActiveUp.Net.Mail.FlagCollection,System.DateTime)">
            <summary>
            Appends the provided message to the mailbox.
            </summary>
            <param name="messageLiteral">The message in a Rfc822 compliant format.</param>
            <param name="flags">Flags to be set for the message.</param>
            <param name="dateTime">The internal date to be set for the message.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Append(ActiveUp.Net.Mail.Message)">
            <summary>
            Appends the provided message to the mailbox.
            </summary>
            <param name="message">The message to be appended.</param>
            <example>
            <code>
            C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            Imap4Client imap = new Imap4Client();
            Mailbox inbox = imap.SelectMailbox("inbox");
            inbox.Append(message);
            imap.Disconnect();
             
            VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim imap As New Imap4Client
            Dim inbox As Mailbox = imap.SelectMailbox("inbox")
            inbox.Append(message)
            imap.Disconnect()
              
            JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            var imap:Imap4Client = new Imap4Client();
            var inbox:Mailbox = imap.SelectMailbox("inbox");
            inbox.Append(message);
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Append(ActiveUp.Net.Mail.Message,ActiveUp.Net.Mail.FlagCollection)">
            <summary>
            Appends the provided message to the mailbox.
            </summary>
            <param name="message">The message to be appended.</param>
            <param name="flags">Flags to be set for the message.</param>
            <example>
            <code>
            C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            FlagCollection flags = new FlagCollection();
            flags.Add("Read");
            
            Imap4Client imap = new Imap4Client();
            Mailbox inbox = imap.SelectMailbox("Read Messages");
            inbox.Append(message,flags);
            imap.Disconnect();
             
            VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim flags As New FlagCollection
            flags.Add("Read")
             
            Dim imap As New Imap4Client
            Dim inbox As Mailbox = imap.SelectMailbox("Read Messages")
            inbox.Append(message,flags)
            imap.Disconnect()
              
            JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            var flags:FlagCollection = new FlagCollection();
            flags.Add("Read");
             
            var imap:Imap4Client = new Imap4Client();
            var inbox:Mailbox = imap.SelectMailbox("Read Messages");
            inbox.Append(message,flags);
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Append(ActiveUp.Net.Mail.Message,ActiveUp.Net.Mail.FlagCollection,System.DateTime)">
            <summary>
            Appends the provided message to the mailbox.
            </summary>
            <param name="message">The message to be appended.</param>
            <param name="flags">Flags to be set for the message.</param>
            <param name="dateTime">The internal date to be set for the message.</param>
            <example>
            <code>
            C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            FlagCollection flags = new FlagCollection();
            flags.Add("Read");
            
            Imap4Client imap = new Imap4Client();
            Mailbox inbox = imap.SelectMailbox("Read Messages");
            inbox.Append(message,flags,System.DateTime.Now);
            imap.Disconnect();
             
            VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim flags As New FlagCollection
            flags.Add("Read")
             
            Dim imap As New Imap4Client
            Dim inbox As Mailbox = imap.SelectMailbox("Read Messages")
            inbox.Append(message,flags,System.DateTime.Now)
            imap.Disconnect()
              
            JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            var flags:FlagCollection = new FlagCollection();
            flags.Add("Read");
             
            var imap:Imap4Client = new Imap4Client();
            var inbox:Mailbox = imap.SelectMailbox("Read Messages");
            inbox.Append(message,flags,System.DateTime.Now);
            imap.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Append(System.Byte[])">
            <summary>
            Appends the provided message to the mailbox.
            </summary>
            <param name="messageData">The message in a Rfc822 compliant format.</param>
            <example><see cref="M:ActiveUp.Net.Mail.Mailbox.Append(System.String)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Append(System.Byte[],ActiveUp.Net.Mail.FlagCollection)">
            <summary>
            Appends the provided message to the mailbox.
            </summary>
            <param name="messageData">The message in a Rfc822 compliant format.</param>
            <param name="flags">Flags to be set for the message.</param>
            <example><see cref="M:ActiveUp.Net.Mail.Mailbox.Append(System.String)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Append(System.Byte[],ActiveUp.Net.Mail.FlagCollection,System.DateTime)">
            <summary>
            Appends the provided message to the mailbox.
            </summary>
            <param name="messageData">The message in a Rfc822 compliant format.</param>
            <param name="flags">Flags to be set for the message.</param>
            <param name="dateTime">The internal date to be set for the message.</param>
            <example><see cref="M:ActiveUp.Net.Mail.Mailbox.Append(System.String)"/></example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Mailbox.Empty(System.Boolean)">
            <summary>
            Empties the mailbox.
            </summary>
            <param name="expunge">If true, all messages are permanently removed. Otherwise they are all marked with the Deleted flag.</param>
            <example>
            <code>
            C#
             
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            Mailbox inbox = imap.SelectInbox("inbox");
            inbox.Empty(true);
            //Messages from inbox are permanently removed.
            imap.Disconnect();
            
            VB.NET
             
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com")
            imap.Login("jdoe1234","tanstaaf")
            Dim inbox As Mailbox = imap.SelectInbox("inbox")
            inbox.Empty(True)
            'Messages from inbox are permanently removed.
            imap.Disconnect()
            
            JScript.NET
             
            var imap:Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com");
            imap.Login("jdoe1234","tanstaaf");
            var inbox:Mailbox = imap.SelectInbox("inbox");
            inbox.Empty(true);
            //Messages from inbox are permanently removed.
            imap.Disconnect();
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ActiveUp.Net.Mail.Mailbox.DeleteMessage(System.Int32,System.Boolean)" -->
        <member name="P:ActiveUp.Net.Mail.Mailbox.SourceClient">
            <summary>
            The Imap4Client object that will be used to perform commands on the server.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Mailbox.Name">
            <summary>
            The full (hierarchical) name of the mailbox.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Mailbox.ShortName">
            <summary>
            The name of the mailbox, without hierarchy.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Mailbox.Recent">
            <summary>
            The amount of recent messages (messages that have been added since this mailbox was last checked).
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Mailbox.MessageCount">
            <summary>
            The amount of messages in the mailbox.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Mailbox.FirstUnseen">
            <summary>
            The ordinal position of the first unseen message in the mailbox.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Mailbox.UidValidity">
            <summary>
            The Uid Validity number. This number allows to check if Unique Identifiers have changed since the mailbox was last checked.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Mailbox.ApplicableFlags">
            <summary>
            Flags that are applicable in this mailbox.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Mailbox.PermanentFlags">
            <summary>
            Flags that the client can permanently set in this mailbox.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Mailbox.Permission">
            <summary>
            The mailbox's permission (ReadWrite or ReadOnly)
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Mailbox.SubMailboxes">
            <summary>
            The mailbox's child mailboxes.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Mailbox.Fetch">
            <summary>
            The mailbox's fetching utility.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MailboxCollection">
            <summary>
            Represents a collection of Mailboxes.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.MailboxCollection.Add(ActiveUp.Net.Mail.Mailbox)">
            <summary>
            Adds the provided mailbox to the collection.
            </summary>
            <param name="mailbox">The mailbox to be added.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.MailboxCollection.Item(System.Int32)">
            <summary>
            Returns the mailbox at index [index] in the collection.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MailboxCollection.Item(System.String)">
            <summary>
            Returns the mailbox with the specified name in the collection.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MailboxPermission">
            <summary>
            Represents a mailbox's permission.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.MailboxPermission.ReadOnly">
            <summary>
            Mailbox is opened in [READ-ONLY] mode.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.MailboxPermission.ReadWrite">
            <summary>
            Mailbox is opened in [READ-WRITE] mode.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.MailboxPermission.Unknown">
            <summary>
            Mailbox's permission is unknown.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Merger">
            <summary>
            Merge the messages and it's properties with datasources.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.#ctor(ActiveUp.Net.Mail.Templater)">
            <summary>
            Instanciante the merger and auto-fill it's properties with templater data.
            </summary>
            <param name="templater">The Templater object that contains the data.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeText(System.String,System.Object,System.Boolean)">
            <summary>
            Merge a text string with the specified datasource.
            </summary>
            <param name="text">The text to bind.</param>
            <param name="dataSource">The datasource to use.</param>
            <param name="repeat">Specify if you want the text to be repeated with each item in the datasource.</param>
            <returns>The merged text string.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeText(System.String,System.Object)">
            <summary>
            Merge a text string with the specified item.
            </summary>
            <param name="text">The text string to merge.</param>
            <param name="item">The item to use for merging.</param>
            <returns>The merged text string.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeMessage">
            <summary>
            Merge a message with the specified item.
            </summary>
            <param name="message">The Message object to merge.</param>
            <param name="item">The item to use for merging.</param>
            <returns>The merged the message.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeMessage(ActiveUp.Net.Mail.Message,System.Object)">
            <summary>
            Merge a message with the specified item.
            </summary>
            <param name="message">The Message object to merge.</param>
            <param name="item">The item to use for merging.</param>
            <returns>The merged the message.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.CleanUnusedTags(System.String)">
            <summary>
            Clean up unused tags in the message.
            </summary>
            <param name="Body">The body text to use for merging.</param>
            <returns>The merged message.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.ProcessIDs(System.String,System.Object,System.Boolean)">
            <summary>
            Process IDs in the message.
            </summary>
            <param name="Body">The body text to use for merging.</param>
            <returns>The merged message.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeMessage(System.Object)">
            <summary>
            Merge the Message property with the specified datasource.
            </summary>
            <param name="dataSource">The datasource to use for merging.</param>
            <returns>The merged message.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeMessage(System.Object,System.Boolean)">
            <summary>
            Merge the Message property with the specified datasource.
            </summary>
            <param name="dataSource">The datasource to use for merging.</param>
            <param name="repeat">Specify if the text template will be repeated or not.</param>
            <returns>The merged message.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeMessage(ActiveUp.Net.Mail.Message,System.Object,System.Boolean)">
            <summary>
            Merge a Message object with the specified datasource.
            </summary>
            <param name="message">The message to merge.</param>
            <param name="dataSource">The datasource to use for merging.</param>
            <param name="repeat">Specify if the text template will be repeated or not.</param>
            <returns>The merge message.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeCustom(System.Collections.Hashtable,System.Object,System.Boolean)">
            <summary>
            Merge the custom collection with the specified datasource.
            </summary>
            <param name="customcollection">The custom collection to use for merging.</param>
            <param name="dataSource">The datasource to use for merging.</param>
            <param name="repeat">Specify if the texts will be repeated or not.</param>
            <returns>The merged Custom collection</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeCustom(System.Collections.Hashtable,System.Object)">
            <summary>
            Merge the custom collection with the specified datasource.
            </summary>
            <param name="customcollection">The custom collection to use for merging.</param>
            <param name="dataSource">The datasource to use for merging.</param>
            <returns>The merged Custom collection</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeCustomItem(System.Collections.Hashtable,System.Object)">
            <summary>
            Merge the custom collection with the specified item.
            </summary>
            <param name="customcollection">The custom collection to use for merging.</param>
            <param name="item">The item to use for merging.</param>
            <returns>The merged custom colection.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeAddresses(ActiveUp.Net.Mail.AddressCollection,System.Object,System.Boolean)">
            <summary>
            Merge the Address collection with the specified datasource.
            </summary>
            <param name="addresses">The addresses to merge.</param>
            <param name="dataSource">The datasource to use for merging.</param>
            <param name="repeat">Specify if the texts will be repeated or not.</param>
            <returns>The merged Address collection</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeAddress(ActiveUp.Net.Mail.Address,System.Object)">
            <summary>
            Merge the Address collection with the specified datasource.
            </summary>
            <param name="address">The address to merge.</param>
            <param name="dataSource">The datasource to use for merging.</param>
            <returns>The merged Address collection</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeAddresses(ActiveUp.Net.Mail.AddressCollection,System.Object)">
            <summary>
            Merge the address collection with the specified item.
            </summary>
            <param name="addresses">The address to merge.</param>
            <param name="item">The item to use for merging.</param>
            <returns>The merged Address colection.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeListTemplate(System.String,System.Object)">
            <summary>
            Merge the specified list template with the datasource.
            </summary>
            <param name="name">The name of the list template.</param>
            <param name="dataSource">The datasource to merge with.</param>
            <returns>The merged message.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeListTemplate(System.String,ActiveUp.Net.Mail.ListTemplateCollection,System.Object)">
            <summary>
            Merge the specified list template with the datasource.
            </summary>
            <param name="name">The name of the list template.</param>
            <param name="listTemplates">The ListTemplates to use.</param>
            <param name="dataSource">The datasource to merge with.</param>
            <returns>The merged message.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeListTemplate(ActiveUp.Net.Mail.Message,System.String,ActiveUp.Net.Mail.ListTemplateCollection,System.Object)">
            <summary>
            Merge the specified list template with the datasource.
            </summary>
            <param name="message">The message that contain the list template field.</param>
            <param name="name">The name if the list template.</param>
            <param name="listTemplates">The ListTemplates to use.</param>
            <param name="dataSource">The datasource to merge with.</param>
            <returns>The merged message.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeCollection(ActiveUp.Net.Mail.Message,System.Object)">
            <summary>
            Create a collection of message based on the merging of the message and a datasource.
            </summary>
            <param name="message">The message to use as a base for merging.</param>
            <param name="dataSource">The datasource to use for merging.</param>
            <returns>The merged MessageCollection.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeCollection(System.Object)">
            <summary>
            Create a collection of message based on the merging of the Message property and a datasource.
            </summary>
            <param name="dataSource">The datasource to use for merging.</param>
            <returns>The merged MessageCollection.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeCollection(System.Object,System.Boolean)">
            <summary>
            Create a collection of message based on the merging of the message and a datasource.
            </summary>
            <param name="dataSource">The datasource to use for merging.</param>
            <param name="send">Specify if you want to send the message when merged.</param>
            <returns>The merged MessageCollection.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.MergeCollection(ActiveUp.Net.Mail.Message,System.Object,System.Boolean)">
            <summary>
            Create a collection of message based on the merging of the message and a datasource.
            </summary>
            <param name="message">The message to use as a base for merging.</param>
            <param name="dataSource">The datasource to use for merging.</param>
            <param name="send">Specify if you want to send the message when merged.</param>
            <returns>The merged MessageCollection.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.GetFields(System.String)">
            <summary>
            Get all fields contained in the specified string.
            </summary>
            <param name="source">The string containing the fields.</param>
            <returns>An arraylist filled with the fields.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.GetEnumerator(System.Object)">
            <summary>
            Get the enumerator from the specified data source.
            </summary>
            <param name="dataSource">The data source.</param>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.ReplaceField(System.String,System.String,System.String)">
            <summary>
            Replace all specified fields of the specified string with the specified replacement string.
            </summary>
            <param name="source">The source string.</param>
            <param name="field">The field to search for.</param>
            <param name="replacement">The replacement.</param>
            <returns>The string with replaced content.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.ReplaceField(ActiveUp.Net.Mail.Message,System.String,System.String)">
            <summary>
            Replace all specified fields of the message body with the specified replacement.
            </summary>
            <param name="message">The message.</param>
            <param name="field">The field to search for.</param>
            <param name="replacement">The replacement.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Merger.ReplaceInAddresses(ActiveUp.Net.Mail.AddressCollection,System.String,System.String)">
            <summary>
            Replace in an AddressCollection.
            </summary>
            <param name="addresses">The AddressCollection.</param>
            <param name="field">The field.</param>
            <param name="replacement">The replacement string.</param>
            <returns>The AddressCollection with replaced content.</returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.Merger.RemoveUnusedTags">
            <summary>
            Whether to remove unused tags in the message after merging the datasource.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Merger.Logger">
            <summary>
            Gets or sets the logging settings.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Merger.Regions">
            <summary>
            Gets or sets the region collection.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Merger.Conditions">
            <summary>
            Gets or sets the conditional collection.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Merger.FieldsFormats">
            <summary>
            Gets or sets the fields format options.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Merger.SmtpServers">
            <summary>
            Gets or sets the SMTP servers.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Merger.Message">
            <summary>
            Gets or sets the logging settings.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Merger.ListTemplates">
            <summary>
            Gets or sets the List templates.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Message">
            <summary>
            Message Object.
            Represents a parsed e-mail message.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.ToMimePart">
            <summary>
            Converts a message to a message/rfc822 type MIME part, with a Content-Disposition set to "attachment".
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.ToMimeString">
            <summary>
            The MIME representation of the message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.ToMimeString(System.Boolean)">
            <summary>
            The MIME representation of the message.
            </summary>
            <param name="removeBlindCopies">if set to <c>true</c> remove blind copies (BCC) from the header.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.CheckBuiltMimePartTree">
            <summary>
            Checks the built MIME part tree.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.BuildMimePartTree">
            <summary>
            Creates the MIME part structure. This method MUST be invoked before sending, storing, signing, encrypting, or invoking ToMimeString method.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.Send(System.String)">
             <summary>
             Sends the message using the specified host as the mail exchange server.
             </summary>
             <param name="host">Host to be used to send the message.</param>
             <example>
             <code>
             C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            message.Send("mail.myhost.com");
             
             VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            message.Send("mail.myhost.com")
              
             JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            message.Send("mail.myhost.com");
             </code>
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.Send(ActiveUp.Net.Mail.ServerCollection)">
             <summary>
             Sends the message using the specified host as the mail exchange server.
             </summary>
             <param name="servers">Servers to be used to send the message (in preference order).</param>
             <example>
             <code>
             C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            ServerCollection servers = new ServerCollection();
            servers.Add("mail.myhost.com",25);
            servers.Add("mail2.myhost.com",25);
            
            message.Send(servers);
             
             VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim servers As New ServerCollection
            servers.Add("mail.myhost.com",25)
            servers.Add("mail2.myhost.com",25)
            
            message.Send(servers)
              
             JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            var servers:ServerCollection = new ServerCollection();
            servers.Add("mail.myhost.com",25);
            servers.Add("mail2.myhost.com",25);
            
            message.Send(servers);
             </code>
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.Send(System.String,System.Int32)">
             <summary>
             Sends the message using the specified host as mail exchange and the specified port.
             </summary>
             <param name="host">Host to be used to send the message.</param>
             <param name="port">Port to be used to connect to the specified host.</param>
             <example>
             <code>
             C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            message.Send("mail.myhost.com",8504);
             
             VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            message.Send("mail.myhost.com",8504)
              
             JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            message.Send("mail.myhost.com",8504);
             </code>
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.Send(System.String,System.String,System.String,ActiveUp.Net.Mail.SaslMechanism)">
             <summary>
             Sends the message using the specified host as mail exchange.
             A secure SASL authentication is performed according to the specified SASL mechanism.
             </summary>
             <param name="host">Host to be used to send the message.</param>
             <param name="username">Username to be used for the authentication process.</param>
             <param name="password">Password to be used for the authentication process.</param>
             <param name="mechanism">SASL Mechanism to be used for authentication.</param>
             <example>
             <code>
             C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            message.Send("mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5);
             
             VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            message.Send("mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5)
              
             JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            message.Send("mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5);
             </code>
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.Send(System.String,System.Int32,System.String,System.String,ActiveUp.Net.Mail.SaslMechanism)">
             <summary>
             Sends the message using the specified host as mail exchange and the specified port.
             A simple Login authentication is performed.
             </summary>
             <param name="host">Host to be used to send the message.</param>
             <param name="username">Username to be used for the authentication process.</param>
             <param name="password">Password to be used for the authentication process.</param>
             <param name="port">Port to be used to connect to the specified host.</param>
             <example>
             <code>
             C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            message.Send("mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,8504);
             
             VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            message.Send("mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,8504)
              
             JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            message.Send("mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,8504);
             </code>
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.DirectSend">
            <summary>
            Sends the given message using the Direct Mailing method. The client connects to each recipient's mail exchange server and delivers the message.
            </summary>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            message.DirectSend();
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            message.DirectSend()
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            message.DirectSend();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.DirectSend(System.String,System.Int32)">
            <summary>
            Sends the message using the specified host as dns server on the specified port.
            </summary>
            <param name="host">The host to be used.</param>
            <param name="port">The port to be used.</param>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            message.DirectSend("ns1.dnsserver.com",53);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            message.DirectSend("ns1.dnsserver.com",53)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            message.DirectSend("ns1.dnsserver.com",53);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.DirectSend(System.String)">
            <summary>
            Sends the message using the specified host as dns server.
            </summary>
            <param name="host">The host to be used.</param>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            message.DirectSend("ns1.dnsserver.com");
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            message.DirectSend("ns1.dnsserver.com")
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            message.DirectSend("ns1.dnsserver.com");
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.DirectSend(ActiveUp.Net.Mail.ServerCollection)">
            <summary>
            Sends the message using the specified DNS servers to get mail exchange servers addresses.
            </summary>
            <param name="dnsServers">Servers to be used (in preference order).</param>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            ServerCollection servers = new ServerCollection();
            servers.Add("ns1.dnsserver.com",53);
            servers.Add("ns2.dnsserver.com",53);
            
            message.DirectSend(servers);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim servers As New ServerCollection
            servers.Add("ns1.dnsserver.com",53)
            servers.Add("ns2.dnsserver.com",53)
            
            message.DirectSend(servers)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var servers:ServerCollection = new ServerCollection();
            servers.Add("ns1.dnsserver.com",53);
            servers.Add("ns2.dnsserver.com",53);
            
            message.DirectSend(servers);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.Append(ActiveUp.Net.Mail.Mailbox)">
             <summary>
             Appends the message to the given mailbox.
             </summary>
             <remarks>The mailbox's sourceclient has to be connected.</remarks>
             <param name="imapMailbox">The mailbox the message has to be appended to.</param>
             <example>
             <code>
             C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            Imap4Client imap = new Imap4Client();
            imap.Connect("mail.myhost.com",8505);
            Mailbox inbox = imap.SelectMailbox("inbox");
            
            message.Append(inbox);
            
            imap.Close();
            imap.Disconnect();
             
             VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim imap As New Imap4Client
            imap.Connect("mail.myhost.com",8505)
            Dim inbox As Mailbox = imap.SelectMailbox("inbox")
            
            message.Append(inbox)
            
            imap.Close()
            imap.Disconnect()
              
             JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            var imap:Imap4Client = new Imap4Client();
            imap.Connect("mail.myhost.com",8505);
            var inbox:Mailbox = imap.SelectMailbox("inbox");
            
            message.Append(inbox);
            
            imap.Close();
            imap.Disconnect();
             </code>
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.SendQueued(System.String,ActiveUp.Net.Mail.QueuingService)">
            <summary>
            Sends the message using the specified queuing service and spool directory.
            </summary>
            <param name="spoolDirectory">The full path to the full directory.</param>
            <param name="queuingService">The queuing service to use.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.StoreToFile(System.String,System.Boolean)">
             <summary>
             Stores the message to the specified file using a temp file.
             </summary>
             <param name="FileName">Path and filename to store the message in.</param>
             <returns>The path the message has been stored at.</returns>
             <example>
             This retrieves the first message's from the remote POP server and stores it on the disk.<br />
             You can read it back using the ParserMessage() method in the Parser class.
             <code>
             C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            message.StoreToFile("C:\\messages\\outbox\\tobesent.eml", true);
             
             VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            message.StoreToFile("C:\messages\outbox\tobesent.eml", true)
             
             JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            message.StoreToFile("C:\\messages\\outbox\\tobesent.eml", true);
             </code>
             </example> 
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.StoreToFile(System.String)">
             <summary>
             Stores the message to the specified path.
             </summary>
             <param name="path">Path to store the message at.</param>
             <returns>The path the message has been stored at.</returns>
             <example>
             This retrieves the first message's from the remote POP server and stores it on the disk.<br />
             You can read it back using the ParserMessage() method in the Parser class.
             <code>
             C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            message.StoreToFile("C:\\messages\\outbox\\tobesent.eml");
             
             VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            message.StoreToFile("C:\messages\outbox\tobesent.eml")
             
             JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.BodyHtml.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            message.StoreToFile("C:\\messages\\outbox\\tobesent.eml");
             </code>
             </example> 
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.GetBounceStatus">
            <summary>
            Detects if a message is a delivery failure notification.
            This method uses the default signatures containing in an internal ressource file.
            </summary>
            <returns>A BounceStatus object containing the level of revelance and if 100% identified, the erroneous email address.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.GetBounceStatus(System.String)">
            <summary>
            Detects if a message is a delivery failure notification.
            This method uses the default signatures containing in an internal ressource file.
            </summary>
            <remarks>
            Signature files are XML files formatted as follows : 
            
            &lt;?xml version='1.0'?&gt;
            &lt;signatures&gt;
            	&lt;signature from=&quot;postmaster&quot; subject=&quot;Undeliverable Mail&quot; body=&quot;Unknown user&quot; search=&quot;&quot; />
            	...
            &lt;/signatures&gt;
            </remarks>
            <returns>A BounceStatus object containing the level of revelance and if 100% identified, the erroneous email address.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Message.Clone">
            <summary>
            Gets a real copy of the actual message object. This will not return a reference.
            </summary>
            <returns>The new Message object.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ActiveUp.Net.Mail.Message.Attachments" -->
        <member name="P:ActiveUp.Net.Mail.Message.CustomCollection">
            <summary>
            Collection containing custom string to be replaced.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Message.Signatures">
            <summary>
            Container for all the message's signature.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Message.HasDomainKeySignature">
            <summary>
            Indicates whether the message has at least one DomainKey signature.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Message.HasSmimeSignature">
            <summary>
            Indicates whether the message has been signed using a S/MIME opaque (enveloping) signature.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Message.HasSmimeDetachedSignature">
            <summary>
            Indicates whether the message has been signed using a S/MIME detached signature (using multipart/signed).
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Message.IsSmimeEncrypted">
            <summary>
            Indicates whether the message has been encrypted using S/MIME.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ActiveUp.Net.Mail.Message.EmbeddedObjects" -->
        <member name="P:ActiveUp.Net.Mail.Message.SubMessages">
            <summary>
            Contains messages that were included as message/rfc822 parts.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Message.LeafMimeParts">
            <summary>
            Contains all parts that are not of "multipart" MIME type.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Message.UnknownDispositionMimeParts">
            <summary>
            Contains all parts for which no Content-Disposition header was found. Disposition is left to the final agent.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Message.PartTreeRoot">
            <summary>
            A reference to the root of this message's part tree.
            </summary>
            <example>
            For multipart/alternative messages, you can access the two bodies via the Message.PartTreeRoot.SubParts property, as well as via the Message.BodyHtml and Message.BodyText properties.
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ActiveUp.Net.Mail.Message.BodyText" -->
        <!-- Badly formed XML comment ignored for member "P:ActiveUp.Net.Mail.Message.BodyHtml" -->
        <member name="P:ActiveUp.Net.Mail.Message.Size">
            <summary>
            The size of the RFC 2822 formatted message in octets.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Message.Summary">
            <summary>
            Returns a printable HTML formated summary of the message.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MessageCollection">
            <summary>
            Represents a collection of Message objects
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.MessageCollection.Add(ActiveUp.Net.Mail.Message)">
            <summary>
            Adds a Message object to the collection. Can be useful to use the GetBindableTable() method with message from different sources.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:ActiveUp.Net.Mail.MessageCollection.GetBindableTable(System.String)">
            <summary>
            Creates a System.Data.DataTable containing the messages in the MessageCollection object with the requested columns.
            </summary>
            <param name="args">String containing sensitive words.
            This string is being parsed and columns added according to the words it contains.</param>
            <remarks>
            The column order is predefined and cannot be set.
            </remarks>
            <returns>The generated System.Data.DataTable</returns>
            <example>
            <code>
            C#
            
            MessageCollection messages = new MessageCollection();
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","jdoe1234","tanstaaf");
            
            for(int i=1;i&lt;=pop.MessageCount;i++) messages.Add(pop.RetrieveMessageObject(i));
            
            myDataGrid.DataSource = messages.GetBindableTable("subectsenderdate");
            myDataGrid.DataBind();
            
            VB.NET
            
            Dim messages As New MessageCollection
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","jdoe1234","tanstaaf")
            
            Dim i As Integer
            For i = 1 To pop.MessageCount
            	messages.Add(pop.RetrieveMessageObject(i))
            Next i
            
            myDataGrid.DataSource = messages.GetBindableTable("subectsenderdate")
            myDataGrid.DataBind()
            
            JScript.NET
            
            var messages:MessageCollection = new MessageCollection();
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","jdoe1234","tanstaaf");
            
            for(int i=1;i&lt;=pop.MessageCount;i++) messages.Add(pop.RetrieveMessageObject(i));
            
            myDataGrid.DataSource = messages.GetBindableTable("subectsenderdate");
            myDataGrid.DataBind();
            </code>
            </example> 
        </member>
        <member name="M:ActiveUp.Net.Mail.MessageCollection.Send">
             <summary>
             Sends each message using the Direct Mailing technique (SMTP connection with every recipient's mail exchange server for delivery).
             MX Records are cached for faster operation.
             </summary>
             <example>
             <code>
             C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            Message message1 = new Message();
            message1.From = new Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclark@blurdybloop.com","Dave Clark");
            message1.Subject = "correction";
            message1.Attachments.Add("C:\\myfile.doc");
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            messages.Send();
             
             VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim message1 As New Message
            message1.From = new Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclark@blurdybloop.com","Dave Clark")
            message1.Subject = "correction"
            message1.Attachments.Add("C:\myfile.doc")
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            messages.Send()
              
             JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            var message1:Message = new Message();
            message1.From = new Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclark@blurdybloop.com","Dave Clark");
            message1.Subject = "correction";
            message1.Attachments.Add("C:\\myfile.doc");
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            messages.Send();
             </code>
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.MessageCollection.Send(System.String)">
             <summary>
             Sends all messages using the specified host.
             </summary>
             <param name="host">Address of the server to be used.</param>
             <example>
             <code>
             C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            Message message1 = new Message();
            message1.From = new Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclark@blurdybloop.com","Dave Clark");
            message1.Subject = "correction";
            message1.Attachments.Add("C:\\myfile.doc");
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            messages.Send("mail.myhost.com");
             
             VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim message1 As New Message
            message1.From = new Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclark@blurdybloop.com","Dave Clark")
            message1.Subject = "correction"
            message1.Attachments.Add("C:\myfile.doc")
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            messages.Send("mail.myhost.com")
              
             JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            var message1:Message = new Message();
            message1.From = new Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclark@blurdybloop.com","Dave Clark");
            message1.Subject = "correction";
            message1.Attachments.Add("C:\\myfile.doc");
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            messages.Send("mail.myhost.com");
             </code>
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.MessageCollection.Send(ActiveUp.Net.Mail.ServerCollection)">
             <summary>
             Sends all messages using the specified host.
             </summary>
             <param name="servers">Servers to be used to send the message (in preference order).</param>
             <example>
             <code>
             C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            Message message1 = new Message();
            message1.From = new Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclark@blurdybloop.com","Dave Clark");
            message1.Subject = "correction";
            message1.Attachments.Add("C:\\myfile.doc");
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            ServerCollection servers = new ServerCollection();
            servers.Add("mail.myhost.com",25);
            servers.Add("mail2.myhost.com",25);
            
            messages.Send(servers);
             
             VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim message1 As New Message
            message1.From = new Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclark@blurdybloop.com","Dave Clark")
            message1.Subject = "correction"
            message1.Attachments.Add("C:\myfile.doc")
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            Dim servers As New ServerCollection
            servers.Add("mail.myhost.com",25)
            servers.Add("mail2.myhost.com",25)
            
            messages.Send(servers)
              
             JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            var message1:Message = new Message();
            message1.From = new Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclark@blurdybloop.com","Dave Clark");
            message1.Subject = "correction";
            message1.Attachments.Add("C:\\myfile.doc");
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            var servers:ServerCollection = new ServerCollection();
            servers.Add("mail.myhost.com",25);
            servers.Add("mail2.myhost.com",25);
            
            messages.Send(servers);
             </code>
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.MessageCollection.Send(System.String,System.Int32)">
             <summary>
             Sends all messages using the specified host and port.
             </summary>
             <param name="host">Address of the server to be used.</param>
             <param name="port">Port to be used.</param>
             <example>
             <code>
             C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            Message message1 = new Message();
            message1.From = new Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclark@blurdybloop.com","Dave Clark");
            message1.Subject = "correction";
            message1.Attachments.Add("C:\\myfile.doc");
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            messages.Send("mail.myhost.com",8504);
             
             VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim message1 As New Message
            message1.From = new Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclark@blurdybloop.com","Dave Clark")
            message1.Subject = "correction"
            message1.Attachments.Add("C:\myfile.doc")
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            messages.Send("mail.myhost.com",8504)
              
             JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            var message1:Message = new Message();
            message1.From = new Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclark@blurdybloop.com","Dave Clark");
            message1.Subject = "correction";
            message1.Attachments.Add("C:\\myfile.doc");
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            messages.Send("mail.myhost.com",8504);
             </code>
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.MessageCollection.Send(System.String,System.String,System.String,ActiveUp.Net.Mail.SaslMechanism)">
             <summary>
             Sends the message using the specified host and port.
             A secure SASL authentication is performed according to the specified SASL mechanism.
             </summary>
             <param name="host">Host to be used to send the message.</param>
             <param name="username">Username to be used for the authentication process.</param>
             <param name="password">Password to be used for the authentication process.</param>
             <example>
             <code>
             C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            Message message1 = new Message();
            message1.From = new Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclark@blurdybloop.com","Dave Clark");
            message1.Subject = "correction";
            message1.Attachments.Add("C:\\myfile.doc");
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            messages.Send("mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5);
             
             VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim message1 As New Message
            message1.From = new Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclark@blurdybloop.com","Dave Clark")
            message1.Subject = "correction"
            message1.Attachments.Add("C:\myfile.doc")
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            messages.Send("mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5)
              
             JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            var message1:Message = new Message();
            message1.From = new Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclark@blurdybloop.com","Dave Clark");
            message1.Subject = "correction";
            message1.Attachments.Add("C:\\myfile.doc");
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            messages.Send("mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5);
             </code>
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.MessageCollection.Send(System.String,System.String,System.String,ActiveUp.Net.Mail.SaslMechanism,ActiveUp.Net.Mail.SmtpExceptionCollection@)">
             <summary>
             Sends the message using the specified host and port.
             A secure SASL authentication is performed according to the specified SASL mechanism.
             </summary>
             <param name="host">Host to be used to send the message.</param>
             <param name="username">Username to be used for the authentication process.</param>
             <param name="password">Password to be used for the authentication process.</param>
             <param name="mechanism">SASL Mechanism to be used for authentication.</param>
             <param name="errors">Reference to an SmtpException Collection where occuring errors should be stored.</param>
             <example>
             <code>
             C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            Message message1 = new Message();
            message1.From = new Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclark@blurdybloop.com","Dave Clark");
            message1.Subject = "correction";
            message1.Attachments.Add("C:\\myfile.doc");
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            messages.Send("mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,myerrorCollection);
             
             VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim message1 As New Message
            message1.From = new Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclark@blurdybloop.com","Dave Clark")
            message1.Subject = "correction"
            message1.Attachments.Add("C:\myfile.doc")
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            messages.Send("mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,myerrorCollection)
              
             JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            var message1:Message = new Message();
            message1.From = new Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclark@blurdybloop.com","Dave Clark");
            message1.Subject = "correction";
            message1.Attachments.Add("C:\\myfile.doc");
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            messages.Send("mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,myerrorCollection);
             </code>
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.MessageCollection.Send(System.String,System.String,System.String,ActiveUp.Net.Mail.SaslMechanism,System.Int32)">
             <summary>
             Sends the message using the specified host and port.
             A simple LOGIN authentication is performed.
             </summary>
             <param name="host">Host to be used to send the message.</param>
             <param name="username">Username to be used for the authentication process.</param>
             <param name="password">Password to be used for the authentication process.</param>
             <param name="port">Port to be used to connect to the specified host.</param>
             <example>
             <code>
             C#
             
            Message message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            Message message1 = new Message();
            message1.From = new Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclark@blurdybloop.com","Dave Clark");
            message1.Subject = "correction";
            message1.Attachments.Add("C:\\myfile.doc");
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            messages.Send("mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,8504);
             
             VB.NET
             
            Dim message As New Message
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.Subject = "hey!"
            message.Attachments.Add("C:\myfile.doc")
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim message1 As New Message
            message1.From = new Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclark@blurdybloop.com","Dave Clark")
            message1.Subject = "correction"
            message1.Attachments.Add("C:\myfile.doc")
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John."
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            messages.Send("mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,8504)
              
             JScript.NET
             
            var message:Message = new Message();
            message.From = new Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.Subject = "hey!";
            message.Attachments.Add("C:\\myfile.doc");
            message.HtmlBody.Text = "As promised, the requested document.&lt;br />&lt;br />Regards,&lt;br>John."
            
            var message1:Message = new Message();
            message1.From = new Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclark@blurdybloop.com","Dave Clark");
            message1.Subject = "correction";
            message1.Attachments.Add("C:\\myfile.doc");
            message1.HtmlBody.Text = "Here is what I sent to Mike.&lt;br />&lt;br />Regards,&lt;br>John.";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            messages.Send("mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,8504);
             </code>
             </example>
        </member>
        <member name="P:ActiveUp.Net.Mail.MessageCollection.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MessagePriority">
            <summary>
            The message priorities.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.MessagePriority.High">
            <summary>
            The message has high priority.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.MessagePriority.Low">
            <summary>
            The message has low priority.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.MessagePriority.Normal">
            <summary>
            The message has normal priority.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.MessagePriority.Unknown">
            <summary>
            The message priority couldn't be parsed.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MimeBody">
            <summary>
            Represents a message's body.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimeBody.Format">
            <summary>
            The type of the body.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimeBody.Charset">
            <summary>
            The character set (encoding) of the body.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimeBody.Text">
            <summary>
            The body's text (content).
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MimeBody.TextStripped">
            <summary>
            The body's text (content) stripped (without HTML tags).
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MimeTypesHelper">
            <summary>
            Provides static method to help manipulate MIME parts.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.MimeTypesHelper.GetMimeqType(System.String)">
            <summary>
            Returns the know MIME type string based on the extension.
            </summary>
            <param name="extension">The extension of the file.</param>
            <returns>A string that define the MIME type</returns>
        </member>
        <member name="T:ActiveUp.Net.Mail.MxRecord">
            <summary>
            Represents a MX dns record.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.MxRecord.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.MxRecord.#ctor(System.String,System.Int32)">
            <summary>
            Creates a MX record based on the exchange name and preference level.
            </summary>
            <param name="exchange"></param>
            <param name="preference"></param>
        </member>
        <member name="P:ActiveUp.Net.Mail.MxRecord.Exchange">
            <summary>
            The exchange (host).
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.MxRecord.Preference">
            <summary>
            The preference level.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.MxRecordCollection">
            <summary>
            Contains Mx Records.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.MxRecordCollection.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.MxRecordCollection.Add(ActiveUp.Net.Mail.MxRecord)">
            <summary>
            Add a MxRecord object in the collection.
            </summary>
            <param name="mxRecord">The MxRecord object.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.MxRecordCollection.Add(System.String,System.Int32)">
            <summary>
            Add a MxRecord in the collection specifing it's exchange name and preference level.
            </summary>
            <param name="exchange">The exchange name.</param>
            <param name="preference">The preference level.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.MxRecordCollection.Remove(System.Int32)">
            <summary>
            Remove the Mx Record at the specified index position.
            </summary>
            <param name="index">The index position.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.MxRecordCollection.GetPrefered">
            <summary>
            Returns the prefered MX record in the list.
            </summary>
            <returns>The prefered MX record.</returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.MxRecordCollection.Item(System.Int32)">
            <summary>
            Returns the MxRecord at the specified index position.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.NewsGroup">
            <summary>
            Represents a newsgroup.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.Next">
            <summary>
            Advances the current article pointer to the next article.
            </summary>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //group.Pointer is equal to group.FirstArticle.
            group.Next();
            //group.Pointer is now equal to group.FirstArticle + 1.
            //Retrieve the second article in this group.
            Message article2 = group.RetrieveArticleObject();
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'group.Pointer is equal to group.FirstArticle.
            group.Next()
            'group.Pointer is now equal to group.FirstArticle + 1.
            'Retrieve the second article in this group.
            Dim article2 As Message = group.RetrieveArticleObject()
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //group.Pointer is equal to group.FirstArticle.
            group.Next();
            //group.Pointer is now equal to group.FirstArticle + 1.
            //Retrieve the second article in this group.
            var article2:Message = group.RetrieveArticleObject();
            
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.Previous">
            <summary>
            Steps back the current article pointer to the previous article.
            </summary>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //group.Pointer is equal to group.FirstArticle.
            group.Next();
            //group.Pointer is now equal to group.FirstArticle + 1.
            group.Previous();
            //group.Pointer is now equal to group.FirstArticle.
            //This retrieves the first article of the group.
            Message article1 = group.RetrieveArticleObject();
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'group.Pointer is equal to group.FirstArticle.
            group.Next()
            'group.Pointer is now equal to group.FirstArticle + 1.
            group.Previous();
            'group.Pointer is now equal to group.FirstArticle.
            'This retrieves the first article of the group.
            Dim article 1 As Message = group.RetrieveArticleObject()
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //group.Pointer is equal to group.FirstArticle.
            group.Next();
            //group.Pointer is now equal to group.FirstArticle + 1.
            group.Previous();
            //group.Pointer is now equal to group.FirstArticle.
            //This retrieves the first article of the group.
            var article1:Message = group.RetrieveArticleObject();
            
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.RetrieveArticle(System.Int32)">
            <summary>
            Retrieves the article at the specified ordinal position.
            </summary>
            <param name="index">The ordinal position of the article to be retrieved.</param>
            <returns>A byte array containing the article data.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Retrieve article at position 29 in this group.
            byte[] article29 = group.RetrieveArticle(29);
            //Retrieve last article in this group.
            byte[] article = group.RetrieveArticle(group.LastArticle);
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Retrieve article at position 29 in this group.
            Dim article29() As Byte = group.RetrieveArticle(29)
            'Retrieve last article in this group.
            Dim article() As Byte = group.RetrieveArticle(group.LastArticle)
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Retrieve article at position 29 in this group.
            var article29:byte[] = group.RetrieveArticle(29);
            //Retrieve last article in this group.
            var article:byte[] = group.RetrieveArticle(group.LastArticle);
            
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.RetrieveArticle">
            <summary>
            Retrieves the article at the position specified by the current article pointer.
            </summary>
            <returns>A byte array containing the article data.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Retrieve the first article in this group.
            byte[] article = group.RetrieveArticle();
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Retrieve the first article in this group.
            Dim article() As Byte = group.RetrieveArticle()
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Retrieve the first article in this group.
            var article:byte[] = group.RetrieveArticle();
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.RetrieveArticleObject(System.Int32)">
            <summary>
            Retrieves the article at the specified ordinal position.
            </summary>
            <param name="index">The ordinal position of the article to be retrieved.</param>
            <returns>A Message object representing the article.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Retrieve article at position 29 in this group.
            Message article29 = group.RetrieveArticleObject(29);
            //Retrieve last article in this group.
            Message article = group.RetrieveArticleObject(group.LastArticle);
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Retrieve article at position 29 in this group.
            Dim article29 As Message = group.RetrieveArticleObject(29)
            'Retrieve last article in this group.
            Dim article As Message = group.RetrieveArticleObject(group.LastArticle)
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Retrieve article at position 29 in this group.
            var article29:Message = group.RetrieveArticleObject(29);
            //Retrieve last article in this group.
            var article:Message = group.RetrieveArticleObject(group.LastArticle);
            
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.RetrieveArticleObject">
            <summary>
            Retrieves the article at the position specified by the current article pointer.
            </summary>
            <returns>A Message object representing the article.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Retrieve the first article in this group.
            Message article = group.RetrieveArticleObject();
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Retrieve the first article in this group.
            Dim article As Message = group.RetrieveArticleObject()
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Retrieve the first article in this group.
            var article:Message = group.RetrieveArticleObject();
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.RetrieveHeader(System.Int32)">
            <summary>
            Retrieves the article Header at the specified ordinal position.
            </summary>
            <param name="index">The ordinal position of the article to be retrieved.</param>
            <returns>A byte array containing the article header.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Retrieve the Header of the article at position 29 in this group.
            byte[] header29 = group.RetrieveHeader(29);
            //Retrieve last Header in this group.
            byte[] Header = group.RetrieveHeader(group.LastHeader);
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Retrieve the Header of the article at position 29 in this group.
            Dim header29() As Byte = group.RetrieveHeader(29)
            'Retrieve last Header in this group.
            Dim header() As Byte = group.RetrieveHeader(group.LastHeader)
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Retrieve the Header of the article at position 29 in this group.
            var header29:byte[] = group.RetrieveHeader(29);
            //Retrieve last Header in this group.
            var header:byte[] = group.RetrieveHeader(group.LastHeader);
            
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.RetrieveHeader">
            <summary>
            Retrieves the article Header at the position specified by the current article pointer.
            </summary>
            <returns>A byte array containing the article header.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Retrieve the first Header in this group.
            byte[] Header = group.RetrieveHeader();
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Retrieve the first Header in this group.
            Dim header() As Byte = group.RetrieveHeader()
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Retrieve the first Header in this group.
            var header:byte[] = group.RetrieveHeader();
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.StoreHeader(System.Int32,System.String)">
            <summary>
            Stores the article Header at the specified ordinal position to the specified path.
            </summary>
            <param name="index">The ordinal position of the article to be retrieved.</param>
            <param name="filePath">The destination path for the file.</param>
            <returns>The path the file has been saved at.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Store the Header of the article at position 29 in this group.
            group.StoreHeader(29,"C:\\My news\\header.txt");
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Store the Header of the article at position 29 in this group.
            group.StoreHeader(29,"C:\My news\header.txt")
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Store the Header of the article at position 29 in this group.
            group.StoreHeader(29,"C:\\My news\\header.txt");
            
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.StoreHeader(System.String)">
            <summary>
            Retrieves the article Header at the position specified by the current article pointer.
            </summary>
            <param name="filePath">The destination path for the file.</param>
            <returns>The path the file has been saved at.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Store the first article in this group.
            group.StoreHeader("C:\\My news\\header.txt");
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Store the first article in this group.
            group.StoreHeader("C:\My news\header.txt")
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Store the first article in this group.
            group.StoreHeader("C:\\My news\\header.txt");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.StoreArticle(System.Int32,System.String)">
            <summary>
            Stores the article at the specified ordinal position to the specified path.
            </summary>
            <param name="index">The ordinal position of the article to be retrieved.</param>
            <param name="filePath">The destination path for the file.</param>
            <returns>The path the file has been saved at.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Store article at position 29 in this group.
            group.StoreArticle(29,"C:\\My news\\article.nws");
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Store article at position 29 in this group.
            group.StoreArticle(29,"C:\My news\article.nws")
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Store article at position 29 in this group.
            group.StoreArticle(29,"C:\\My news\\article.nws");
            
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.StoreArticle(System.String)">
            <summary>
            Retrieves the article at the position specified by the current article pointer.
            </summary>
            <param name="filePath">The destination path for the file.</param>
            <returns>The path the file has been saved at.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Store the first article in this group.
            group.StoreArticle("C:\\My news\\article.nws");
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Store the first article in this group.
            group.StoreArticle("C:\My news\article.nws")
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Store the first article in this group.
            group.StoreArticle("C:\\My news\\article.nws");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.StoreBody(System.Int32,System.String)">
            <summary>
            Stores the article body at the specified ordinal position to the specified path.
            </summary>
            <param name="index">The ordinal position of the article to be retrieved.</param>
            <param name="filePath">The destination path for the file.</param>
            <returns>The path the file has been saved at.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Store the body of the article at position 29 in this group.
            group.StoreBody(29,"C:\\My news\\body.txt");
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Store the body of the article at position 29 in this group.
            group.StoreBody(29,"C:\My news\body.txt")
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Store the body of the article at position 29 in this group.
            group.StoreBody(29,"C:\\My news\\body.txt");
            
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.StoreBody(System.String)">
            <summary>
            Retrieves the article body at the position specified by the current article pointer.
            </summary>
            <param name="filePath">The destination path for the file.</param>
            <returns>The path the file has been saved at.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Store the first article in this group.
            group.StoreBody("C:\\My news\\article.txt");
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Store the first article in this group.
            group.StoreBody("C:\My news\article.txt")
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Store the first article in this group.
            group.StoreBody("C:\\My news\\article.txt");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.StoreToFile(System.String,System.Byte[])">
            <summary>
            Stores the given byte array into a file at the specified location.
            </summary>
            <param name="path">Path of the file to be created.</param>
            <param name="data">Data of the file to be created.</param>
            <returns>The path where the file has been created.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.RetrieveHeaderObject(System.Int32)">
            <summary>
            Retrieves the article Header at the specified ordinal position.
            </summary>
            <param name="index">The ordinal position of the article to be retrieved.</param>
            <returns>A Header object representing the article header.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Retrieve the Header of the article at position 29 in this group.
            Header header29 = group.RetrieveHeaderObject(29);
            //Retrieve last Header in this group.
            Header Header = group.RetrieveHeaderObject(group.LastHeader);
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Retrieve the Header of the article at position 29 in this group.
            Dim header29 As Header = group.RetrieveHeaderObject(29)
            'Retrieve last Header in this group.
            Dim Header As Header = group.RetrieveHeaderObject(group.LastHeader)
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Retrieve the Header of the article at position 29 in this group.
            var header29:Header = group.RetrieveHeaderObject(29);
            //Retrieve last Header in this group.
            var header:Header = group.RetrieveHeaderObject(group.LastHeader);
            
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.RetrieveHeaderObject">
            <summary>
            Retrieves the article Header at the position specified by the current article pointer.
            </summary>
            <returns>A Header object representing the article header.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Retrieve the first Header in this group.
            Header Header = group.RetrieveHeaderObject();
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Retrieve the first Header in this group.
            Dim Header As Header = group.RetrieveHeaderObject()
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Retrieve the first Header in this group.
            var header:Header = group.RetrieveHeaderObject();
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.RetrieveBody(System.Int32)">
            <summary>
            Retrieves the article body at the specified ordinal position.
            </summary>
            <param name="index">The ordinal position of the article to be retrieved.</param>
            <returns>A byte array containing the article body.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Retrieve the body of the article at position 29 in this group.
            byte[] body29 = group.RetrieveBody(29);
            //Retrieve last body in this group.
            byte[] body = group.RetrieveBody(group.LastBody);
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Retrieve the body of the article at position 29 in this group.
            Dim body29() As Byte = group.RetrieveBody(29)
            'Retrieve last body in this group.
            Dim body() As Byte = group.RetrieveBody(group.LastBody)
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Retrieve the body of the article at position 29 in this group.
            var body29:byte[] = group.RetrieveBody(29);
            //Retrieve last body in this group.
            var body:byte[] = group.RetrieveBody(group.LastBody);
            
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroup.RetrieveBody">
            <summary>
            Retrieves the article body at the position specified by the current article pointer.
            </summary>
            <returns>A byte array containing the article body.</returns>
            <example>
            <code>
            C#
            
            NntpClient nntp = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            NewsGroup group = nntp.SelectGroup("mygroup");
            //Retrieve the first body in this group.
            byte[] body = group.RetrieveBody();
            
            nntp.Disconnect();
            
            VB.NET
            
            Dim nntp As New NntpClient
            
            nntp.Connect("news.myhost.com")
            
            Dim group As NewsGroup = nntp.SelectGroup("mygroup")
            'Retrieve the first body in this group.
            Dim body() As Byte = group.RetrieveBody()
            
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            
            nntp.Connect("news.myhost.com");
            
            var group:NewsGroup = nntp.SelectGroup("mygroup");
            //Retrieve the first body in this group.
            var body:byte[] = group.RetrieveBody();
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="P:ActiveUp.Net.Mail.NewsGroup.Name">
            <summary>
            The newsgroup's name.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.NewsGroup.FirstArticle">
            <summary>
            The ordinal position of the newsgroup's first article.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.NewsGroup.LastArticle">
            <summary>
            The ordinal position of the newsgroup's last article.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.NewsGroup.Pointer">
            <summary>
            The current article pointer's position.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.NewsGroup.PostingAllowed">
            <summary>
            True if posting is allowed on this newsgroup.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.NewsGroup.ArticleCount">
            <summary>
            The amount of article in this newsgroup.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.NewsGroupCollection">
            <summary>
            Represents a collection of newsgroups.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.NewsGroupCollection.Add(ActiveUp.Net.Mail.NewsGroup)">
            <summary>
            Adds the provided newsgroup to the collection.
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:ActiveUp.Net.Mail.NewsGroupCollection.Item(System.Int32)">
            <summary>
            Retrieves the newsgroup at the specified index in the collection.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.NntpClient">
            <summary>
            NNTP Client extending a System.Net.Sockets.TcpClient to send/receive NNTP command/responses.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.Connect(System.String)">
            <summary>
            Connects to the specified server.
            </summary>
            <param name="host">Server address.</param>
            <returns>The server's greeting response.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com"); 
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.Connect(System.String,System.Int32)">
            <summary>
            Connects to the specified server.
            </summary>
            <param name="host">Server address.</param>
            <param name="port">Server port.</param>
            <returns>The server's greeting response.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com",8502);
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com",8502)
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com",8502);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the given user.
            </summary>
            <param name="username">Username to log in.</param>
            <param name="password">Password.</param>
            <returns>True if authentication succeded.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            nntp.Authenticate("admin","password");
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            nntp.Authenticate("admin","password")
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            nntp.Authenticate("admin","password");
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.Authenticate(System.String,System.String,ActiveUp.Net.Mail.SaslMechanism)">
            <summary>
            Authenticates the given user and SASL mechanism.
            </summary>
            <param name="username">Username to log in.</param>
            <param name="password">Password.</param>
            <param name="mechanism">SASL Mechanism to be used.</param>
            <returns>True if authentication succeded.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            nntp.Authenticate("admin","password",SaslMechanism.CramMd5);
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            nntp.Authenticate("admin","password",SaslMechanism.CramMd5)
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            nntp.Authenticate("admin","password",SaslMechanism.CramMd5);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.Disconnect">
            <summary>
            Closes the connection.
            </summary>
            <returns>The server's goodbye greeting.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            //Do some work
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            'Do some work
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com"); 
            //Do some work
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.Command(System.String)">
            <summary>
            Sends the specified command to the server.
            </summary>
            <param name="command">The command to be sent.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            string response = nntp.Command("XANYCOMMAND anyargument");
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            Dim response as String = nntp.Command("XANYCOMMAND anyargument")
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            var response:string = nntp.Command("XANYCOMMAND anyargument");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.CommandMultiline(System.String)">
            <summary>
            Sends the specified command to the server.
            </summary>
            <param name="command">The command to be sent.</param>
            <returns>A byte array containing the server's response.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            nntp.SelectGroup("mygroup");
            byte[] articleData = nntp.CommandMultiline("ARTICLE 1");
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            nntp.SelectGroup("mygroup")
            Dim articleData as Byte() = nntp.CommandMultiline("ARTICLE 1")
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            nntp.SelectGroup("mygroup");
            var articleData:byte[] = nntp.CommandMultiline("ARTICLE 1");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.GetNewsGroups">
            <summary>
            Retrieves the server's newsgroups.
            </summary>
            <returns>The server's newsgroups.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            NewsGroupCollection groups = nntp.GetNewsGroups();
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            Dim groups as NewsGroupCollection = nntp.GetNewsGroups()
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            var groups:NewsGroupCollection = nntp.GetNewsGroups();
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.GetNewsGroups(System.DateTime)">
            <summary>
            Retrieves the server's newsgroups that have been created since the specified date/time.
            </summary>
            <param name="startDate">The minimum creation date/time.</param>
            <returns>The server's newsgroups that have been created since the specified date/time.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            //Get groups created less than one months ago.
            NewsGroupCollection groups = nntp.GetNewsGroups(System.DateTime.Now.AddMonth(-1));
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            'Get groups created less than one months ago.
            Dim groups as NewsGroupCollection = nntp.GetNewsGroups(System.DateTime.Now.AddMonth(-1))
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            //Get groups created less than one months ago.
            var groups:NewsGroupCollection = nntp.GetNewsGroups(System.DateTime.Now.AddMonth(-1));
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.GetNewsGroups(System.DateTime,System.Boolean)">
            <summary>
            Retrieves the server's newsgroups that have been created since the specified date/time.
            </summary>
            <param name="startDate">The minimum creation date/time.</param>
            <param name="gmt">Specifies if startDate is GMT or not.</param>
            <returns>The server's newsgroups that have been created since the specified date/time.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            //Get groups created less than one months ago (GMT time).
            NewsGroupCollection groups = nntp.GetNewsGroups(System.DateTime.Now.AddMonth(-1),true);
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            'Get groups created less than one months ago (GMT time).
            Dim groups as NewsGroupCollection = nntp.GetNewsGroups(System.DateTime.Now.AddMonth(-1),True)
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            //Get groups created less than one months ago (GMT time).
            var groups:NewsGroupCollection = nntp.GetNewsGroups(System.DateTime.Now.AddMonth(-1),true);
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.GetNewsGroups(System.DateTime,System.Boolean,System.String)">
            <summary>
            Retrieves the server's newsgroups that have been created since the specified date/time.
            </summary>
            <param name="startDate">The minimum creation date/time.</param>
            <param name="gmt">Specifies if startDate is GMT or not.</param>
            <param name="distribution">Distribution filter of the articles.</param>
            <returns>The server's newsgroups that have been created since the specified date/time and that contain articles for the specified distribution.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            //Get groups created less than one months ago (GMT time) and containing articles to be distributed to "staff".
            NewsGroupCollection groups = nntp.GetNewsGroups(System.DateTime.Now.AddMonth(-1),true,"staff");
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            'Get groups created less than one months ago (GMT time) and containing articles to be distributed to "staff".
            Dim groups as NewsGroupCollection = nntp.GetNewsGroups(System.DateTime.Now.AddMonth(-1),True,"staff")
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            //Get groups created less than one months ago (GMT time) and containing articles to be distributed to "staff".
            var groups:NewsGroupCollection = nntp.GetNewsGroups(System.DateTime.Now.AddMonth(-1),true,"staff");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.GetNewArticleIds(System.String,System.DateTime)">
            <summary>
            Retrieves message-ids from articles that have been added since the specified date/time.
            </summary>
            <param name="newsGroup">Newsgroup to be checked.</param>
            <param name="startDate">Minimum addition date of the articles.</param>
            <returns>The article message-ids</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            //Gets article ids that belong to the "myhost.info" newsgroup and have been added less than one month ago.
            string[] newids = nntp.GetNewArticleIds("myhost.info",System.DateTime.Now.AddMonth(-1));
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            'Gets article ids that belong to the "myhost.info" newsgroup and have been added less than one month ago.
            Dim newids as String() = nntp.GetNewArticleIds("myhost.info",System.DateTime.Now.AddMonth(-1))
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            //Gets article ids that belong to the "myhost.info" newsgroup and have been added less than one month ago.
            var newids:string[] = nntp.GetNewArticleIds("myhost.info",System.DateTime.Now.AddMonth(-1));
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.GetNewArticleIds(System.String,System.DateTime,System.Boolean)">
            <summary>
            Retrieves message-ids from articles that have been added since the specified date/time.
            </summary>
            <param name="newsGroup">Newsgroup to be checked.</param>
            <param name="startDate">Minimum addition date of the articles.</param>
            <param name="gmt">Specifies if startDate is GMT or not.</param>
            <returns>The article message-ids</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            //Gets article ids that belong to the "myhost.info" newsgroup and have been added less than one month ago (GMT time).
            string[] newids = nntp.GetNewArticleIds("myhost.info",System.DateTime.Now.AddMonth(-1),true);
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            'Gets article ids that belong to the "myhost.info" newsgroup and have been added less than one month ago (GMT time).
            Dim newids as String() = nntp.GetNewArticleIds("myhost.info",System.DateTime.Now.AddMonth(-1),True)
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            //Gets article ids that belong to the "myhost.info" newsgroup and have been added less than one month ago (GMT time).
            var newids:string[] = nntp.GetNewArticleIds("myhost.info",System.DateTime.Now.AddMonth(-1),true);
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.GetNewArticleIds(System.String,System.DateTime,System.Boolean,System.String)">
            <summary>
            Retrieves message-ids from articles that have been added since the specified date/time.
            </summary>
            <param name="newsGroup">Newsgroup to be checked.</param>
            <param name="startDate">Minimum addition date of the articles.</param>
            <param name="gmt">Specifies if startDate is GMT or not.</param>
            <param name="distribution">The distribution filter of the articles.</param>
            <returns>The article message-ids</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            //Gets article ids that belong to the "myhost.info" newsgroup, that have been added less than one month ago (GMT time) and that should be distributed to "staff".
            string[] newids = nntp.GetNewArticleIds("myhost.info",System.DateTime.Now.AddMonth(-1),true,"staff");
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            'Gets article ids that belong to the "myhost.info" newsgroup and have been added less than one month ago (GMT time) and that should be distributed to "staff".
            Dim newids as String() = nntp.GetNewArticleIds("myhost.info",System.DateTime.Now.AddMonth(-1),True,"staff")
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            //Gets article ids that belong to the "myhost.info" newsgroup and have been added less than one month ago (GMT time) and that should be distributed to "staff".
            var newids:string[] = nntp.GetNewArticleIds("myhost.info",System.DateTime.Now.AddMonth(-1),true,"staff");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.SelectGroup(System.String)">
            <summary>
            Selects the specified newsgroup.
            </summary>
            <param name="groupName">The newsgroup to be selected.</param>
            <returns>The selected newsgroup.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            //Selects the "myhost.info" newsgroup as the current newsgroup.
            NewsGroup group = nntp.SelectGroup("myhost.info");
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            'Selects the "myhost.info" newsgroup as the current newsgroup.
            Dim group as NewsGroup = nntp.SelectGroup("myhost.info")
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            //Selects the "myhost.info" newsgroup as the current newsgroup.
            var group:NewsGroup = nntp.SelectGroup("myhost.info");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.RetrieveArticle(System.String)">
            <summary>
            Retrieves the article with the specified message-id.
            </summary>
            <param name="messageId">Message-Id of the article.</param>
            <returns>A byte array containing the article's data.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            byte[] articleData = nntp.RetrieveArticle("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            Dim articleData as Byte() = nntp.RetrieveArticle("3e061eae$1@news.myhost.com")
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            var articleData:byte[] = nntp.RetrieveArticle("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.RetrieveHeader(System.String)">
            <summary>
            Retrieves the article Header with the specified message-id.
            </summary>
            <param name="messageId">Message-Id of the article.</param>
            <returns>A byte array containing the article's header.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            byte[] headerData = nntp.RetrieveHeader("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            Dim headerData as Byte() = nntp.RetrieveHeader("3e061eae$1@news.myhost.com")
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            var headerData:byte[] = nntp.RetrieveHeader("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.RetrieveArticleString(System.String)">
            <summary>
            Retrieves the article with the specified message-id.
            </summary>
            <param name="messageId">Message-Id of the article.</param>
            <returns>A string containing the article's data.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            string articleData = nntp.RetrieveArticleString("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            Dim articleData as String = nntp.RetrieveArticleString("3e061eae$1@news.myhost.com")
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            var articleData:string = nntp.RetrieveArticleString("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.RetrieveHeaderString(System.String)">
            <summary>
            Retrieves the article Header with the specified message-id.
            </summary>
            <param name="messageId">Message-Id of the article.</param>
            <returns>A string containing the article's header.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            string headerData = nntp.RetrieveHeaderString("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            Dim headerData as String = nntp.RetrieveHeaderString("3e061eae$1@news.myhost.com")
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            var headerData:string = nntp.RetrieveHeaderString("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.RetrieveArticleObject(System.String)">
            <summary>
            Retrieves the article with the specified message-id.
            </summary>
            <param name="messageId">Message-Id of the article.</param>
            <returns>A Message object representing the article.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            Message article = nntp.RetrieveArticleObject("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            Dim article as Message = nntp.RetrieveArticleObject("3e061eae$1@news.myhost.com")
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            var article:Message = nntp.RetrieveArticleObject("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.RetrieveHeaderObject(System.String)">
            <summary>
            Retrieves the article Header with the specified message-id.
            </summary>
            <param name="messageId">Message-Id of the article.</param>
            <returns>A Header object representing the article's header.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            Header Header = nntp.RetrieveHeaderObject("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            Dim Header as Header = nntp.RetrieveHeaderObject("3e061eae$1@news.myhost.com")
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            var header:Header = nntp.RetrieveHeaderObject("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.RetrieveBody(System.String)">
            <summary>
            Retrieves the article body with the specified message-id.
            </summary>
            <param name="messageId">Message-Id of the article.</param>
            <returns>A byte array containing the article's body.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            byte[] body = nntp.RetrieveBody("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            Dim body as Byte() = nntp.RetrieveBody("3e061eae$1@news.myhost.com")
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            var body:byte[] = nntp.RetrieveBody("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.RetrieveBodyString(System.String)">
            <summary>
            Retrieves the article body with the specified message-id.
            </summary>
            <param name="messageId">Message-Id of the article.</param>
            <returns>A string containing the article's body.</returns>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            string body = nntp.RetrieveBodyString("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            Dim body as String = nntp.RetrieveBodyString("3e061eae$1@news.myhost.com")
            nntp.Disconnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            var body:string = nntp.RetrieveBodyString("3e061eae$1@news.myhost.com");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.Post(System.String)">
            <summary>
            Posts the provided article.
            </summary>
            <param name="article">The article data as a string.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Message article = new Message();
            article.NewsGroups = "myhost.info";
            article.From = new Address("john.doe@myhost.com","John Doe");
            article.Subject = "Test";
            article.Body = "Hello this is a test !";
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            if(nntp.PostingAllowed) nntp.Post(article.PostableString);
            else throw new NntpException("Posting not allowed. Couldn't post.");
            nntp.Disconnect();
            
            VB.NET
            
            Dim article as New Message
            article.NewsGroups = "myhost.info"
            article.From = New Address("john.doe@myhost.com","John Doe")
            article.Subject = "Test"
            article.Body = "Hello this is a test !"
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            If nntp.PostingAllowed Then
            nntp.Post(article.PostableString)
            Else
            Throw New NntpException("Posting not allowed. Couldn't post.")
            End If
            nntp.Disconnect()
            
            JScript.NET
            
            var article:Message = new Message();
            article.NewsGroups = "myhost.info";
            article.From = new Address("john.doe@myhost.com","John Doe");
            article.Subject = "Test";
            article.Body = "Hello this is a test !";
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            if(nntp.PostingAllowed) nntp.Post(article.PostableString);
            else throw new NntpException("Posting not allowed. Couldn't post.");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.NntpClient.Post(ActiveUp.Net.Mail.Message)">
            <summary>
            Posts the provided article.
            </summary>
            <param name="article">The article data as a string.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Message article = new Message();
            article.HeaderFields.Add("NewsGroups","myhost.info");
            article.From = new Address("john.doe@myhost.com","John Doe");
            article.Subject = "Test";
            article.Body = "Hello this is a test !";
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            if(nntp.PostingAllowed) nntp.Post(article);
            else throw new NntpException("Posting not allowed. Couldn't post.");
            nntp.Disconnect();
            
            VB.NET
            
            Dim article as New Message
            article.HeaderFields.Add("NewsGroups","myhost.info")
            article.From = New Address("john.doe@myhost.com","John Doe")
            article.Subject = "Test"
            article.Body = "Hello this is a test !"
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com") 
            If nntp.PostingAllowed Then
            nntp.Post(article)
            Else
            Throw New NntpException("Posting not allowed. Couldn't post.")
            End If
            nntp.Disconnect()
            
            JScript.NET
            
            var article:Message = new Message();
            article.HeaderFields.Add("NewsGroups","myhost.info");
            article.From = new Address("john.doe@myhost.com","John Doe");
            article.Subject = "Test";
            article.Body = "Hello this is a test !";
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com");
            if(nntp.PostingAllowed) nntp.Post(article);
            else throw new NntpException("Posting not allowed. Couldn't post.");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="P:ActiveUp.Net.Mail.NntpClient.PostingAllowed">
            <summary>
            If true, posting is allowed.
            </summary>
            <example>
            <code>
            C#
            
            NntpClient nttp = new NntpClient();
            nntp.Connect("news.myhost.com");
            if(!nntp.PostingAllowed) throw new NntpException("Posting not allowed");
            nntp.Disconnect();
            
            VB.NET
            
            Dim nttp as New NntpClient()
            nntp.Connect("news.myhost.com")
            If Not nntp.PostingAllowed Then
            Throw New NntpException("Posting not allowed");
            End If
            nntp.Dicsonnect()
            
            JScript.NET
            
            var nntp:NntpClient = new NntpClient();
            nntp.Connect("news.myhost.com"); 
            if(!nntp.PostingAllowed) throw new NntpException("Posting not allowed");
            nntp.Disconnect();
            </code>
            </example>
        </member>
        <member name="E:ActiveUp.Net.Mail.NntpClient.TcpWriting">
            <summary>
            Event fired when a command is being written to the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.NntpClient.TcpWritten">
            <summary>
            Event fired when a command has been written to the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.NntpClient.TcpReading">
            <summary>
            Event fired when a response is being read from the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.NntpClient.TcpRead">
            <summary>
            Event fired when a response has been read from the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.NntpClient.Connecting">
            <summary>
            Event fired when attempting to connect to the remote server using the specified host.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.NntpClient.Connected">
            <summary>
            Event fired when the object is connected to the remote server or when connection failed.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.NntpClient.Disconnecting">
            <summary>
            Event fired when attempting to disconnect from the remote server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.NntpClient.Disconnected">
            <summary>
            Event fired when the object disconnected from the remote server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.NntpClient.MessageRetrieving">
            <summary>
            Event fired when a message is being requested using the RetrieveMessage() method.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.NntpClient.MessageRetrieved">
            <summary>
            Event fired when a message is being retrieved using the RetrieveMessage() method.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.NntpClient.HeaderRetrieving">
            <summary>
            Event fired when a message Header is being requested using the RetrieveHeader() method.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.NntpClient.HeaderRetrieved">
            <summary>
            Event fired when a message Header has been retrieved using the RetrieveHeader() method.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.NntpClient.Authenticating">
            <summary>
            Event fired when authentication starts.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.NntpClient.Authenticated">
            <summary>
            Event fired when authentication completed.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.NntpClient.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ActiveUp.Net.Mail.NntpException">
            <summary>
            Custom exception.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.NntpException.Message">
            <summary>
            Message returned by the server or error description.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.OperatorType">
            <summary>
            The field format padding directions.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.OperatorType.GreaterThan">
            <summary>
            Field value is greater than the value.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.OperatorType.GreaterThanEqual">
            <summary>
            Field value is greater than or equal to the value.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.OperatorType.LessThan">
            <summary>
            Field value is less than the value.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.OperatorType.LessThanEqual">
            <summary>
            Field value is less than or equal to the value.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.OperatorType.Equal">
            <summary>
            Field value is equal to the value.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.OperatorType.NotEqual">
            <summary>
            Field value is not equal to the value.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.OperatorType.Exists">
            <summary>
            Field exists.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.OperatorType.NotExists">
            <summary>
            Field does not exist.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.PaddingDirection">
            <summary>
            The field format padding directions.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.PaddingDirection.Left">
            <summary>
            Right-Align the string.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.PaddingDirection.Right">
            <summary>
            Left-Align the string.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Parser">
            <summary>
            Base class for all Parser objects.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.GetMonth(System.String)">
            <summary>
            Gets the month.
            </summary>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.InvGetMonth(System.Int32)">
            <summary>
            Invs the get month.
            </summary>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.GetContentType(System.String)">
            <summary>
            Gets the type of the content.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.GetContentDisposition(System.String)">
            <summary>
            Gets the content disposition.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseSubParts(ActiveUp.Net.Mail.MimePart@,ActiveUp.Net.Mail.Message)">
            <summary>
            Parses the sub parts.
            </summary>
            <param name="part">The part.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.DispatchParts(ActiveUp.Net.Mail.MimePart,ActiveUp.Net.Mail.Message@)">
            <summary>
            Dispatches the parts.
            </summary>
            <param name="root">The root.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.DispatchParts(ActiveUp.Net.Mail.Message@)">
            <summary>
            Dispatches the parts.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.DecodePartBody(ActiveUp.Net.Mail.MimePart@)">
            <summary>
            Decodes the part body.
            </summary>
            <param name="part">The part.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ReplaceTimeZone(System.String)">
            <summary>
            Replaces the time zone.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.RemoveWhiteSpaces(System.String)">
            <summary>
            Removes the white spaces.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.FormatFieldName(System.String)">
            <summary>
            Formats the name of the field.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.Clean(System.String)">
            <summary>
            Cleans the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.Fold(System.String)">
            <summary>
            Folds the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.Unfold(System.String)">
            <summary>
            Unfolds the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseMimePart(System.String,ActiveUp.Net.Mail.Message)">
            <summary>
            Parses the MIME part.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseHeader(System.String)">
            <summary>
            Parses a Header from a file to a Header object.
            </summary>
            <param name="filePath">The path of the file to be parsed.</param>
            <returns>The parsed file as a Header object.</returns>
            <example>
            <code>
            C#
            
            Header Header = Parser.ParseHeader("C:\\My headers\\header.txt");
            //Expose the subject
            string subject = header.Subject;
            
            VB.NET
            
            Dim Header As Header = Parser.ParseHeader("C:\My headers\header.txt")
            'Expose the subject
            Dim subject As String = header.Subject
            
            JScript.NET
            
            var header:Header = Parser.ParseHeader("C:\\My headers\\header.txt");
            //Expose the subject
            var subject:string = header.Subject;
            </code>
            </example> 
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseHeader(System.IO.MemoryStream)">
            <summary>
            Parses a MemoryStream's content to a Header object.
            </summary>
            <param name="inputStream">The MemoryStream containing the Header data to be parsed.</param>
            <returns>The parsed Header as a Header object.</returns>
            <example>
            <code>
            C#
            
            Header Header = Parser.ParseHeader(someStream);
            //Expose the subject
            string subject = header.Subject;
            
            VB.NET
            
            Dim Header As Header = Parser.ParseHeader(someStream)
            'Expose the subject
            Dim subject As String = header.Subject
            
            JScript.NET
            
            var header:Header = Parser.ParseHeader(someStream);
            //Expose the subject
            var subject:string = header.Subject;
            </code>
            </example> 
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseHeader(System.Byte[])">
            <summary>
            Parses a Header object from a byte array.
            </summary>
            <returns>The parsed Header as a Header object.</returns>
            <example>
            	<code lang="CS">
            Header Header = Parser.ParseHeader(someBuffer);
            //Expose the subject
            string subject = header.Subject;
                </code>
            	<code lang="VB">
            Dim Header As Header = Parser.ParseHeader(someBuffer)
            'Expose the subject
            Dim subject As String = header.Subject
                </code>
            	<code lang="J#">
            var header:Header = Parser.ParseHeader(someBuffer);
            //Expose the subject
            var subject:string = header.Subject;
                </code>
            </example>
            <param name="data">The byte array containing the Header data to be parsed.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseHeader(ActiveUp.Net.Mail.Header@)">
            <summary>
            Parses the header.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseHeaderString(System.String)">
            <summary>
            Parses a Header from a string formatted accordingly to the RFC822.
            </summary>
            <param name="data">The string containing the Header data to be parsed.</param>
            <returns>The parsed message as a Header object.</returns>
            <example>
            <code>
            C#
            
            Header Header = Parser.ParseHeaderString(rfc822string);
            //Expose the subject
            string subject = header.Subject;
            
            VB.NET
            
            Dim Header As Header = Parser.ParseHeaderString(rfc822string)
            'Expose the subject
            Dim subject As String = header.Subject
            
            JScript.NET
            
            var header:Header = Parser.ParseHeaderString(rfc822string);
            //Expose the subject
            var subject:string = header.Subject;
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseMessage(System.Byte[])">
            <summary>
            Parses the message.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseMessage(System.IO.MemoryStream)">
            <summary>
            Parses a MemoryStream's content to a Message object.
            </summary>
            <param name="inputStream">The MemoryStream containing the Header data to be parsed.</param>
            <returns>The parsed Header as a Message object.</returns>
            <example>
            <code>
            C#
            
            Message message = Parser.ParseMessage(someStream);
            //Expose the subject
            string subject = message.Subject;
            
            VB.NET
            
            Dim message As Message = Parser.ParseMessage(someStream)
            'Expose the subject
            Dim subject As String = message.Subject
            
            JScript.NET
            
            var message:Message = Parser.ParseMessage(someStream);
            //Expose the subject
            var subject:string = message.Subject;
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseMessage(System.String)">
            <summary>
            Parses a Message from a string formatted accordingly to the RFC822.
            </summary>
            <param name="data">The string containing the message data to be parsed.</param>
            <returns>The parsed message as a Message object.</returns>
            <example>
            <code>
            C#
            
            Message message = Parser.ParseMessageString(rfc822string);
            //Expose the subject
            string subject = message.Subject;
            
            VB.NET
            
            Dim message As Message = Parser.ParseMessageString(rfc822string)
            'Expose the subject
            Dim subject As String = message.Subject
            
            JScript.NET
            
            var message:Message = Parser.ParseMessageString(rfc822string);
            //Expose the subject
            var subject:string = message.Subject;
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseMessageFromFile(System.String)">
            <summary>
            Parses a message from a file to a Message object.
            </summary>
            <param name="filePath">The path of the file to be parsed.</param>
            <returns>The parsed message as a Message object.</returns>
            <example>
            <code>
            C#
            
            Message message = Parser.ParseMessage("C:\\My messages\\message.txt");
            //Expose the subject
            string subject = message.Subject;
            
            VB.NET
            
            Dim message As Message = Parser.ParseMessage("C:\My messages\message.txt")
            'Expose the subject
            Dim subject As String = message.Subject
            
            JScript.NET
            
            var message:Message = Parser.ParseMessage("C:\\My messages\\message.txt");
            //Expose the subject
            var subject:string = message.Subject;
            </code>
            </example> 
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseAddresses(System.String)">
            <summary>
            Parses a string containing addresses in the following formats :
            <list type="circle">
            <item>"John Doe" &lt;jdoe@myhost.com>,"Mike Johns" &lt;mjohns@otherhost.com></item>
            <item>"John Doe" &lt;jdoe@myhost.com>;"Mike Johns" &lt;mjohns@otherhost.com></item>
            <item>&lt;jdoe@myhost.com></item>
            <item>jdoe@myhost.com</item>
            </list>
            </summary>
            <param name="input">A string containing addresses in the formats desribed above.</param>
            <returns>An AddressCollection object containing the parsed addresses.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseAddress(System.String)">
            <summary>
            Parses the address.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseAsUniversalDateTime(System.String)">
            <summary>
            Parses as universal date time.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseTrace(System.String)">
            <summary>
            Parses the trace.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Parser.ParseTraces(System.String[])">
            <summary>
            Parses the traces.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:ActiveUp.Net.Mail.ParsingException">
            <summary>
            Represents a parsing specific error.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.ParsingException.#ctor(System.String)">
            <summary>
            Constructor, sets message to the specified value.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:ActiveUp.Net.Mail.ParsingException.Message">
            <summary>
            The exception's message.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Pop3Client">
            <summary>
            POP3 Client extending a System.Net.Sockets.TcpClient to send/receive POP3 command/responses.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.PPCSleep">
            <summary>
            This functions Injects Sleep wherever required in PocketPC. This is required so that
            Less powerful MessagePump in PocketPC gets chance to execute other things.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.Connect(System.String)">
            <summary>
            Connects the object with the remote POP server using the given parameters.
            </summary>
            <param name="host">Remote POP server address.</param>
            <returns>The server's welcome greeting.</returns>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com");
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com")
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com");
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.Connect(System.String,System.Int32)">
            <summary>
            Connects the object with the remote POP server using the given parameters.
            </summary>
            <param name="host">Remote POP server address.</param>
            <param name="port">The port to be used.</param>
            <returns>The server's welcome greeting.</returns>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com",8503);
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com",8503)
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com",8503);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.APOPConnect(System.String,System.String,System.String)">
            <summary>
            Connects the object with the remote POP server using the given parameters and APOP.
            </summary>
            <param name="user">Username on the remote POP server.</param>
            <param name="pass">Password on the remote POP server.</param>
            <param name="host">Remote POP server address.</param>
            <example>
            This will connect to the remote POP server using APOP.<br /><br />
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.APOPConnect("pop.myisp.com","username","password");
            
            VB.NET
            
            Dim pop As New Pop3Client()
            pop.APOPConnect("pop.myisp.com","username","password")
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.APOPConnect("pop.myisp.com","username","password");
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.APOPConnect(System.String,System.Int32,System.String,System.String)">
            <summary>
            Connects the object with the remote POP server using the given parameters and APOP.
            </summary>
            <param name="user">Username on the remote POP server.</param>
            <param name="pass">Password on the remote POP server.</param>
            <param name="host">Remote POP server address.</param>
            <param name="port">Port to be used.</param>
            <example>
            This will connect to the remote POP server using APOP.<br /><br />
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.APOPConnect("pop.myisp.com","username","password",8503);
            
            VB.NET
            
            Dim pop As New Pop3Client()
            pop.APOPConnect("pop.myisp.com","username","password",8503)
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.APOPConnect("pop.myisp.com","username","password",8503);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.Authenticate(System.String,System.String,ActiveUp.Net.Mail.SaslMechanism)">
            <summary>
            Authenticates using the given SASL mechanism.
            </summary>
            <param name="username">Username to authenticate as.</param>
            <param name="password">Password.</param>
            <param name="mechanism">SASL mechanism to be used.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com");
            pop.Authenticate("user","pass",SASLMechanism.CramMd5);
            pop.Disconnect();
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com")
            pop.Authenticate("user","pass",SASLMechanism.CramMd5)
            pop.Disconnect()
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com");
            pop.Authenticate("user","pass",SASLMechanism.CramMd5);
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.Disconnect">
            <summary>
            Disconnects the client from the remote server.
            </summary>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            //Do some work...
            pop.Disconnect();
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            'Do some work...
            pop.Disconnect()
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            //Do some work...
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.Command(System.String)">
            <summary>
            Sends the provided string to the server.
            </summary>
            <param name="command">The string to be sent to the server.</param>
            <returns>The server's response.</returns>
            <remarks>This method is to be used only with commands that return single-line responses.</remarks>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            string response = pop.Command("XANYCOMMAND anyarguments");
            pop.Disconnect();
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            Dim response As String = pop.Command("XANYCOMMAND anyarguments")
            pop.Disconnect()
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            var response:string = pop.Command("XANYCOMMAND anyarguments");
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.CommandMultiline(System.String)">
            <summary>
            Sends the provided string to the server.
            </summary>
            <param name="command">The string to be sent to the server.</param>
            <returns>The server's response.</returns>
            <remarks>This method is to be used only with commands that return multi-line responses.</remarks>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            string response = pop.CommandMultiline("XANYCOMMAND anyarguments");
            pop.Disconnect();
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            Dim response As String = pop.CommandMultiline("XANYCOMMAND anyarguments")
            pop.Disconnect()
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            var response:string = pop.CommandMultiline("XANYCOMMAND anyarguments");
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.GetStream">
            <summary>
            Gets the communacation stream of this object.
            </summary>
            <returns>A Stream object, either of type NetworkStream or SslStream if the channel is secured.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.DeleteMessage(System.Int32)">
            <summary>
            Marks the message with the given index for deletion on the remote POP server.
            </summary>
            <param name="indexOnServer">Index of the message to mark for deletion.</param>
            <remarks>
            This action can be cancelled by using the Reset() method before disconnection.
            <see cref="M:ActiveUp.Net.Mail.Pop3Client.Reset"/>
            </remarks>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("pop.myisp.com","username","password");
            pop.DeleteMessage(1);
            pop.Disconnect();
            //Message 1 deleted.
            
            VB.NET
            
            Dim pop As New Pop3Client()
            pop.Connect("pop.myisp.com","username","password")
            pop.DeleteMessage(1)
            pop.Disconnect()
            'Message 1 deleted.
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("pop.myisp.com","username","password");
            pop.DeleteMessage(1);
            pop.Disconnect();
            //Message 1 deleted.
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.Reset">
            <summary>
            Unmarks all messages that were marked for deletion.
            </summary>
            <returns>The amount of messages unmarked.</returns>
            <example>
            <code>
            C#
            
            ActiveUp.Net.Mail.Pop3Client pop = new ActiveUp.Net.Mail.Pop3Client();
            pop.Connect("pop.myisp.com","username","password");
            pop.DeleteMessage(1);
            //Message is marked for deletion.
            pop.Reset();
            //Message won't be deleted.
            pop.Disconnect();
            //Nothing happened.
            
            VB.NET
            
            Dim pop As New ActiveUp.Net.Mail.Pop3Client()
            pop.Connect("pop.myisp.com","username","password")
            pop.DeleteMessage(1)
            'Message is marked for deletion.
            pop.Reset()
            'Message won't be deleted.
            pop.Disconnect()
            'Nothing happened.
            
            JScript.NET
            
            var pop:ActiveUp.Net.Mail.Pop3Client = new ActiveUp.Net.Mail.Pop3Client();
            pop.Connect("pop.myisp.com","username","password");
            pop.DeleteMessage(1);
            //Message is marked for deletion.
            pop.Reset();
            //Message won't be deleted.
            pop.Disconnect();
            //Nothing happened.
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.RetrieveMessage(System.Int32)">
            <summary>
            Retrieves the message at the given index.
            </summary>
            <param name="messageIndex">The index of the message to be retrieved.</param>
            <returns>A byte array containing the message data.</returns>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            byte[] messageData = pop.RetrieveMessage(1);
            pop.Disconnect();
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            Dim messageData as Byte() = pop.RetrieveMessage(1)
            pop.Disconnect()
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            var messageData:byte[] = pop.RetrieveMessage(1);
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.RetrieveMessage(System.Int32,System.Boolean)">
            <summary>
            Retrieves the message at the given index.
            </summary>
            <param name="messageIndex">The index of the message to be retrieved.</param>
            <param name="deleteMessage">If true, the message will be deleted after it has been retrieved.</param>
            <returns>A byte array containing the message data.</returns>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            byte[] messageData = pop.RetrieveMessage(1,true);
            pop.Disconnect();
            //Message 1 is deleted.
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            Dim messageData as Byte() = pop.RetrieveMessage(1,True)
            pop.Disconnect()
            'Message 1 is deleted.
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            var messageData:byte[] = pop.RetrieveMessage(1,true);
            pop.Disconnect();
            //Message 1 is deleted.
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.RetrieveMessageObject(System.Int32)">
            <summary>
            Retrieves the message at the given index.
            </summary>
            <param name="messageIndex">The index of the message to be retrieved.</param>
            <returns>A Message object representing the message.</returns>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            Message message = pop.RetrieveMessageObject(1);
            pop.Disconnect();
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            Dim message as Message = pop.RetrieveMessageObject(1)
            pop.Disconnect()
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            var message:Message = pop.RetrieveMessageObject(1);
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.RetrieveMessageObject(System.Int32,System.Boolean)">
            <summary>
            Retrieves the message at the given index.
            </summary>
            <param name="messageIndex">The index of the message to be retrieved.</param>
            <param name="deleteMessage">If true, the message will be deleted after it has been retrieved.</param>
            <returns>A Message object representing the message.</returns>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            Message message = pop.RetrieveMessageObject(1);
            pop.Disconnect();
            //Message 1 is deleted.
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            Dim message as Message = pop.RetrieveMessageObject(1)
            pop.Disconnect()
            'Message 1 is deleted.
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            var message:Message = pop.RetrieveMessageObject(1);
            pop.Disconnect();
            //Message 1 is deleted.
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.StoreMessage(System.Int32,System.Boolean,System.String)">
            <summary>
            Retrieves and stores the message at the specified index to the specified path.
            Deletes the message once retrieval operation is complete.
            </summary>
            <param name="messageIndex">Index of the message to be retrieved.</param>
            <param name="deleteMessage">If true, the message will be deleted after it has been retrieved.</param>
            <param name="destinationPath">The path where the message has to be stored.</param>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            pop.StoreMessage(1,"C:\\My headers\\myheader.eml");
            pop.Disconnect();
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            pop.StoreMessage(1,"C:\My headers\myheader.eml")
            pop.Disconnect()
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            pop.StoreMessage(1,"C:\\My headers\\myheader.eml");
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.RetrieveHeader(System.Int32,System.Int32)">
            <summary>
            Retrieves the Header of the message at the given index, plus a given number of lines beyond the Header limit.
            </summary>
            <param name="messageIndex">Index of the Header to be retrieved.</param>
            <param name="numberOfBodyLines">Number of lines to retrieve after the Header separation.</param>
            <returns>A byte array containing the Header data.</returns>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            byte[] headerData = pop.RetrieveHeader(1,10);
            pop.Disconnect();
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            Dim headerData as Byte() = pop.RetrieveHeader(1,10)
            pop.Disconnect()
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            var headerData:byte[] = pop.RetrieveHeader(1,10);
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.RetrieveHeaderObject(System.Int32)">
            <summary>
            Retrieves the Header of the message at the given index.
            </summary>
            <param name="messageIndex">Index of the Header to be retrieved.</param>
            <returns>A Header object representing the header.</returns>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            Header headerData = pop.RetrieveHeaderObject(1);
            pop.Disconnect();
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            Dim headerData as Header = pop.RetrieveHeaderObject(1)
            pop.Disconnect()
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            var headerData:Header = pop.RetrieveHeaderObject(1);
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.StoreHeader(System.Int32,System.String)">
            <summary>
            Retrieves and stores the message Header at the specified index to the specified path.
            </summary>
            <param name="messageIndex">Index of the message Header to be retrieved.</param>
            <param name="destinationPath">The path where the Header has to be stored.</param>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            pop.StoreHeader(1,"C:\\My headers\\myheader.eml");
            pop.Disconnect();
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            pop.StoreHeader(1,"C:\My headers\myheader.eml")
            pop.Disconnect()
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            pop.StoreHeader(1,"C:\\My headers\\myheader.eml");
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.GetUniqueId(System.Int32)">
            <summary>
            Issues a UIDL command and retrieves the message's unique Id (assigned by the server).
            </summary>
            <param name="messageIndex">The message's index.</param>
            <returns>The message's unique Id.</returns>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            string uniqueId = pop.UniqueId(1);
            pop.Disconnect();
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            Dim uniqueId As String = pop.UniqueId(1)
            pop.Disconnect()
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            uniqueId:string = pop.UniqueId(1);
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.GetMessageSize(System.Int32)">
            <summary>
            Returns the size of the message at the given index.
            </summary>
            <param name="messageIndex">Index of the messages.</param>
            <returns>The size of the message at the given index.</returns>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            int uniqueId = pop.GetMessageSize(1);
            pop.Disconnect();
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            Dim uniqueId As Integer = pop.GetMessageSize(1)
            pop.Disconnect()
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            uniqueId:int = pop.GetMessageSize(1);
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.Noop">
            <summary>
            Performs a NOOP command on the server. The aim of this command is to keep the connection alive.
            </summary>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            pop.Noop();
            pop.Disconnect();
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            pop.Noop()
            pop.Disconnect()
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            pop.Noop();
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.CheckAPOP(System.String,System.Int32)">
            <summary>
            Checks if specified host has APOP capability.
            </summary>
            <param name="host">Host to be checked.</param>
            <param name="port">Port to connect on to the host.</param>
            <returns>True is remote server has APOP, otherwise false.</returns>
            <example>
            <code>
            C#
            
            bool serverHasAPOP = Pop3Client.CheckAPOP("mail.myhost.com",8503);
            
            VB.NET
            
            Dim serverHasAPOP As Boolen = Pop3Client.CheckAPOP("mail.myhost.com",8503)
            
            JScript.NET
            
            var serverHasAPOP:bool Pop3Client.CheckAPOP("mail.myhost.com",8503);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.BeginCheckAPOP(System.String,System.Int32,System.AsyncCallback)">
            <see cref="M:ActiveUp.Net.Mail.Pop3Client.CheckAPOP(System.String,System.Int32)"/>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.CheckAPOP(System.String)">
            <summary>
            Checks if specified host has APOP capability.
            </summary>
            <param name="host">Host to be checked.</param>
            <returns>True is remote server has APOP, otherwise false.</returns>
            <example>
            <code>
            C#
            
            bool serverHasAPOP = Pop3Client.CheckAPOP("mail.myhost.com");
            
            VB.NET
            
            Dim serverHasAPOP As Boolen = Pop3Client.CheckAPOP("mail.myhost.com")
            
            JScript.NET
            
            var serverHasAPOP:bool Pop3Client.CheckAPOP("mail.myhost.com");
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.BeginCheckAPOP(System.String,System.AsyncCallback)">
            <see cref="M:ActiveUp.Net.Mail.Pop3Client.CheckAPOP(System.String,System.Int32)"/>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.EndCheckAPOP(System.IAsyncResult)">
            <see cref="M:ActiveUp.Net.Mail.Pop3Client.CheckAPOP(System.String,System.Int32)"/>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.GetServerCapabilities">
            <summary>
            Gets the server capabilities.
            </summary>
            <remarks>Server capabilities are returned as an array of lines. Interpretation is left to the user.</remarks>
            <returns>An array of strings containing the server capabilities.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.BeginGetServerCapabilities(System.AsyncCallback)">
            <see cref="M:ActiveUp.Net.Mail.Pop3Client.GetServerCapabilities"/>
        </member>
        <member name="M:ActiveUp.Net.Mail.Pop3Client.EndGetServerCapabilities(System.IAsyncResult)">
            <see cref="M:ActiveUp.Net.Mail.Pop3Client.GetServerCapabilities"/>
        </member>
        <member name="P:ActiveUp.Net.Mail.Pop3Client.PPCEncode">
            <summary>
            Finds PPC Encoding replacing ISO 8859-1 as standard.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.Authenticating">
            <summary>
            Event fired when authentication starts.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.Authenticated">
            <summary>
            Event fired when authentication completed.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.Nooping">
            <summary>
            Event fired when NOOP command is issued.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.Nooped">
            <summary>
            Event fired when NOOP command completed.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.TcpWriting">
            <summary>
            Event fired when a command is being written to the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.TcpWritten">
            <summary>
            Event fired when a command has been written to the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.TcpReading">
            <summary>
            Event fired when a response is being read from the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.TcpRead">
            <summary>
            Event fired when a response has been read from the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.MessageRetrieving">
            <summary>
            Event fired when a message is being requested using the RetrieveMessage() method.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.MessageRetrieved">
            <summary>
            Event fired when a message is being retrieved using the RetrieveMessage() method.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.HeaderRetrieving">
            <summary>
            Event fired when a message Header is being requested using the RetrieveHeader() method.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.HeaderRetrieved">
            <summary>
            Event fired when a message Header has been retrieved using the RetrieveHeader() method.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.Connecting">
            <summary>
            Event fired when attempting to connect to the remote server using the specified host.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.Connected">
            <summary>
            Event fired when the object is connected to the remote server or when connection failed.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.Disconnecting">
            <summary>
            Event fired when attempting to disconnect from the remote server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.Pop3Client.Disconnected">
            <summary>
            Event fired when the object disconnected from the remote server.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Pop3Client.MessageCount">
            <summary>
            Number of messages on the remote POP server.
            </summary>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            int msgCount = pop.MessageCount;
            pop.Disconnect();
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            Dim msgCount as Integer = pop.MessageCount
            pop.Disconnect()
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            var msgCount:int = pop.MessageCount;
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="P:ActiveUp.Net.Mail.Pop3Client.TotalSize">
            <summary>
            Size of all messages on the remote POP server.
            </summary>
            <example>
            <code>
            C#
            
            Pop3Client pop = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            int accountSize = pop.TotalSize;
            pop.Disconnect();
            
            VB.NET
            
            Dim pop As New Pop3Client
            pop.Connect("mail.myhost.com","user","pass")
            Dim accountSize as Integer = pop.TotalSize
            pop.Disconnect()
            
            JScript.NET
            
            var pop:Pop3Client = new Pop3Client();
            pop.Connect("mail.myhost.com","user","pass");
            var accountSize:int = pop.TotalSize;
            pop.Disconnect();
            </code>
            </example>
        </member>
        <member name="P:ActiveUp.Net.Mail.Pop3Client.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ActiveUp.Net.Mail.Pop3Exception">
            <summary>
            Custom exception.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Pop3Exception.Message">
            <summary>
            Message returned by the server or error description.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.ProductHelper.GetTrialString(System.String,ActiveUp.Net.Mail.TrialStringType)">
            <summary>
            Gets the trial string.
            </summary>
            <param name="stringToModify">The string to modify.</param>
            <param name="trialStringType">Type of the trial string.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.ProductHelper.GetRandomString(System.Int32)">
            <summary>
            Gets the random string.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="T:ActiveUp.Net.Mail.QueuingService">
            <summary>
            The message priorities.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.QueuingService.ActiveQ">
            <summary>
            Active Up Queuing Service. Not yet supported !
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.QueuingService.MicrosoftSmtp">
            <summary>
            Microsoft SMTP Service.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.QueuingService.IpSwitchIMail">
            <summary>
            IP Switch IMail 7.x Server.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Server">
            <summary>
            Represents a server.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Server.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Server.#ctor(System.String,System.Int32)">
            <summary>
            Creates the Server object from the host or IP and port number.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Server.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Creates the Server object from the host or IP, port number, username and password.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="password"></param>
            <param name="username"></param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Server.#ctor(System.String,System.Int32,System.String,System.String,System.Boolean,ActiveUp.Net.Mail.EncryptionType)">
            <summary>
            Allows adding a new server with the added option of specifying the encryption type if any and whether the server needs any authentication.
            </summary>
            <param name="host">Hostname/IP Address for server.</param>
            <param name="port">Port to be used to connect to server.</param>
            <param name="username">Username for authentication.</param>
            <param name="password">Password for authentication.</param>
            <param name="RequiresAuthentication">true if authentication is needed, false otherwise.</param>
            <param name="EncType">Encryption type see EncryptionType enumeration.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.Server.Username">
            <summary>
            The user name to use for authentication.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Server.Password">
            <summary>
            The password to use for authentication.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Server.Host">
            <summary>
            The host or IP of the server.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Server.Port">
            <summary>
            The port number to use for the connection.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Server.RequiresAuthentication">
            <summary>
            Gets or sets the flag is authentication is needed on this server.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Server.ServerEncryptionType">
            <summary>
            Gets or sets the encryption type for the server.
            
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.RblServer.GetRblStatus(System.String,System.String)">
            <summary>
            Gets the RBL status.
            </summary>
            <param name="rblServer">The RBL server.</param>
            <param name="ipString">The ip string.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.RblServer.GetRblStatus(System.String,System.Net.IPAddress)">
            <summary>
            Gets the RBL status.
            </summary>
            <param name="rblServer">The RBL server.</param>
            <param name="ip">The ip.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.RblServer.GetRblIp(System.String,System.String)">
            <summary>
            Gets the RBL ip.
            </summary>
            <param name="rblServer">The RBL server.</param>
            <param name="ipString">The ip string.</param>
            <returns></returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.RblServer.GetRblIp(System.String,System.Net.IPAddress)">
            <summary>
            Gets the RBL ip.
            </summary>
            <param name="rblServer">The RBL server.</param>
            <param name="ip">The ip.</param>
            <returns></returns>
        </member>
        <member name="T:ActiveUp.Net.Mail.RegionCollection">
            <summary>
            A collection of field format options.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.RegionCollection.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.RegionCollection.Add(ActiveUp.Net.Mail.Region)">
            <summary>
            Add an Region object in the collection.
            </summary>
            <param name="region">The Region.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.RegionCollection.Add(System.String,System.String)">
            <summary>
            Add an Condition object in the collection based the region id, field, and value.
            </summary>
            <param name="regionid">The id of the region.</param>
            <param name="url">The url to retrieve.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.RegionCollection.Remove(System.Int32)">
            <summary>
            Remove the Condition object from the collection at the specified index position.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ActiveUp.Net.Mail.RegionCollection.Contains(System.String)">
            <summary>
            Determines whether the specified regionID is in the list.
            </summary>
            <param name="regionID">The regionID of the Region.</param>
            <returns>true if the collection contain the specified regionID; false otherwise.</returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.RegionCollection.Item(System.Int32)">
            <summary>
            Returns the Region object at the specified index position in the collection.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.RegionCollection.Item(System.String)">
            <summary>
            Returns the Region of the specified Region ID.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Region">
            <summary>
            Represents the dynamic region portion of the message.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Region.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Region.#ctor(System.String,System.String)">
            <summary>
            Creates the condition based on it's region id, field equal to value set with case-sensitive on.
            </summary>
            <param name="regionid">The ID of the region.</param>
            <param name="url">The url to retrieve.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Region.LoadFileContent(System.String)">
            <summary>
            Load the content of the specified file.
            </summary>
            <param name="filename">The full path to the file</param>
            <returns>The content of the file</returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.Region.Content">
            <summary>
            The content to retrieve.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Region.RegionID">
            <summary>
            The ID of the region.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Region.URL">
            <summary>
            The name of the field.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.SaslMechanism">
            <summary>
            Mechanisms available for authentication.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.SaslMechanism.Login">
            <summary>
            The LOGIN mechanism (BASE64 encoded exchanges).
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.SaslMechanism.CramMd5">
            <summary>
            The CRAM-MD5 mechanism. [RFC2195]
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.ServerCollection">
            <summary>
            A collection of Smtp servers.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.ServerCollection.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.ServerCollection.op_Addition(ActiveUp.Net.Mail.ServerCollection,ActiveUp.Net.Mail.ServerCollection)">
            <summary>
            Allows the developer to add a collection of Server objects in another one.
            </summary>
            <param name="first">The first collection.</param>
            <param name="second">The second collection.</param>
            <returns>The concacened collection.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.ServerCollection.Add(ActiveUp.Net.Mail.Server)">
            <summary>
            Add an Server object in the collection.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.ServerCollection.Add(System.String,System.Int32)">
            <summary>
            Add an Server object in the collection specifying the host and port.
            </summary>
            <param name="host">The hostname or IP address</param>
            <param name="port">The port number</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.ServerCollection.Add(System.String)">
            <summary>
            Add an Server object in the collection specifying the host and using the default port number (25).
            </summary>
            <param name="host">The hostname or IP address</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.ServerCollection.Remove(System.Int32)">
            <summary>
            Remove the Server object at the specified index position.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:ActiveUp.Net.Mail.ServerCollection.Item(System.Int32)">
            <summary>
            Returns the Server object at the specified index position.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.SmtpClient">
            <summary>
            Allows communication with an SMTP server.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Connect(System.String)">
            <summary>
            Connects to the specified server.
            </summary>
            <param name="host">Address of the server.</param>
            <returns>The server's welcome greeting.</returns>
            <example>
            <code>
            C#
            
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com");
            
            VB.NET
            
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com")
            
            JScript.NET
            
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com");
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Connect(System.String,System.Int32)">
            <summary>
            Connects to the specified server using the specified port.
            </summary>
            <param name="host">Address of the server.</param>
            <param name="port">Port to be used for connection.</param>
            <returns>The server's welcome greeting.</returns>
            <example>
            <code>
            C#
            
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            
            VB.NET
            
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            
            JScript.NET
            
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Authenticate(System.String,System.String,ActiveUp.Net.Mail.SaslMechanism)">
            <summary>
            Authenticates using the given SASL mechanism.
            </summary>
            <param name="username">Username to authenticate as.</param>
            <param name="password">Password.</param>
            <param name="mechanism">SASL mechanism to be used.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com");
            smtp.Authenticate("user","pass",SASLMechanism.CramMd5);
            smtp.Disconnect();
            
            VB.NET
            
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com")
            smtp.Authenticate("user","pass",SASLMechanism.CramMd5)
            smtp.Disconnect()
            
            JScript.NET
            
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com");
            smtp.Authenticate("user","pass",SASLMechanism.CramMd5);
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Disconnect">
            <summary>
            Performs a QUIT command on the server and closes connection.
            </summary>
            <returns>The server's good bye greeting.</returns>
            <example>
            <code>
            C#
            
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com");
            //Do some work...
            smtp.Disconnect();
            
            VB.NET
            
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com")
            'Do some work...
            smtp.Disconnect()
             
            JScript.NET
            
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com");
            //Do some work...
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Command(System.String,System.Int32)">
            <summary>
            Performs the specified command on the server and returns the response.
            </summary>
            <param name="command">The command to be performed.</param>
            <param name="expectedResponseCode">The expected response code, which will allow the client to know if the command succeeded or failed.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            smtp.Command("XANYCOMMAND",213);
            smtp.Disconnect();
            
            VB.NET
            
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            smtp.Command("XANYCOMMAND",213)
            smtp.Disconnect()
            
            JScript.NET
            
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            smtp.Command("XANYCOMMAND",213);
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Data(System.String)">
            <summary>
            Performs a DATA command on the server with the specified data.
            </summary>
            <param name="data">The data to be transfered.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Try
            	smtp.Ehlo()
            Catch
            	smtp.Helo()
            End Try
            smtp.MailFrom(message.From)
            smtp.RcptTo(message.To)
            smtp.Data(message.ToMimeString(),message.Charset)
            smtp.Disconnect()
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Data(System.Byte[])">
            <summary>
            Performs a DATA command on the server with the specified data.
            </summary>
            <param name="data">The data to be transfered.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(Encoding.ASCII.GetBytes(message.ToMimeString()));
            smtp.Disconnect();
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Try
            	smtp.Ehlo()
            Catch
            	smtp.Helo()
            End Try
            smtp.MailFrom(message.From)
            smtp.RcptTo(message.To)
            smtp.Data(Encoding.ASCII.GetBytes(message.ToMimeString()))
            smtp.Disconnect()
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(Encoding.ASCII.GetBytes(message.ToMimeString()));
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Data(System.IO.MemoryStream)">
            <summary>
            Performs a DATA command on the server with the specified data.
            </summary>
            <param name="dataStream">A stream containing the data to be transfered.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(new MemoryStream(Encoding.ASCII.GetBytes(message.ToMimeString()),0,message.Size));
            smtp.Disconnect();
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Try
            	smtp.Ehlo()
            Catch
            	smtp.Helo()
            End Try
            smtp.MailFrom(message.From)
            smtp.RcptTo(message.To)
            smtp.Data(New MemoryStream(Encoding.ASCII.GetBytes(message.ToMimeString()),0,message.Size)
            smtp.Disconnect()
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(new MemoryStream(Encoding.ASCII.GetBytes(message.ToMimeString()),0,message.Size));
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.DataFromFile(System.String)">
            <summary>
            Performs a DATA command on the server with the specified data.
            </summary>
            <param name="dataFilePath">The path to a file containing the data to be transfered.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom("jdoe@myhost.com");
            smtp.RcptTo("mjohns@otherhost.com");
            smtp.DataFromFile("D:\\My mails\\mailtosend.eml");
            smtp.Disconnect();
            
            VB.NET
            
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Try
            	smtp.Ehlo()
            Catch
            	smtp.Helo()
            End Try
            smtp.MailFrom("jdoe@myhost.com")
            smtp.RcptTo("mjohns@otherhost.com")
            smtp.DataFromFile("D:\My mails\mailtosend.eml")
            smtp.Disconnect()
            
            JScript.NET
            
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom("jdoe@myhost.com");
            smtp.RcptTo("mjohns@otherhost.com");
            smtp.DataFromFile("D:\\My mails\\mailtosend.eml");
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Ehlo(System.String)">
            <summary>
            Performs a EHLO command on the server.
            </summary>
            <param name="domain">The domain to be used as identifier.</param>
            <remarks>The use of this method indicates that the client is capable of using SMTP extensions (RFC2821).</remarks>
            <returns>The server's response.</returns>
            <example>
            <seealso cref="M:ActiveUp.Net.Mail.SmtpClient.Helo(System.String)"/>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Try
            	smtp.Ehlo()
            Catch
            	smtp.Helo()
            End Try
            smtp.MailFrom(message.From)
            smtp.RcptTo(message.To)
            smtp.Data(message.ToMimeString(),message.Charset)
            smtp.Disconnect()
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Helo(System.String)">
            <summary>
            Performs a HELO command on the server.
            </summary>
            <param name="domain">The domain to be used as identifier.</param>
            <remarks>The use of this method isntead of Ehlo() indicates that the client is not capable of using SMTP extensions (RFC821).</remarks>
            <returns>The server's response.</returns>
            <example>
            <seealso cref="M:ActiveUp.Net.Mail.SmtpClient.Ehlo(System.String)"/>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Try
            	smtp.Ehlo()
            Catch
            	smtp.Helo()
            End Try
            smtp.MailFrom(message.From)
            smtp.RcptTo(message.To)
            smtp.Data(message.ToMimeString(),message.Charset)
            smtp.Disconnect()
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Help">
            <summary>
            Performs a HELP command on the server.
            </summary>
            <returns>The server's response (usually containing the commands it supports).</returns>
            <example>
            <code>
            C#
            
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            string helpString = smtp.Help();
            smtp.Disconnect();
            
            VB.NET
            
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Dim helpString As String = smtp.Help()
            smtp.Disconnect()
            
            JScript.NET
            
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            var helpString:string = smtp.Help();
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.MailFrom(System.String)">
            <summary>
            Performs a MAIL FROM: command on the server using the specified address.
            </summary>
            <param name="address">The address of the message sender.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Try
            	smtp.Ehlo()
            Catch
            	smtp.Helo()
            End Try
            smtp.MailFrom(message.From)
            smtp.RcptTo(message.To)
            smtp.Data(message.ToMimeString(),message.Charset)
            smtp.Disconnect()
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.MailFrom(ActiveUp.Net.Mail.Address)">
            <summary>
            Performs a MAIL FROM: command on the server using the specified address.
            </summary>
            <param name="address">The address of the message sender.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Try
            	smtp.Ehlo()
            Catch
            	smtp.Helo()
            End Try
            smtp.MailFrom(message.From)
            smtp.RcptTo(message.To)
            smtp.Data(message.ToMimeString(),message.Charset)
            smtp.Disconnect()
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Noop">
            <summary>
            Performs a NOOP command on the server (used to keep connection alive).
            </summary>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Noop()
            	//Connection still alive and timer reset on server.
            }
            catch
            {
            	//Connection no longer available.
            }
            smtp.Disconnect();
            
            VB.NET
            
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Try
            	smtp.Noop()
            	'Connection still alive and timer reset on server.
            Catch
            	'Connection no longer available.
            End Try
            smtp.Disconnect()
            
            JScript.NET
            
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            var helpString:string = smtp.Help();
            /// try
            {
            	smtp.Noop()
            	//Connection still alive and timer reset on server.
            }
            catch
            {
            	//Connection no longer available.
            }
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.RcptTo(System.String)">
            <summary>
            Performs a RCPT TO: command on the server using the specified address.
            </summary>
            <param name="address">The address of one of the message's recipients.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            foreach(Address address in message.To) smtp.RcptTo(address.Email);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Try
            	smtp.Ehlo()
            Catch
            	smtp.Helo()
            End Try
            smtp.MailFrom(message.From)
            For Each address In message.To
            	smtp.RcptTo(address.Email)
            Next
            smtp.Data(message.ToMimeString(),message.Charset)
            smtp.Disconnect()
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            for(i:int=0;i&lt;message.To.Count;i++) smtp.RcptTo(message.To[i].Email);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.RcptTo(ActiveUp.Net.Mail.Address)">
            <summary>
            Performs a RCPT TO: command on the server using the specified address.
            </summary>
            <param name="address">The address of one of the message's recipients.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            foreach(Address address in message.To) smtp.RcptTo(address.Email);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Try
            	smtp.Ehlo()
            Catch
            	smtp.Helo()
            End Try
            smtp.MailFrom(message.From)
            For Each address In message.To
            	smtp.RcptTo(address)
            Next
            smtp.Data(message.ToMimeString(),message.Charset)
            smtp.Disconnect()
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            for(i:int=0;i&lt;message.To.Count;i++) smtp.RcptTo(message.To[i]);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.RcptTo(ActiveUp.Net.Mail.AddressCollection)">
            <summary>
            Performs a RCPT TO: command on the server using the specified addresses.
            </summary>
            <param name="addresses">The address of some of the message's recipients.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Try
            	smtp.Ehlo()
            Catch
            	smtp.Helo()
            End Try
            smtp.MailFrom(message.From)
            smtp.RcptTo(message.To)
            smtp.Data(message.ToMimeString(),message.Charset)
            smtp.Disconnect()
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            smtp.MailFrom(message.From);
            smtp.RcptTo(message.To);
            smtp.Data(message.ToMimeString(),message.Charset);
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Verify(System.String)">
            <summary>
            Performs a VRFY command on the server using the specified address (checks if the address refers to a mailbox on the server).
            </summary>
            <param name="address">The address to be verified.</param>
            <returns>True if address is valid and false if address doesn't reside on the server.</returns>
            <example>
            <code>
            C#
            
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            if(smtp.Verify("jdoe@myhost.com"))
            	bool isValid = true;
            	//Address is valid and resides on this server.
            smtp.Disconnect();
            
            VB.NET
            
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Try
            	smtp.Ehlo()
            Catch
            	smtp.Helo()
            End Try
            If smtp.Verify("jdoe@myhost.com") Then
            	Dim isValid As Boolean = True
            	'Address is valid and resides on this server.
            smtp.Disconnect()
            
            JScript.NET
            
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            if(smtp.Verify("jdoe@myhost.com")) 
            		var isValid:bool = true;
            	//Address is valid and resides on this server.
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Verify(ActiveUp.Net.Mail.Address)">
            <summary>
            Performs a VRFY command on the server using the specified address (checks if the address refers to a mailbox on the server).
            </summary>
            <param name="address">The address to be verified.</param>
            <returns>The server's response.</returns>
            <example>
            <code>
            C#
            
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            if(smtp.Verify(someAddressObject))
            	bool isValid = true;
            	//Address is valid and resides on this server.
            smtp.Disconnect();
            
            VB.NET
            
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Try
            	smtp.Ehlo()
            Catch
            	smtp.Helo()
            End Try
            If smtp.Verify(someAddressObject) Then
            	Dim isValid As Boolean = True
            	'Address is valid and resides on this server.
            smtp.Disconnect()
            
            JScript.NET
            
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            if(smtp.Verify(someAddressObject)) 
            		var isValid:bool = true;
            	//Address is valid and resides on this server.
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Verify(ActiveUp.Net.Mail.AddressCollection)">
            <summary>
            Performs a VRFY command on the server using the specified addresses (checks if the addresses refer to mailboxes on the server).
            </summary>
            <param name="address">The addresses to be verified.</param>
            <returns>A collection containing the invalid addresses.</returns>
            <example>
            <code>
            C#
            
            SmtpClient smtp = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            //Create a collection to test.
            AddressCollection myaddresses = new AddressCollection();
            myaddresses.Add("jdoe@myhost.com","John Doe");
            myaddresses.Add("mjohns@otherhost.com","Mike Johns");
            //Verifies all addresses.
            AddressCollection invalidAddresses = smtp.Verify(myaddresses);
            smtp.Disconnect();
            
            VB.NET
            
            Dim smtp As New SmtpClient
            smtp.Connect("mail.myhost.com",8504)
            Try
            	smtp.Ehlo()
            Catch
            	smtp.Helo()
            End Try
            'Create a collection to test.
            Dim myaddresses As New AddressCollection
            myaddresses.Add("jdoe@myhost.com","John Doe")
            myaddresses.Add("mjohns@otherhost.com","Mike Johns")
            'Verifies all addresses.
            Dim invalidAddresses As AddressCollection = smtp.Verify(myaddresses)
            smtp.Disconnect()
            
            JScript.NET
            
            var smtp:SmtpClient = new SmtpClient();
            smtp.Connect("mail.myhost.com",8504);
            try
            {
            	smtp.Ehlo();
            }
            catch
            {
            	smtp.Helo();
            }
            //Create a collection to test.
            var myaddresses:AddressCollection = new AddressCollection();
            myaddresses.Add("jdoe@myhost.com","John Doe");
            myaddresses.Add("mjohns@otherhost.com","Mike Johns");
            //Verifies all addresses.
            var invalidAddresses:AddressCollection = smtp.Verify(myaddresses);
            smtp.Disconnect();
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.DirectSend(ActiveUp.Net.Mail.Message)">
            <summary>
            Sends the given message using the Direct Mailing method. The client connects to each recipient's mail exchange server and delivers the message.
            </summary>
            <param name="message">The message to be sent.</param>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            SmtpClient.DirectSend(message);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            SmtpClient.DirectSend(message)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            SmtpClient.DirectSend(message);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.DirectSend(ActiveUp.Net.Mail.Message,System.String,System.Int32)">
            <summary>
            Sends the message using the specified host as dns server on the specified port.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="host">The host to be used.</param>
            <param name="port">The port to be used.</param>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            SmtpClient.DirectSend(message,"ns1.dnsserver.com",53);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            SmtpClient.DirectSend(message,"ns1.dnsserver.com",53)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            SmtpClient.DirectSend(message,"ns1.dnsserver.com",53);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.DirectSend(ActiveUp.Net.Mail.Message,System.String)">
            <summary>
            Sends the message using the specified host as dns server.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="host">The host to be used.</param>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            SmtpClient.DirectSend(message,"ns1.dnsserver.com");
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            SmtpClient.DirectSend(message,"ns1.dnsserver.com")
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            SmtpClient.DirectSend(message,"ns1.dnsserver.com");
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.DirectSend(ActiveUp.Net.Mail.Message,ActiveUp.Net.Mail.ServerCollection)">
            <summary>
            Sends the message using the specified DNS servers to get mail exchange servers addresses.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="dnsServers">Servers to be used (in preference order).</param>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            ServerCollection servers = new ServerCollection();
            servers.Add("ns1.dnsserver.com",53);
            servers.Add("ns2.dnsserver.com",53);
            
            SmtpClient.DirectSend(message,servers);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim servers As New ServerCollection
            servers.Add("ns1.dnsserver.com",53)
            servers.Add("ns2.dnsserver.com",53)
            
            SmtpClient.DirectSend(message,servers)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var servers:ServerCollection = new ServerCollection();
            servers.Add("ns1.dnsserver.com",53);
            servers.Add("ns2.dnsserver.com",53);
            
            SmtpClient.DirectSend(message,servers);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.DirectSendCollection(ActiveUp.Net.Mail.MessageCollection)">
            <summary>
            Sends each message using the DirectMailing technique (SMTP connection with every recipient's mail exchange server for delivery).
            MX Records are cached for faster operation.
            </summary>
            <param name="messages">The message collection to be sent.</param>
            <returns>Amount of messages successfully sent.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            Message message1 = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.DirectSend(messages);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim message1 As New Message
            message1.Subject = "Hey David!"
            message1.From = New Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclarck@otherhost.com","David Clark")
            message1.BodyText.Text = "How you doing ?"
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            SmtpClient.DirectSend(messages)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var message1:Message = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.DirectSend(messages);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.DirectSendCollection(ActiveUp.Net.Mail.MessageCollection,ActiveUp.Net.Mail.ServerCollection)">
            <summary>
            Sends all messages using the specified host as the DNS server.
            </summary>
            <param name="dnsServers">Servers to be used to send the message (in preference order).</param>
            <returns>Amount of messages successfully sent.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            Message message1 = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            ServerCollection servers = new ServerCollection();
            servers.Add("ns1.dnsserver.com",53);
            servers.Add("ns2.dnsserver.com",53);
            
            SmtpClient.DirectSend(messages,servers);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim message1 As New Message
            message1.Subject = "Hey David!"
            message1.From = New Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclarck@otherhost.com","David Clark")
            message1.BodyText.Text = "How you doing ?"
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            Dim servers As New ServerCollection
            servers.Add("ns1.dnsserver.com",53)
            servers.Add("ns2.dnsserver.com",53)
            
            SmtpClient.DirectSend(messages,servers)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var message1:Message = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            var servers:ServerCollection = new ServerCollection();
            servers.Add("ns1.dnsserver.com",53);
            servers.Add("ns2.dnsserver.com",53);
            
            SmtpClient.DirectSend(messages,servers);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.DirectSendCollection(ActiveUp.Net.Mail.MessageCollection,System.String,System.Int32)">
            <summary>
            Sends all messages using the specified host and port as the dns server.
            </summary>
            <param name="messages">The message collection to be sent.</param>
            <param name="dnsHost">Address of the server to be used.</param>
            <param name="dnsPort">Port to be used.</param>
            <returns>Amount of messages successfully sent.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            Message message1 = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.DirectSend(messages,"ns1.dnsserver.com",53);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim message1 As New Message
            message1.Subject = "Hey David!"
            message1.From = New Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclarck@otherhost.com","David Clark")
            message1.BodyText.Text = "How you doing ?"
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            SmtpClient.DirectSend(messages,"ns1.dnsserver.com",53)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var message1:Message = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.DirectSend(messages,"ns1.dnsserver.com",53);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.DirectSendCollection(ActiveUp.Net.Mail.MessageCollection,System.String)">
            <summary>
            Sends all messages using the specified host as the dns server.
            </summary>
            <param name="messages">The message collection to be sent.</param>
            <param name="dnsHost">Address of the server to be used.</param>
            <returns>Amount of messages successfully sent.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            Message message1 = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.DirectSend(messages,"ns1.dnsserver.com");
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim message1 As New Message
            message1.Subject = "Hey David!"
            message1.From = New Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclarck@otherhost.com","David Clark")
            message1.BodyText.Text = "How you doing ?"
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            SmtpClient.DirectSend(messages,"ns1.dnsserver.com")
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var message1:Message = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.DirectSend(messages,"ns1.dnsserver.com");
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.DirectSendCollection(ActiveUp.Net.Mail.MessageCollection,ActiveUp.Net.Mail.SmtpExceptionCollection@)">
            <summary>
            Sends each message using the DirectMailing technique (SMTP connection with every recipient's mail exchange server for delivery).
            MX Records are cached for faster operation. Errors occuring during the process are catched and stored in a user-defined collection for review at a later time.
            </summary>
            <param name="messages">The message collection to be sent.</param>
            <param name="errors">Reference to an SmtpException Collection to be filled with errors occuring during this process.</param>
            <returns>Amount of messages successfully sent.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            Message message1 = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,myErrorCollection);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim message1 As New Message
            message1.Subject = "Hey David!"
            message1.From = New Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclarck@otherhost.com","David Clark")
            message1.BodyText.Text = "How you doing ?"
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            SmtpClient.Send(messages,myErrorCollection)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var message1:Message = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,myErrorCollection);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.SendQueued(ActiveUp.Net.Mail.Message,System.String,ActiveUp.Net.Mail.QueuingService)">
            <summary>
            Sends the message using the specified queuing service and spool directory.
            </summary>
            <param name="message">The message to send.</param>
            <param name="spoolDirectory">The full path to the full directory.</param>
            <param name="queuingService">The queuing service to use.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.SendQueued(ActiveUp.Net.Mail.MessageCollection,System.String,ActiveUp.Net.Mail.QueuingService)">
            <summary>
            Sends the messages using the specified queuing service and spool directory.
            </summary>
            <param name="messages">The messages to send.</param>
            <param name="spoolDirectory">The full path to the full directory.</param>
            <param name="queuingService">The queuing service to use.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Send(ActiveUp.Net.Mail.Message,ActiveUp.Net.Mail.ServerCollection)">
            <summary>
            Sends the message using the specified host as mail exchange server.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="servers">Servers to be used to send the message (in preference order).</param>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            ServerCollection servers = new ServerCollection();
            servers.Add("mail.myhost.com",25);
            servers.Add("mail2.myhost.com",25);
            
            SmtpClient.Send(message,servers);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim servers As New ServerCollection
            servers.Add("mail.myhost.com",25)
            servers.Add("mail2.myhost.com",25)
            
            SmtpClient.Send(message,servers)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var servers:ServerCollection = new ServerCollection();
            servers.Add("mail.myhost.com",25);
            servers.Add("mail2.myhost.com",25);
            
            SmtpClient.Send(message,servers);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Send(ActiveUp.Net.Mail.Message,ActiveUp.Net.Mail.ServerCollection,System.String@)">
            <summary>
            Sends the message using the specified host as mail exchange server.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="servers">Servers to be used to send the message (in preference order).</param>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            ServerCollection servers = new ServerCollection();
            servers.Add("mail.myhost.com",25);
            servers.Add("mail2.myhost.com",25);
            
            SmtpClient.Send(message,servers);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim servers As New ServerCollection
            servers.Add("mail.myhost.com",25)
            servers.Add("mail2.myhost.com",25)
            
            SmtpClient.Send(message,servers)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var servers:ServerCollection = new ServerCollection();
            servers.Add("mail.myhost.com",25);
            servers.Add("mail2.myhost.com",25);
            
            SmtpClient.Send(message,servers);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Send(ActiveUp.Net.Mail.Message,System.String)">
            <summary>
            Sends the message using the specified host as mail exchange server.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="server">Server to be used to send the message.</param>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            SmtpClient.Send(message,"mail.myhost.com");
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            SmtpClient.Send(message,"mail.myhost.com")
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            SmtpClient.Send(message,"mail.myhost.com");
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Send(ActiveUp.Net.Mail.Message,System.String,System.Int32)">
            <summary>
            Sends the message using the specified host as mail exchange server on the specified port.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="host">The host to be used.</param>
            <param name="port">The port to be used.</param>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            SmtpClient.Send(message,"mail.myhost.com",8504);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            SmtpClient.Send(message,"mail.myhost.com",8504)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            SmtpClient.Send(message,"mail.myhost.com",8504);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Send(ActiveUp.Net.Mail.Message,System.String,System.String,System.String,ActiveUp.Net.Mail.SaslMechanism)">
            <summary>
            Sends the message using the specified host. Secure SASL Authentication is performed according to the requested mechanism.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="host">The host to be used.</param>
            <param name="username">The username to be used for authentication.</param>
            <param name="password">The password to be used for authentication.</param>
            <param name="mechanism">SASL Mechanism to be used for authentication.</param>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            SmtpClient.Send(message,"mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            SmtpClient.Send(message,"mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            SmtpClient.Send(message,"mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.Send(ActiveUp.Net.Mail.Message,System.String,System.Int32,System.String,System.String,ActiveUp.Net.Mail.SaslMechanism)">
            <summary>
            Sends the message using the specified host on the specified port. Secure SASL Authentication is performed according to the requested mechanism.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="host">The host to be used.</param>
            <param name="username">The username to be used for authentication.</param>
            <param name="password">The password to be used for authentication.</param>
            <param name="mechanism">SASL Mechanism to be used for authentication.</param>
            <param name="port">The port to be used.</param>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            SmtpClient.Send(message,"mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,8504);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            SmtpClient.Send(message,"mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,8504)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            SmtpClient.Send(message,"mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,8504);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.SendCollection(ActiveUp.Net.Mail.MessageCollection,System.String)">
            <summary>
            Sends all messages using the specified host.
            </summary>
            <param name="host">Address of the server to be used.</param>
            <returns>Amount of messages successfully sent.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            Message message1 = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,"mail.myhost.com");
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim message1 As New Message
            message1.Subject = "Hey David!"
            message1.From = New Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclarck@otherhost.com","David Clark")
            message1.BodyText.Text = "How you doing ?"
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            SmtpClient.Send(messages,"mail.myhost.com")
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var message1:Message = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,"mail.myhost.com");
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.SendCollection(ActiveUp.Net.Mail.MessageCollection,System.String,ActiveUp.Net.Mail.SmtpExceptionCollection@)">
            <summary>
            Sends all messages using the specified host.
            </summary>
            <param name="host">Address of the server to be used.</param>
            <param name="errors">Reference to SmtpException object collection where errors occuring during the process will be stored.</param>
            <returns>Amount of messages successfully sent.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            Message message1 = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,"mail.myhost.com",myErrorCollection);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim message1 As New Message
            message1.Subject = "Hey David!"
            message1.From = New Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclarck@otherhost.com","David Clark")
            message1.BodyText.Text = "How you doing ?"
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            SmtpClient.Send(messages,"mail.myhost.com",myErrorCollection)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var message1:Message = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,"mail.myhost.com",myErrorCollection);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.SendCollection(ActiveUp.Net.Mail.MessageCollection,ActiveUp.Net.Mail.ServerCollection)">
            <summary>
            Sends all messages using the specified host.
            </summary>
            <param name="servers">Servers to be used to send the message (in preference order).</param>
            <returns>Amount of messages successfully sent.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            Message message1 = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            ServerCollection servers = new ServerCollection();
            servers.Add("mail.myhost.com",25);
            servers.Add("mail2.myhost.com",25);
            
            SmtpClient.Send(messages,servers);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim message1 As New Message
            message1.Subject = "Hey David!"
            message1.From = New Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclarck@otherhost.com","David Clark")
            message1.BodyText.Text = "How you doing ?"
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            Dim servers As New ServerCollection
            servers.Add("mail.myhost.com",25)
            servers.Add("mail2.myhost.com",25)
            
            SmtpClient.Send(messages,servers)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var message1:Message = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            var servers:ServerCollection = new ServerCollection();
            servers.Add("mail.myhost.com",25);
            servers.Add("mail2.myhost.com",25);
            
            SmtpClient.Send(messages,servers);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.SendCollection(ActiveUp.Net.Mail.MessageCollection,ActiveUp.Net.Mail.ServerCollection,ActiveUp.Net.Mail.SmtpExceptionCollection@)">
            <summary>
            Sends all messages using the specified host.
            </summary>
            <param name="servers">Servers to be used to send the message (in preference order).</param>
            <param name="messages">MessageCollection to be sent.</param>
            <param name="errors">Reference to SmtpException object collection where errors occuring during the process will be stored.</param>
            <returns>Amount of messages successfully sent.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            Message message1 = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            ServerCollection servers = new ServerCollection();
            servers.Add("mail.myhost.com",25);
            servers.Add("mail2.myhost.com",25);
            
            SmtpClient.Send(messages,servers,myErrorCollection);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim message1 As New Message
            message1.Subject = "Hey David!"
            message1.From = New Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclarck@otherhost.com","David Clark")
            message1.BodyText.Text = "How you doing ?"
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            Dim servers As New ServerCollection
            servers.Add("mail.myhost.com",25)
            servers.Add("mail2.myhost.com",25)
            
            SmtpClient.Send(messages,servers,myErrorCollection)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var message1:Message = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            var servers:ServerCollection = new ServerCollection();
            servers.Add("mail.myhost.com",25);
            servers.Add("mail2.myhost.com",25);
            
            SmtpClient.Send(messages,servers,myErrorCollection);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.SendCollection(ActiveUp.Net.Mail.MessageCollection,System.String,System.Int32)">
            <summary>
            Sends all messages using the specified host and port.
            </summary>
            <param name="messages">The message collection to be sent.</param>
            <param name="host">Address of the server to be used.</param>
            <param name="port">Port to be used.</param>
            <returns>Amount of messages successfully sent.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            Message message1 = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,"mail.myhost.com",8504);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim message1 As New Message
            message1.Subject = "Hey David!"
            message1.From = New Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclarck@otherhost.com","David Clark")
            message1.BodyText.Text = "How you doing ?"
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            SmtpClient.Send(messages,"mail.myhost.com",8504)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var message1:Message = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,"mail.myhost.com",8504);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.SendCollection(ActiveUp.Net.Mail.MessageCollection,System.String,System.Int32,ActiveUp.Net.Mail.SmtpExceptionCollection@)">
            <summary>
            Sends all messages using the specified host and port.
            </summary>
            <param name="messages">The message collection to be sent.</param>
            <param name="host">Address of the server to be used.</param>
            <param name="port">Port to be used.</param>
            <param name="errors">Reference to an SmtpException Collection to be filled with errors occuring during this process.</param>
            <returns>Amount of messages successfully sent.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            Message message1 = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,"mail.myhost.com",8504,myErrorCollection);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim message1 As New Message
            message1.Subject = "Hey David!"
            message1.From = New Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclarck@otherhost.com","David Clark")
            message1.BodyText.Text = "How you doing ?"
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            SmtpClient.Send(messages,"mail.myhost.com",8504,myErrorCollection)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var message1:Message = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,"mail.myhost.com",8504,myErrorCollection);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.SendCollection(ActiveUp.Net.Mail.MessageCollection,System.String,System.String,System.String,ActiveUp.Net.Mail.SaslMechanism)">
            <summary>
            Sends the message using the specified host and port after authentication.
            </summary>
            <param name="messages">The message collection to be sent.</param>
            <param name="host">Host to be used to send the message.</param>
            <param name="username">Username to be used for the authentication process.</param>
            <param name="password">Password to be used for the authentication process.</param>
            <param name="mechanism">SASL mechanism to be used.</param>
            <returns>Amount of messages successfully sent.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            Message message1 = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,"mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim message1 As New Message
            message1.Subject = "Hey David!"
            message1.From = New Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclarck@otherhost.com","David Clark")
            message1.BodyText.Text = "How you doing ?"
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            SmtpClient.Send(messages,"mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var message1:Message = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,"mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.SendCollection(ActiveUp.Net.Mail.MessageCollection,System.String,System.String,System.String,ActiveUp.Net.Mail.SaslMechanism,ActiveUp.Net.Mail.SmtpExceptionCollection@)">
            <summary>
            Sends the message using the specified host and port after authentication.
            </summary>
            <param name="messages">The message collection to be sent.</param>
            <param name="host">Host to be used to send the message.</param>
            <param name="username">Username to be used for the authentication process.</param>
            <param name="password">Password to be used for the authentication process.</param>
            <param name="mechanism">SASL mechanism to be used.</param>
            <param name="errors">Reference to SmtpException object collection where errors occuring during the process will be stored.</param>
            <returns>Amount of messages successfully sent.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            Message message1 = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,"mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,myErrorCollection);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim message1 As New Message
            message1.Subject = "Hey David!"
            message1.From = New Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclarck@otherhost.com","David Clark")
            message1.BodyText.Text = "How you doing ?"
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            SmtpClient.Send(messages,"mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,myErrorCollection)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var message1:Message = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,"mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,myErrorCollection);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.SendCollection(ActiveUp.Net.Mail.MessageCollection,System.String,System.Int32,System.String,System.String,ActiveUp.Net.Mail.SaslMechanism)">
            <summary>
            Sends the message using the specified host and port after authentication.
            </summary>
            <param name="messages">The message collection to be sent.</param>
            <param name="host">Host to be used to send the message.</param>
            <param name="username">Username to be used for the authentication process.</param>
            <param name="password">Password to be used for the authentication process.</param>
            <param name="mechanism">SASL mechanism to be used.</param>
            <param name="port">Port to be used to connect to the specified host.</param>
            <returns>Amount of messages successfully sent.</returns>
            <example>
            <code>
            C#
            
            Message message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            Message message1 = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            MessageCollection messages = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,"mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,8504);
            
            VB.NET
            
            Dim message As New Message
            message.Subject = "Test"
            message.From = New Address("jdoe@myhost.com","John Doe")
            message.To.Add("mjohns@otherhost.com","Mike Johns")
            message.BodyText.Text = "Hello this is a test!"
            
            Dim message1 As New Message
            message1.Subject = "Hey David!"
            message1.From = New Address("jdoe@myhost.com","John Doe")
            message1.To.Add("dclarck@otherhost.com","David Clark")
            message1.BodyText.Text = "How you doing ?"
            
            Dim messages As New MessageCollection
            messages.Add(message)
            messages.Add(message1)
            
            SmtpClient.Send(messages,"mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,8504)
            
            JScript.NET
            
            var message:Message = new Message();
            message.Subject = "Test";
            message.From = new Address("jdoe@myhost.com","John Doe");
            message.To.Add("mjohns@otherhost.com","Mike Johns");
            message.BodyText.Text = "Hello this is a test!";
            
            var message1:Message = new Message();
            message1.Subject = "Hey David!";
            message1.From = New Address("jdoe@myhost.com","John Doe");
            message1.To.Add("dclarck@otherhost.com","David Clark");
            message1.BodyText.Text = "How you doing ?";
            
            var messages:MessageCollection = new MessageCollection();
            messages.Add(message);
            messages.Add(message1);
            
            SmtpClient.Send(messages,"mail.myhost.com","jdoe1234","tanstaaf",SaslMechanism.CramMd5,8504);
            </code>
            </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.SendCollection(ActiveUp.Net.Mail.MessageCollection,System.String,System.Int32,System.String,System.String,ActiveUp.Net.Mail.SaslMechanism,ActiveUp.Net.Mail.SmtpExceptionCollection@)">
            <summary>
            Sends the message using the specified host and port after authentication.
            </summary>
            <param name="messages">The message collection to be sent.</param>
            <param name="host">Host to be used to send the message.</param>
            <param name="username">Username to be used for the authentication process.</param>
            <param name="password">Password to be used for the authentication process.</param>
            <param name="mechanism">SASL mechanism to be used.</param>
            <param name="port">Port to be used to connect to the specified host.</param>
            <param name="errors">Reference to SmtpException object collection where errors occuring during the process will be stored.</param>
            <returns>Amount of messages successfully sent.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.QuickDirectSend(System.String,System.String,System.String,System.String)">
             <summary>
             This static method allows to send an email in 1 line of code.
             </summary>
             <param name="from">The email address of the person sending the message.</param>
             <param name="to">The email address of the message's recipient.</param>
             <param name="subject">The message's subject.</param>
             <param name="textBody">The text body of the message.</param>
             <example>
             C#
             
             SmtpClient.QuickDirectSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!");
            
             VB.NET
             
             SmtpClient.QuickDirectSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!")
             
             JScript.NET
             
             SmtpClient.QuickDirectSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!");
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.QuickDirectSend(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             This static method allows to send an email in 1 line of code.
             </summary>
             <param name="from">The email address of the person sending the message.</param>
             <param name="to">The email address of the message's recipient.</param>
             <param name="subject">The message's subject.</param>
             <param name="textBody">The text body of the message.</param>
             <param name="attachmentPath">The path to a file to be attached to the message.</param>
             <example>
             C#
             
             SmtpClient.QuickDirectSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!","C:\\My Documents\\file.doc");
            
             VB.NET
             
             SmtpClient.QuickDirectSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!","C:\My Documents\file.doc")
             
             JScript.NET
             
             SmtpClient.QuickDirectSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!","C:\\My Documents\\file.doc");
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.QuickDirectSend(System.String,System.String,System.String,System.String,ActiveUp.Net.Mail.BodyFormat,System.String)">
             <summary>
             This static method allows to send an email in 1 line of code.
             </summary>
             <param name="from">The email address of the person sending the message.</param>
             <param name="to">The email address of the message's recipient.</param>
             <param name="subject">The message's subject.</param>
             <param name="textBody">The text body of the message.</param>
             <param name="attachmentPath">The path to a file to be attached to the message.</param>
             <example>
             C#
             
             SmtpClient.QuickDirectSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!",BodyFormat.Text,"C:\\My Documents\\file.doc");
            
             VB.NET
             
             SmtpClient.QuickDirectSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!",BodyFormat.Text,"C:\My Documents\file.doc")
             
             JScript.NET
             
             SmtpClient.QuickDirectSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!",BodyFormat.Text,"C:\\My Documents\\file.doc");
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.QuickSend(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             This static method allows to send an email in 1 line of code.
             </summary>
             <param name="from">The email address of the person sending the message.</param>
             <param name="to">The email address of the message's recipient.</param>
             <param name="subject">The message's subject.</param>
             <param name="textBody">The text body of the message.</param>
             <example>
             C#
             
             SmtpClient.QuickSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!","mail.myhost.com");
            
             VB.NET
             
             SmtpClient.QuickSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!","mail.myhost.com")
             
             JScript.NET
             
             SmtpClient.QuickSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!","mail.myhost.com");
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.QuickSend(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             This static method allows to send an email in 1 line of code.
             </summary>
             <param name="from">The email address of the person sending the message.</param>
             <param name="to">The email address of the message's recipient.</param>
             <param name="subject">The message's subject.</param>
             <param name="textBody">The text body of the message.</param>
             <example>
             C#
             
             SmtpClient.QuickSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!","C:\\My Documents\\file.doc","mail.myhost.com");
            
             VB.NET
             
             SmtpClient.QuickSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!","C:\My Documents\file.doc","mail.myhost.com")
             
             JScript.NET
             
             SmtpClient.QuickSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!","C:\\My Documents\\file.doc","mail.myhost.com");
             </example>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpClient.QuickSend(System.String,System.String,System.String,System.String,ActiveUp.Net.Mail.BodyFormat,System.String,System.String)">
             <summary>
             This static method allows to send an email in 1 line of code.
             </summary>
             <param name="from">The email address of the person sending the message.</param>
             <param name="to">The email address of the message's recipient.</param>
             <param name="subject">The message's subject.</param>
             <param name="textBody">The text body of the message.</param>
             <example>
             C#
             
             SmtpClient.QuickSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!",BodyFormat.Text,"C:\\My Documents\\file.doc","mail.myhost.com");
            
             VB.NET
             
             SmtpClient.QuickSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!",BodyFormat.Text,"C:\My Documents\file.doc","mail.myhost.com")
             
             JScript.NET
             
             SmtpClient.QuickSend("jdoe@myhost.com","mjohns@otherhost.com","Test","Hello this is a test!",BodyFormat.Text,"C:\\My Documents\\file.doc","mail.myhost.com");
             </example>
        </member>
        <member name="E:ActiveUp.Net.Mail.SmtpClient.TcpWriting">
            <summary>
            Event fired when a command is being written to the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.SmtpClient.TcpWritten">
            <summary>
            Event fired when a command has been written to the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.SmtpClient.TcpReading">
            <summary>
            Event fired when a response is being read from the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.SmtpClient.TcpRead">
            <summary>
            Event fired when a response has been read from the server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.SmtpClient.Connecting">
            <summary>
            Event fired when attempting to connect to the remote server using the specified host.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.SmtpClient.Connected">
            <summary>
            Event fired when the object is connected to the remote server or when connection failed.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.SmtpClient.Disconnecting">
            <summary>
            Event fired when attempting to disconnect from the remote server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.SmtpClient.Disconnected">
            <summary>
            Event fired when the object disconnected from the remote server.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.SmtpClient.Authenticating">
            <summary>
            Event fired when authentication starts.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.SmtpClient.Authenticated">
            <summary>
            Event fired when authentication completed.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.SmtpClient.MessageSending">
            <summary>
            Event fired when a message is being sent.
            </summary>
        </member>
        <member name="E:ActiveUp.Net.Mail.SmtpClient.MessageSent">
            <summary>
            Event fired when a message has been sent.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.SmtpClient.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ActiveUp.Net.Mail.SmtpException">
            <summary>
            Represents an SMTP specific error.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpException.#ctor(System.String)">
            <summary>
            Constructor, sets message to the specified value.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:ActiveUp.Net.Mail.SmtpException.Message">
            <summary>
            The exception's message.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.SmtpExceptionCollection">
            <summary>
            Contains Smtp Exceptions.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpExceptionCollection.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpExceptionCollection.Add(ActiveUp.Net.Mail.SmtpException)">
            <summary>
            Add a SmtpException object in the collection.
            </summary>
            <param name="exception">Exception to add.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpExceptionCollection.Add(System.String)">
            <summary>
            Add a SmtpException in the collection specifing it's exchange name and preference level.
            </summary>
            <param name="message">Message of the exception to add.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.SmtpExceptionCollection.Remove(System.Int32)">
            <summary>
            Remove the SmtpException at the specified index position.
            </summary>
            <param name="index">The index position.</param>
        </member>
        <member name="P:ActiveUp.Net.Mail.SmtpExceptionCollection.Item(System.Int32)">
            <summary>
            Returns the SmtpException at the specified index position.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Templater">
            <summary>
            Templater class to create a mail with it's settings using a single XML file.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Templater.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Templater.#ctor(System.String)">
            <summary>
            Instanciate the templater and directly load the template file.
            </summary>
            <param name="templateFile">the filepath to the template file.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Templater.LoadTemplate(System.String)">
            <summary>
            Load a template from a file.
            </summary>
            <param name="filename">The fullpath to the file.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Templater.LoadTemplateFromString(System.String)">
            <summary>
            Load a template from a string.
            </summary>
            <param name="content">The template string.</param>
        </member>
        <member name="M:ActiveUp.Net.Mail.Templater.ProcessXmlTemplate(System.String)">
            <summary>
            Process the Xml template.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Templater.LoadFileContent(System.String)">
            <summary>
            Load the content of the specified file.
            </summary>
            <param name="filename">The full path to the file</param>
            <returns>The content of the file</returns>
        </member>
        <member name="P:ActiveUp.Net.Mail.Templater.Logger">
            <summary>
            Gets or sets the logging settings.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Templater.Message">
            <summary>
            Gets or sets the logging settings.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Templater.Regions">
            <summary>
            Gets or sets the region collection.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Templater.Conditions">
            <summary>
            Gets or sets the conditional collection.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Templater.FieldsFormats">
            <summary>
            Gets or sets the fields format options.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Templater.SmtpServers">
            <summary>
            Gets or sets the SMTP servers.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.Templater.ListTemplates">
            <summary>
            Gets or sets the List templates.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.TimedUdpClient">
            <summary>
            Summary description for TimedUdpClient.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.TimedUdpClient._returnReceive">
            <summary>
            The result of the receive (udp mode).
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.TimedUdpClient._errorOccurs">
            <summary>
            Indicates if an error occurs.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.TimedUdpClient._threadReceive">
             <summary>
            The main job of this thread is to receive data in udp.
             </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.TimedUdpClient._remote">
            <summary>
            Represents a network endpoint as an IP address and a port number.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.TimedUdpClient._mutexReturnReceive">
            <summary>
            Protects integrity of the _returnReceive variable.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.TimedUdpClient._mutexErrorOccurs">
            <summary>
            Protects integrity of the _errorOccurs variable.
            </summary>
        </member>
        <member name="F:ActiveUp.Net.Mail.TimedUdpClient._timeout">
            <summary>
            Timeout of the underlying UdpClient.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.TimedUdpClient.Receive(System.Net.IPEndPoint@)">
            <summary>
            Receives data.
            </summary>
            <param name="remote">Server pointer.</param>
            <returns>The received data.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.TimedUdpClient.StartReceive">
            <summary>
            Receive thread.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.TimedUdpClient.Timeout">
            <summary>
            Gets or sets the timeout of the underlying UdpClient.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Tokenizer.Parse(System.String)">
            <summary>
            Tokenizes a string
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Tokenizer.CleanInput(System.String)">
            <summary>
            Replace invalid characters with spaces.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.TraceInfo">
            <summary>
            Contains informations about one trace information (one Received header).
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.TraceInfo.From">
            <summary>
            Contains both (1) the name of the source host as presented in the EHLO command to the SMTP server and (2) an address literal containing the IP address of the source, determined from the TCP connection with the SMTP server.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.TraceInfo.By">
            <summary>
            Contains the name of the SMTP host who received and processed the message.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.TraceInfo.Via">
            <summary>
            Contains a mean of communication that was used for the transaction between the SMTP server and the FROM user.
            </summary>
            <example>"TCP"</example>
        </member>
        <member name="P:ActiveUp.Net.Mail.TraceInfo.With">
            <summary>
            The protocol used for the transaction by the SMTP server and the FROM user.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.TraceInfo.Id">
            <summary>
            An identification string for the transaction.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.TraceInfo.For">
            <summary>
            The destination mailbox for which the transaction was executed.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.TraceInfo.Date">
            <summary>
            The date and time of the transaction.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.UsenetXrefList">
            <summary>
            Represents a parsed Xref Header field.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.UsenetXrefList.Host">
            <summary>
            The host where the message resides.
            </summary>
        </member>
        <member name="P:ActiveUp.Net.Mail.UsenetXrefList.Groups">
            <summary>
            Name/Value collection with newsgroups as Keys and message indexes as Value.
            </summary>
        </member>
        <member name="T:ActiveUp.Net.Mail.Validator">
            <summary>
            
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.ValidateSyntax(System.String)">
            <summary>
            Validates the address' syntax.
            </summary>
            <param name="address">The address to be validated.</param>
            <returns>True if syntax is valid, otherwise false.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.ValidateSyntax(ActiveUp.Net.Mail.Address)">
            <summary>
            Validates the address' syntax.
            </summary>
            <param name="address">The address to be validated.</param>
            <returns>True if syntax is valid, otherwise false.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.ValidateSyntax(ActiveUp.Net.Mail.AddressCollection)">
            <summary>
            Validates the addresses' syntax.
            </summary>
            <param name="address">The addresses to be validated.</param>
            <returns>True if syntax is valid, otherwise false.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.Validate(System.String)">
            <summary>
            Validates syntax and existence of the given address.
            </summary>
            <param name="address">The address to be validated.</param>
            <returns>True if the address is valid, otherwise false.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.Validate(System.String,System.String)">
            <summary>
            Validates syntax and existence of the given address.
            </summary>
            <param name="address">The address to be validated.</param>
            <param name="dnsServerHost">Name Server to be used for MX records search.</param>
            <returns>True if the address is valid, otherwise false.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.Validate(System.String,ActiveUp.Net.Mail.ServerCollection)">
            <summary>
            Validates syntax and existence of the given address.
            </summary>
            <param name="address">The address to be validated.</param>
            <param name="dnsServers">Name Servers to be used for MX records search.</param>
            <returns>True if the address is valid, otherwise false.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.Validate(ActiveUp.Net.Mail.Address)">
            <summary>
            Validates syntax and existence of the given address.
            </summary>
            <param name="address">The address to be validated.</param>
            <returns>True if the address is valid, otherwise false.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.Validate(ActiveUp.Net.Mail.Address,ActiveUp.Net.Mail.ServerCollection)">
            <summary>
            Validates syntax and existence of the given address.
            </summary>
            <param name="address">The address to be validated.</param>
            <param name="dnsServers">Name Servers to be used for MX records search.</param>
            <returns>True if the address is valid, otherwise false.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.Validate(ActiveUp.Net.Mail.Address,System.String)">
            <summary>
            Validates syntax and existence of the given address.
            </summary>
            <param name="address">The address to be validated.</param>
            <param name="dnsServerHost">Name Server to be used for MX records search.</param>
            <returns>True if the address is valid, otherwise false.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.GetInvalidAddresses(ActiveUp.Net.Mail.AddressCollection)">
            <summary>
            Validates syntax and existence of the given addresses and returns a collection of invalid or inexistent addresses.
            </summary>
            <param name="addresses">The addresses to be examined.</param>
            <returns>A collection containing the invalid addresses.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.Filter(ActiveUp.Net.Mail.AddressCollection)">
            <summary>
            Validates syntax and existence of the given address and returns valid addresses.
            </summary>
            <param name="addresses">The collection to be filtered.</param>
            <returns>A collection containing the valid addresses.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.GetInvalidAddresses(ActiveUp.Net.Mail.AddressCollection,ActiveUp.Net.Mail.ServerCollection)">
            <summary>
            Validates syntax and existence of the given addresses and returns a collection of invalid or inexistent addresses.
            </summary>
            <param name="addresses">The addresses to be examined.</param>
            <param name="dnsServers">Name Servers to be used for MX records search.</param>
            <returns>A collection containing the invalid addresses.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.Filter(ActiveUp.Net.Mail.AddressCollection,ActiveUp.Net.Mail.ServerCollection)">
            <summary>
            Validates syntax and existence of the given address and returns valid addresses.
            </summary>
            <param name="addresses">The collection to be filtered.</param>
            <param name="dnsServers">Name Servers to be used for MX records search.</param>
            <returns>A collection containing the valid addresses.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.GetMxRecords(System.String)">
            <summary>
            Get the MX records for the specified domain name using the system configuration.
            </summary>
            <param name="address">The domain name.</param>
            <returns>A collection of Mx Records.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.GetMxRecords(System.String,ActiveUp.Net.Mail.ServerCollection)">
            <summary>
            Get the MX records for the specified domain name using the system configuration.
            </summary>
            <param name="address">The domain name.</param>
            <param name="dnsServers">Servers to be used for MX records search.</param>
            <returns>A collection of Mx Records.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.GetMxRecords(System.String,System.String,System.Int32)">
            <summary>
            Get the MX records for the specified domain name using the specified DNS server.
            </summary>
            <param name="address">The domain name.</param>
            <param name="host">The host name of the DNS server to use.</param>
            <param name="port">The port number of the DNS server to use.</param>
            <returns>A collection of Mx Records.</returns>
        </member>
        <member name="M:ActiveUp.Net.Mail.Validator.GetLabelsByPos(System.Byte[],System.Int32@)">
            <summary>
            Get the label at the specified position in the DNS data.
            </summary>
            <param name="streamData">The DNS data.</param>
            <param name="pos">The start position.</param>
            <returns>The label.</returns>
        </member>
        <member name="T:ActiveUp.Net.Mail.DataBinder">
            <summary>
            Psuedo Class to Support DataBinder. Since it's missing, we imply Value as current value
            </summary>
        </member>
        <member name="M:ActiveUp.Net.Mail.DataBinder.GetPropertyValue(System.Object)">
            <summary>
            Gets Default Property value of the Object. Only available in PPC, returns the object itself.
            </summary>
            <param name="source">item for retrieving Data</param>
            <returns></returns>
        </member>
    </members>
</doc>
